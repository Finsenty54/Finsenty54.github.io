<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FINSENTY54</title>
  
  <subtitle>几处早莺争暖树，谁家新燕啄春泥。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://finsenty54.github.io/"/>
  <updated>2020-08-03T05:59:20.019Z</updated>
  <id>http://finsenty54.github.io/</id>
  
  <author>
    <name>finsenty54</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RUST学习3</title>
    <link href="http://finsenty54.github.io/2020/08/03/RUST%E5%AD%A6%E4%B9%A03/"/>
    <id>http://finsenty54.github.io/2020/08/03/RUST学习3/</id>
    <published>2020-08-03T05:58:28.000Z</published>
    <updated>2020-08-03T05:59:20.019Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><p>The <code>Debug trait</code>enables us to print our struct in a way that is useful for developers so we can see its value while we’re debugging our code.<br><a id="more"></a><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[derive(Debug)]  //开启使用debug :?打印结构体</span><br><span class="line">struct Rectangle &#123;</span><br><span class="line">    width: u32,</span><br><span class="line">    height: u32,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let rect1 = Rectangle &#123;</span><br><span class="line">        width: <span class="number">30</span>,</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    println!(<span class="string">"rect1 is &#123;:?&#125;"</span>, rect1);  //or&#123;:<span class="comment">#?&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>their first parameter is <code>always self,</code>which represents the instance of the struct the method is being called on.</p><p>impl (implementation)</p><p>Methods can<code>take ownership of self,</code> borrow<code>self immutably</code>as we’ve done here, or borrow self mutably, just as they can any other parameter.<br><code>&amp;mut self</code></p><h3 id="associated-function"><a href="#associated-function" class="headerlink" title="associated function"></a>associated function</h3><p>You’ve already used the String::from associated function.</p><p>Associated functions are often used for constructors that will <code>return a new instance of the struct.</code><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[derive(Debug)]</span><br><span class="line">struct Rectangle &#123;</span><br><span class="line">    width: u32,</span><br><span class="line">    height: u32,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">impl Rectangle &#123;</span><br><span class="line">    fn square(size: u32) -&gt; Rectangle &#123;  //没有self</span><br><span class="line">        Rectangle &#123;</span><br><span class="line">            width: size,</span><br><span class="line">            height: size,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let sq = Rectangle::square(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Each struct is allowed to have multiple impl blocks. </p><h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><p>枚举<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">enum IpAddrKind &#123;</span><br><span class="line">    V4,  //V4 V6就是所谓的变体</span><br><span class="line">    V6,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let four = IpAddrKind::V4;</span><br><span class="line">    let six = IpAddrKind::V6;</span><br><span class="line"></span><br><span class="line">    route(IpAddrKind::V4);</span><br><span class="line">    route(IpAddrKind::V6);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn route(ip_kind: IpAddrKind) &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>枚举比struct更简明<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    enum IpAddr &#123;</span><br><span class="line">        V4(String),</span><br><span class="line">        V6(String),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let home = IpAddr::V4(String::from(<span class="string">"127.0.0.1"</span>));</span><br><span class="line"></span><br><span class="line">    let loopback = IpAddr::V6(String::from(<span class="string">"::1"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>枚举每个变体可以有不同的类型<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    enum IpAddr &#123;</span><br><span class="line">        V4(u8, u8, u8, u8),</span><br><span class="line">        V6(String),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let home = IpAddr::V4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    let loopback = IpAddr::V6(String::from(<span class="string">"::1"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[allow(unused_variables)]</span><br><span class="line">fn main() &#123;</span><br><span class="line">struct Ipv4Addr &#123;</span><br><span class="line">    // --snip--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct Ipv6Addr &#123;</span><br><span class="line">    // --snip--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum IpAddr &#123;</span><br><span class="line">    V4(Ipv4Addr),</span><br><span class="line">    V6(Ipv6Addr),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum Message &#123;</span><br><span class="line">    Quit,</span><br><span class="line">    Move &#123; x: i32, y: i32 &#125;,</span><br><span class="line">    Write(String),</span><br><span class="line">    ChangeColor(i32, i32, i32),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    enum Message &#123;</span><br><span class="line">        Quit,</span><br><span class="line">        Move &#123; x: i32, y: i32 &#125;,</span><br><span class="line">        Write(String),</span><br><span class="line">        ChangeColor(i32, i32, i32),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    impl Message &#123;</span><br><span class="line">        fn call(&amp;self) &#123;</span><br><span class="line">            // method body would be defined here</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let m = Message::Write(String::from(<span class="string">"hello"</span>));</span><br><span class="line">    m.call();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="enum-option"><a href="#enum-option" class="headerlink" title="enum option"></a>enum option</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![allow(unused_variables)]</span><br><span class="line">fn main() &#123;</span><br><span class="line">enum Option&lt;<span class="literal">T</span>&gt; &#123; //&lt;<span class="literal">T</span>&gt; means the Some variant of the Option enum can hold one piece of data of any type</span><br><span class="line">    Some(<span class="literal">T</span>),</span><br><span class="line">    None,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>option不用显示引入，已经提前有了</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let some_number = Some(<span class="number">5</span>);</span><br><span class="line">    let some_string = Some(<span class="string">"a string"</span>);</span><br><span class="line"></span><br><span class="line">    let absent_number: Option&lt;i32&gt; = None;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we use None rather than Some, we need to tell Rust what<code>type of Option&lt;T&gt;</code> we have<br>Option<t> and T (where T can be any type) are different types,<br>In other words, you have to convert an Option<t> to a <code>T</code> before you can perform T operations with it. </t></t></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">match</span><br><span class="line">enum Coin &#123;</span><br><span class="line">    Penny,</span><br><span class="line">    Nickel,</span><br><span class="line">    Dime,</span><br><span class="line">    Quarter,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn value_in_cents(coin: Coin) -&gt; u8 &#123;</span><br><span class="line">    match coin &#123;</span><br><span class="line">        Coin::Penny =&gt; <span class="number">1</span>,</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::Quarter =&gt; <span class="number">25</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;&#125;</span><br></pre></td></tr></table></figure><p>The code associated with <code>each arm is an expression</code>, and the resulting value of the expression in the matching arm is the value that gets returned for the entire match expression.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fn value_in_cents(coin: Coin) -&gt; u8 &#123;</span><br><span class="line">    match coin &#123;</span><br><span class="line">        Coin::Penny =&gt; &#123;</span><br><span class="line">            println!(<span class="string">"Lucky penny!"</span>);</span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::Quarter =&gt; <span class="number">25</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[derive(Debug)]</span><br><span class="line">enum UsState &#123;</span><br><span class="line">    Alabama,</span><br><span class="line">    Alaska,</span><br><span class="line">    // --snip--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum Coin &#123;</span><br><span class="line">    Penny,</span><br><span class="line">    Nickel,</span><br><span class="line">    Dime,</span><br><span class="line">    Quarter(UsState),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn value_in_cents(coin: Coin) -&gt; u8 &#123;</span><br><span class="line">    match coin &#123;</span><br><span class="line">        Coin::Penny =&gt; <span class="number">1</span>,</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::Quarter(state) =&gt; &#123;</span><br><span class="line">            println!(<span class="string">"State quarter from &#123;:?&#125;!"</span>, state); //得到coin里quarter里的usstate值</span><br><span class="line">            <span class="number">25</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    value_in_cents(Coin::Quarter(UsState::Alaska));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用option<t><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    fn plus_one(x: Option&lt;i32&gt;) -&gt; Option&lt;i32&gt; &#123;</span><br><span class="line">        match x &#123;</span><br><span class="line">            None =&gt; None,</span><br><span class="line">            Some(i) =&gt; Some(i + <span class="number">1</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let five = Some(<span class="number">5</span>);</span><br><span class="line">    let six = plus_one(five);</span><br><span class="line">    let none = plus_one(None);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p><p><code>Combining match and enums</code> is useful in many situations.<br>match against an enum, <code>bind a variable to the data inside,</code> and then execute code based on it.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let some_u8_value = 0u8;</span><br><span class="line">    match some_u8_value &#123;</span><br><span class="line">        <span class="number">1</span> =&gt; println!(<span class="string">"one"</span>),</span><br><span class="line">        <span class="number">3</span> =&gt; println!(<span class="string">"three"</span>),</span><br><span class="line">        <span class="number">5</span> =&gt; println!(<span class="string">"five"</span>),</span><br><span class="line">        <span class="number">7</span> =&gt; println!(<span class="string">"seven"</span>),</span><br><span class="line">        _ =&gt; (),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_</code>省略The _ pattern will match any value.<code>The () is just the unit value</code></p><h3 id="if-let"><a href="#if-let" class="headerlink" title="if let"></a>if let</h3><p>care about only one of the cases. For this situation, Rust provides if let.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let some_u8_value = Some(0u8);</span><br><span class="line">    <span class="keyword">if</span> let Some(<span class="number">3</span>) = some_u8_value &#123;</span><br><span class="line">        println!(<span class="string">"three"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let coin = Coin::Penny;</span><br><span class="line">    let mut count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> let Coin::Quarter(state) = coin &#123;</span><br><span class="line">        println!(<span class="string">"State quarter from &#123;:?&#125;!"</span>, state);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let coin = Coin::Penny;</span><br><span class="line">    let mut count = <span class="number">0</span>;</span><br><span class="line">    match coin &#123;</span><br><span class="line">        Coin::Quarter(state) =&gt; println!(<span class="string">"State quarter from &#123;:?&#125;!"</span>, state),</span><br><span class="line">        _ =&gt; count += <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="packages-gt-crates-gt-modules"><a href="#packages-gt-crates-gt-modules" class="headerlink" title="packages&gt;crates&gt;modules"></a>packages&gt;crates&gt;modules</h3><p> A package is<code>one or more crates</code>that provide a set of functionality. A package contains a Cargo.toml file that describes how to build those crates.<br>A package must contain zero or one library crates, and no more. It can contain as many binary crates as you’d like, but it must <code>contain at least one crate</code> (either library or binary).<br>If a package <code>contains src/main.rs and src/lib.rs, it has two crates: a library and a binary,</code> both with the same name as the package.<br>A package can<code>have multiple binary crates by placing files in the src/bin directory:</code>each file will be a separate binary crate.</p><p>the <code>use</code> keyword that brings a path into scope; and the <code>pub</code> keyword to make items public. We’ll also discuss the as keyword, external packages, and the glob operator</p><p>Modules let us organize code within a crate into groups</p><p>Create a new library named restaurant by running <code>cargo new --lib</code>restaurant;<br>crate //implicit module  src/main.rs and src/lib.rs 产生<br> └── front_of_house<br>     ├── hosting<br>     │   ├── add_to_waitlist<br>     │   └── seat_at_table<br>     └── serving<br>         ├── take_order<br>         ├── serve_order<br>         └── take_payment</p><p> If we want to call a function, we need to know its path.<br>A path can take two forms:</p><p>An <code>absolute path</code> starts from a crate root by using a crate name or a literal crate.<br>A <code>relative path</code>starts from the current module and uses self, super, or an identifier in the current module.<br>Both absolute and relative paths are followed by one or more identifiers separated by double colons (<code>::</code>).</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mod front_of_house &#123;</span><br><span class="line">    mod hosting &#123;</span><br><span class="line">        fn add_to_waitlist() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pub fn eat_at_restaurant() &#123;</span><br><span class="line">    // Absolute path</span><br><span class="line">    crate::front_of_house::hosting::add_to_waitlist();</span><br><span class="line"></span><br><span class="line">    // Relative path</span><br><span class="line">    front_of_house::hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The way privacy works in Rust is that all items (<code>functions, methods, structs, enums, modules, and constants) are private by default</code>.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mod front_of_house &#123;</span><br><span class="line">    pub mod hosting &#123;</span><br><span class="line">        pub fn add_to_waitlist() &#123;&#125; //making the module public doesn’t make its contents public. </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pub fn eat_at_restaurant() &#123;</span><br><span class="line">    // Absolute path</span><br><span class="line">    crate::front_of_house::hosting::add_to_waitlist();</span><br><span class="line"></span><br><span class="line">    // Relative path</span><br><span class="line">    front_of_house::hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn serve_order() &#123;&#125;</span><br><span class="line"></span><br><span class="line">mod back_of_house &#123;</span><br><span class="line">    fn fix_incorrect_order() &#123;</span><br><span class="line">        cook_order();</span><br><span class="line">        super::serve_order();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fn cook_order() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Enums aren’t very useful unless their variants are public; it would be annoying to have to annotate all enum variants with pub in every case, so the <code>default for enum variants is to be public.</code>Structs are often useful without their fields being public, so struct fields follow the general rule of <code>everything being private by default</code> unless annotated with pub.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">use</span><br><span class="line">mod front_of_house &#123;</span><br><span class="line">    pub mod hosting &#123;</span><br><span class="line">        pub fn add_to_waitlist() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">use crate::front_of_house::hosting;</span><br><span class="line"></span><br><span class="line">pub fn eat_at_restaurant() &#123;</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mod front_of_house &#123;</span><br><span class="line">    pub mod hosting &#123;</span><br><span class="line">        pub fn add_to_waitlist() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">use self::front_of_house::hosting;</span><br><span class="line"></span><br><span class="line">pub fn eat_at_restaurant() &#123;</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="as"><a href="#as" class="headerlink" title="as"></a>as</h3><p>There’s another solution to the problem of bringing two types of the same name into the same scope with use: after the path, we can specify <code>as and a new local name</code>, or alias, for the type.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">![allow(unused_variables)]</span><br><span class="line">fn main() &#123;</span><br><span class="line">use std::fmt::Result;</span><br><span class="line">use std::io::Result as IoResult;</span><br><span class="line"></span><br><span class="line">fn function1() -&gt; Result &#123;</span><br><span class="line">    // --snip--</span><br><span class="line">    Ok(())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn function2() -&gt; IoResult&lt;()&gt; &#123;</span><br><span class="line">    // --snip--</span><br><span class="line">    Ok(())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this technique is called re-exporting because we’re bringing an item into scope but also making that item available for others to bring into their scope<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mod front_of_house &#123;</span><br><span class="line">    pub mod hosting &#123;</span><br><span class="line">        pub fn add_to_waitlist() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pub use crate::front_of_house::hosting;  //其他可以 另外创立一个链接</span><br><span class="line"></span><br><span class="line">pub fn eat_at_restaurant() &#123;</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">use std::collections::HashMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This is an absolute path starting with std, the name of the standard library crate.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">use rand::Rng;</span><br><span class="line">// --snip--</span><br><span class="line">use std::&#123;cmp::Ordering, io&#125;;</span><br><span class="line">// --snip--</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">use std::io::&#123;self, Write&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#![allow(unused_variables)]</span></span><br><span class="line">fn main() &#123;</span><br><span class="line">use std::collections::*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> brings all public items </p><p>The <code>mod</code> keyword declares modules, and Rust looks in a file with the same name as the module for the code that goes into that module.</p><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let v: Vec&lt;i32&gt; = Vec::new();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let v = vec![<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; //类别自己推测</span><br><span class="line">&#125;</span><br><span class="line">fn main() &#123;</span><br><span class="line">    let mut v = Vec::new();</span><br><span class="line"></span><br><span class="line">    v.push(<span class="number">5</span>);</span><br><span class="line">    v.push(<span class="number">6</span>);</span><br><span class="line">    v.push(<span class="number">7</span>);</span><br><span class="line">    v.push(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn main() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        let v = vec![<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        // do stuff with v</span><br><span class="line">    &#125; // &lt;- v goes out of scope and is freed here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let v = vec![<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    let third: &amp;i32 = &amp;v[<span class="number">2</span>];</span><br><span class="line">    println!(<span class="string">"The third element is &#123;&#125;"</span>, third);</span><br><span class="line"></span><br><span class="line">    match v.get(<span class="number">2</span>) &#123; //gives us an Option&lt;&amp;<span class="literal">T</span>&gt;.</span><br><span class="line">        Some(third) =&gt; println!(<span class="string">"The third element is &#123;&#125;"</span>, third),</span><br><span class="line">        None =&gt; println!(<span class="string">"There is no third element."</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let mut v = vec![<span class="number">100</span>, <span class="number">32</span>, <span class="number">57</span>];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> &amp;mut v &#123;</span><br><span class="line">        *i += <span class="number">50</span>; //解引用 dereference operator (*) to get to the value <span class="keyword">in</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    enum SpreadsheetCell &#123;</span><br><span class="line">        Int(i32),</span><br><span class="line">        Float(f64),</span><br><span class="line">        Text(String),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let row = vec![  //vec类型为SpreadsheetCell 实际上存储不同类型值</span><br><span class="line">        SpreadsheetCell::Int(<span class="number">3</span>),</span><br><span class="line">        SpreadsheetCell::Text(String::from(<span class="string">"blue"</span>)),</span><br><span class="line">        SpreadsheetCell::Float(<span class="number">10.12</span>),</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举要配合match使用</p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>Remember that<code>strings are UTF-8</code>encoded,<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let hello = String::from(<span class="string">"السلام عليكم"</span>);</span><br><span class="line">    let hello = String::from(<span class="string">"Dobrý den"</span>);</span><br><span class="line">    let hello = String::from(<span class="string">"Hello"</span>);</span><br><span class="line">    let hello = String::from(<span class="string">"שָׁלוֹם"</span>);</span><br><span class="line">    let hello = String::from(<span class="string">"नमस्ते"</span>);</span><br><span class="line">    let hello = String::from(<span class="string">"こんにちは"</span>);</span><br><span class="line">    let hello = String::from(<span class="string">"안녕하세요"</span>);</span><br><span class="line">    let hello = String::from(<span class="string">"你好"</span>);</span><br><span class="line">    let hello = String::from(<span class="string">"Olá"</span>);</span><br><span class="line">    let hello = String::from(<span class="string">"Здравствуйте"</span>);</span><br><span class="line">    let hello = String::from(<span class="string">"Hola"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let mut s = String::from(<span class="string">"foo"</span>);</span><br><span class="line">    s.push_str(<span class="string">"bar"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let mut s = String::from(<span class="string">"lo"</span>);</span><br><span class="line">    s.push(<span class="string">'l'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>push method takes<code>a single character</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let s1 = String::from(<span class="string">"Hello, "</span>);</span><br><span class="line">    let s2 = String::from(<span class="string">"world!"</span>);</span><br><span class="line">    let s3 = s1 + &amp;s2; // note s1 has been moved here and can no longer be used//be moved into the add call and no longer be valid after that.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> add is that the compiler can coerce the &amp;String argument into a &amp;str</p><h4 id="format"><a href="#format" class="headerlink" title="format"></a>format</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let s1 = String::from(<span class="string">"tic"</span>);</span><br><span class="line">    let s2 = String::from(<span class="string">"tac"</span>);</span><br><span class="line">    let s3 = String::from(<span class="string">"toe"</span>);</span><br><span class="line"></span><br><span class="line">    let s = format!(<span class="string">"&#123;&#125;-&#123;&#125;-&#123;&#125;"</span>, s1, s2, s3); //doesn’t take ownership of any of its parameters.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>utf-8</code>可变字节 1-4字节，有些一个字节 有些4个字节</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[allow(unused_variables)]</span><br><span class="line">fn main() &#123;</span><br><span class="line">let hello = <span class="string">"Здравствуйте"</span>;</span><br><span class="line"></span><br><span class="line">let s = &amp;hello[<span class="number">0.</span><span class="number">.4</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#![allow(unused_variables)]</span></span><br><span class="line">fn main() &#123;</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"नमस्ते"</span>.chars() &#123;</span><br><span class="line">    println!(<span class="string">"&#123;&#125;"</span>, c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#![allow(unused_variables)]</span></span><br><span class="line">fn main() &#123;</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">"नमस्ते"</span>.bytes() &#123; // returns each raw byte,</span><br><span class="line">    println!(<span class="string">"&#123;&#125;"</span>, b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hashmap"><a href="#hashmap" class="headerlink" title="hashmap"></a>hashmap</h3><p><code>all of the keys</code> must have the<code>same type</code>, and all of the<code>values</code>must have the<code>same type.</code><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    use std::collections::HashMap;</span><br><span class="line">    let mut scores = HashMap::new();</span><br><span class="line">    scores.insert(String::from(<span class="string">"Blue"</span>), <span class="number">10</span>);</span><br><span class="line">    scores.insert(String::from(<span class="string">"Yellow"</span>), <span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    use std::collections::HashMap;</span><br><span class="line"></span><br><span class="line">    let teams = vec![String::from(<span class="string">"Blue"</span>), String::from(<span class="string">"Yellow"</span>)];</span><br><span class="line">    let initial_scores = vec![<span class="number">10</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">    let mut scores: HashMap&lt;_, _&gt; =</span><br><span class="line">        teams.into_iter().zip(initial_scores.into_iter()).collect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>zip</code>method to create a vector of tuples<br><code>collect</code>method to turn that vector of tuples into a hash map,</p><p>For types that implement the <code>Copy trait</code>, like i32, the values<code>are copied into</code> the hash map. For owned values like String, the values will be moved and the hash map will be the <code>owner of those values</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    use std::collections::HashMap;</span><br><span class="line"></span><br><span class="line">    let mut scores = HashMap::new();</span><br><span class="line"></span><br><span class="line">    scores.insert(String::from(<span class="string">"Blue"</span>), <span class="number">10</span>);</span><br><span class="line">    scores.insert(String::from(<span class="string">"Yellow"</span>), <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    let team_name = String::from(<span class="string">"Blue"</span>);</span><br><span class="line">    let score = scores.get(&amp;team_name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Some(&amp;10). The result is wrapped in Some because get returns an Option&lt;&amp;V&gt;<br>no value get will return None.</p><pre><code>for (key, value) in &amp;scores {    println!(&quot;{}: {}&quot;, key, value);}</code></pre><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    use std::collections::HashMap;</span><br><span class="line"></span><br><span class="line">    let mut scores = HashMap::new();</span><br><span class="line">    scores.insert(String::from(<span class="string">"Blue"</span>), <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    scores.entry(String::from(<span class="string">"Yellow"</span>)).or_insert(<span class="number">50</span>);  //entry检查值是否存在，返回Entry， or_insert是Entry的方法 <span class="keyword">return</span> a mutable reference to the value   没有值插入</span><br><span class="line">    scores.entry(String::from(<span class="string">"Blue"</span>)).or_insert(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    println!(<span class="string">"&#123;:?&#125;"</span>, scores); //&#123;<span class="string">"Yellow"</span>: <span class="number">50</span>, <span class="string">"Blue"</span>: <span class="number">10</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    use std::collections::HashMap;</span><br><span class="line"></span><br><span class="line">    let text = <span class="string">"hello world wonderful world"</span>;</span><br><span class="line"></span><br><span class="line">    let mut map = HashMap::new();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> text.split_whitespace() &#123;</span><br><span class="line">        let count = map.entry(word).or_insert(<span class="number">0</span>); //or_insert method actually returns a mutable reference (&amp;mut V) 所以可以加<span class="number">1</span></span><br><span class="line">        *count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println!(<span class="string">"&#123;:?&#125;"</span>, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Debug&quot;&gt;&lt;a href=&quot;#Debug&quot; class=&quot;headerlink&quot; title=&quot;Debug&quot;&gt;&lt;/a&gt;Debug&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;Debug trait&lt;/code&gt;enables us to print our struct in a way that is useful for developers so we can see its value while we’re debugging our code.&lt;br&gt;
    
    </summary>
    
    
      <category term="RUST" scheme="http://finsenty54.github.io/tags/RUST/"/>
    
  </entry>
  
  <entry>
    <title>RUST学习2</title>
    <link href="http://finsenty54.github.io/2020/07/29/RUST%E5%AD%A6%E4%B9%A02/"/>
    <id>http://finsenty54.github.io/2020/07/29/RUST学习2/</id>
    <published>2020-07-29T01:33:06.000Z</published>
    <updated>2020-07-29T01:34:09.636Z</updated>
    
    <content type="html"><![CDATA[<h3 id="rust"><a href="#rust" class="headerlink" title="rust"></a>rust</h3><p>All data <code>stored on the stack must have a known, fixed size.</code>Data with an unknown size at compile time or a size that might change must be stored on the heap instead.</p><p>Pushing to<code>the stack is faster than allocating on the heap</code> because the allocator never has to search for a place to store new data;<br><a id="more"></a></p><h3 id="Ownership-Rules"><a href="#Ownership-Rules" class="headerlink" title="Ownership Rules"></a>Ownership Rules</h3><p>解决堆上数据 的问题</p><p>Each value in Rust has a variable that’s called its owner.<br>There can only <code>be one owner at a time.</code><br>When the <code>owner goes out of scope,</code>the value will be dropped. <code>从堆中回收</code></p><p>string 存在scope中</p><p>the concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy. </p><p>rust<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let s1 = String::from(<span class="string">"hello"</span>);</span><br><span class="line">  <span class="params">|         -- move occurs because `s1` has type `std::string::String`, which does <span class="keyword">not</span> implement the `Copy` trait</span></span><br><span class="line"><span class="params">3 |</span>     let s2 = s1;</span><br><span class="line">  <span class="params">|              -- value moved here</span></span><br></pre></td></tr></table></figure></p><p>s1 无效 回收只s2</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let s1 = String::from(<span class="string">"hello"</span>);</span><br><span class="line">    let s2 = s1.clone();</span><br><span class="line"></span><br><span class="line">    println!(<span class="string">"s1 = &#123;&#125;, s2 = &#123;&#125;"</span>, s1, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">5</span></span><br><span class="line">y=x</span><br></pre></td></tr></table></figure><p><code>栈中不用clone</code><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let s = String::from(<span class="string">"hello"</span>);  <span class="regexp">//</span> s comes into scope</span><br><span class="line"></span><br><span class="line">    takes_ownership(s);             <span class="regexp">//</span> s<span class="string">'s value moves into the function...</span></span><br><span class="line"><span class="string">                                    // ... and so is no longer valid here</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    let x = 5;                      // x comes into scope</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    makes_copy(x);                  // x would move into the function,</span></span><br><span class="line"><span class="string">                                    // but i32 is Copy, so it’s okay to still</span></span><br><span class="line"><span class="string">                                    // use x afterward</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125; // Here, x goes out of scope, then s. But because s'</span>s value was moved, nothing</span><br><span class="line">  /<span class="regexp">/ special happens.</span></span><br></pre></td></tr></table></figure></p><h3 id="References-and-Borrowing"><a href="#References-and-Borrowing" class="headerlink" title="References and Borrowing"></a>References and Borrowing</h3><p>引用 不拿所有权 也称借<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let mut s = String::from(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">    change(&amp;mut s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn change(<span class="symbol">some_string:</span> &amp;mut String) &#123;</span><br><span class="line">    some_string.push_str(<span class="string">", world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>一个可变变量只能引用一次</code><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let mut s = String::from(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        let r1 = &amp;mut s;</span><br><span class="line">    &#125; /<span class="regexp">/ r1 goes out of scope here, so we can make a new reference with no problems.</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    let r2 = &amp;mut s;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>用花括号创建一个空间，来引用，</p><p> We also cannot have a mutable reference while we have an immutable one.<br><code>可变变量有不变引用后，不能创建可变引用</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let mut s = String::from(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">    let r1 = &amp;s; <span class="regexp">//</span> no problem</span><br><span class="line">    let r2 = &amp;s; <span class="regexp">//</span> no problem</span><br><span class="line">    println!(<span class="string">"&#123;&#125; and &#123;&#125;"</span>, r1, r2);</span><br><span class="line">    /<span class="regexp">/ r1 and r2 are no longer used after this point</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    let r3 = &amp;mut s; /</span><span class="regexp">/ no problem</span></span><br><span class="line"><span class="regexp">    println!("&#123;&#125;", r3);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>引用范围从创建到最后一次使用<br>关键是不重叠</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let reference_to_nothing = dangle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn dangle() -&gt; &amp;String &#123; <span class="regexp">//</span> dangle returns a reference to a String</span><br><span class="line"></span><br><span class="line">    let s = String::from(<span class="string">"hello"</span>); <span class="regexp">//</span> s is a new String</span><br><span class="line"></span><br><span class="line">    &amp;s /<span class="regexp">/ we return a reference to the String, s</span></span><br><span class="line"><span class="regexp">&#125; /</span><span class="regexp">/ Here, s goes out of scope, and is dropped. Its memory goes away.</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ Danger!</span></span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fn first_word(<span class="symbol">s:</span> &amp;String) -&gt; usize &#123;</span><br><span class="line">    let bytes = s.as_bytes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.iter().enumerate() &#123;</span><br><span class="line">        <span class="keyword">if</span> item == b<span class="string">' '</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s.len()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>iter</code>is a method that returns each element in a collection<br><code>enumerate</code> wraps the result of iter and returns each element as part of a tuple instead.<br><code>第一个参数是索引值，第二个是值的引用</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let s = String::from(<span class="string">"hello world"</span>);</span><br><span class="line"></span><br><span class="line">    let hello = &amp;s[<span class="number">0</span>..<span class="number">5</span>]; <span class="regexp">//</span><span class="number">0</span>可以省去</span><br><span class="line">    let world = &amp;s[<span class="number">6</span>..<span class="number">11</span>]; 存<span class="number">6</span>-<span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string-slices"><a href="#string-slices" class="headerlink" title="string slices"></a>string slices</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">let s = String::from(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">let len = s.len();</span><br><span class="line"></span><br><span class="line">let slice = &amp;s[<span class="number">3</span>..len];</span><br><span class="line">let slice = &amp;s[<span class="number">3</span>..]; <span class="regexp">//</span>相同</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The type that signifies “string slice” is written as &amp;str:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fn first_word(<span class="symbol">s:</span> &amp;String) -&gt; &amp;str &#123;</span><br><span class="line">    let bytes = s.as_bytes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.iter().enumerate() &#123;</span><br><span class="line">        <span class="keyword">if</span> item == b<span class="string">' '</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;s[<span class="number">0</span>..i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;s[..]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>String Literals Are Slices<br>固定字符串就是一种切片<br>The type of s here is &amp;str<br>it’s a slice pointing to that specific point of the binary</p><p>fn first_word(s: &amp;str) -&gt; &amp;str {<br><code>可以接受&amp;String 和 &amp;str</code> //String 和 字符串 如“hello”</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">let a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">let slice = &amp;a[<span class="number">1</span>..<span class="number">3</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><p>结构体字段里都是可变的<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">struct User &#123;</span><br><span class="line">    <span class="symbol">username:</span> String,</span><br><span class="line">    <span class="symbol">email:</span> String,</span><br><span class="line">    <span class="symbol">sign_in_count:</span> u64,</span><br><span class="line">    <span class="symbol">active:</span> bool,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct User &#123;</span><br><span class="line">    <span class="symbol">username:</span> String,</span><br><span class="line">    <span class="symbol">email:</span> String,</span><br><span class="line">    <span class="symbol">sign_in_count:</span> u64,</span><br><span class="line">    <span class="symbol">active:</span> bool,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let user1 = User &#123;</span><br><span class="line">        <span class="symbol">email:</span> String::from(<span class="string">"someone@example.com"</span>),</span><br><span class="line">        <span class="symbol">username:</span> String::from(<span class="string">"someusername123"</span>),</span><br><span class="line">        <span class="symbol">active:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">sign_in_count:</span> <span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>顺序随便<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct User &#123;</span><br><span class="line">    <span class="symbol">username:</span> String,</span><br><span class="line">    <span class="symbol">email:</span> String,</span><br><span class="line">    <span class="symbol">sign_in_count:</span> u64,</span><br><span class="line">    <span class="symbol">active:</span> bool,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fn build_user(<span class="symbol">email:</span> String, <span class="symbol">username:</span> String) -&gt; User &#123; <span class="regexp">//</span>返回struct 实例</span><br><span class="line">    User &#123;</span><br><span class="line">        <span class="symbol">email:</span> email,</span><br><span class="line">        <span class="symbol">username:</span> username,</span><br><span class="line">        <span class="symbol">active:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">sign_in_count:</span> <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let user1 = build_user(</span><br><span class="line">        String::from(<span class="string">"someone@example.com"</span>),</span><br><span class="line">        String::from(<span class="string">"someusername123"</span>),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fn build_user(<span class="symbol">email:</span> String, <span class="symbol">username:</span> String) -&gt; User &#123;</span><br><span class="line">    User &#123;</span><br><span class="line">        email,  <span class="regexp">//</span>省略rather than <span class="symbol">email:</span> email.</span><br><span class="line">        username,</span><br><span class="line">        <span class="symbol">active:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">sign_in_count:</span> <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更新赋予另一实例</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">struct User &#123;</span><br><span class="line">    <span class="symbol">username:</span> String,</span><br><span class="line">    <span class="symbol">email:</span> String,</span><br><span class="line">    <span class="symbol">sign_in_count:</span> u64,</span><br><span class="line">    <span class="symbol">active:</span> bool,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let user1 = User &#123;</span><br><span class="line">        <span class="symbol">email:</span> String::from(<span class="string">"someone@example.com"</span>),</span><br><span class="line">        <span class="symbol">username:</span> String::from(<span class="string">"someusername123"</span>),</span><br><span class="line">        <span class="symbol">active:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">sign_in_count:</span> <span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    let user2 = User &#123;</span><br><span class="line">        <span class="symbol">email:</span> String::from(<span class="string">"another@example.com"</span>),</span><br><span class="line">        <span class="symbol">username:</span> String::from(<span class="string">"anotherusername567"</span>),</span><br><span class="line">        ..user1  /<span class="regexp">/ .. specifies that the remaining fields not explicitly set should have the same value as the fields in the given instance.</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="tuple-struct"><a href="#tuple-struct" class="headerlink" title="tuple struct"></a>tuple struct</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    struct Color(i32, i32, i32);</span><br><span class="line">    struct Point(i32, i32, i32);</span><br><span class="line"></span><br><span class="line">    let black = Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    let origin = Point(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做网站<br>文件路径的一些通用规则：</p><p>若引用的目标文件与 HTML 文件同级，只需直接使用文件名，比如 <code>my-image.jpg</code>。<br>要引用子文件夹中的文件，要在路径前写下目录名并加一个斜杠，比如 <code>subdirectory/my-image.jpg</code>。<br>若引用的目标文件位于 HTML 文件的上级，需要加上两个点。比如，如果 index.html 在 test-site 下面的一个子目录而 my-image.png 在 test-site 目录，你可以在 index.html 里使用 <code>../my-image.png 引用 my-image.png</code>。<br>以上方法可以随意组合，比如 ../subdirectory/another-subdirectory/my-image.png。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;rust&quot;&gt;&lt;a href=&quot;#rust&quot; class=&quot;headerlink&quot; title=&quot;rust&quot;&gt;&lt;/a&gt;rust&lt;/h3&gt;&lt;p&gt;All data &lt;code&gt;stored on the stack must have a known, fixed size.&lt;/code&gt;Data with an unknown size at compile time or a size that might change must be stored on the heap instead.&lt;/p&gt;
&lt;p&gt;Pushing to&lt;code&gt;the stack is faster than allocating on the heap&lt;/code&gt; because the allocator never has to search for a place to store new data;&lt;br&gt;
    
    </summary>
    
    
      <category term="RUST" scheme="http://finsenty54.github.io/tags/RUST/"/>
    
  </entry>
  
  <entry>
    <title>RUST学习1</title>
    <link href="http://finsenty54.github.io/2020/07/27/RUST%E5%AD%A6%E4%B9%A01/"/>
    <id>http://finsenty54.github.io/2020/07/27/RUST学习1/</id>
    <published>2020-07-27T07:38:11.000Z</published>
    <updated>2020-07-27T07:50:07.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h3><p><code>cargo doc --open</code><br><code>rustup doc</code><br><code>cargo new --vcs=git</code><br><code>cargo build</code><br><code>cargo run</code><br><code>cargo check</code>更快编译，但不生成可执行文件<br><code>cargo build --release</code> 生成的执行文件运行更快<br>benchmark基准测试<br><a id="more"></a><br>Variables and Mutability<br>mutable 易变的</p><p>let mut x=5</p><h6 id="rust默认变量不可变"><a href="#rust默认变量不可变" class="headerlink" title="rust默认变量不可变"></a>rust默认变量不可变</h6><p>fn main() {<br>const MAX_POINTS: u32 = 100_000;<br>}<br>const 整个运行时间都存在</p><p>fn main() {<br>    let spaces = “   “;<br>    let spaces = spaces.len();<br>}</p><h3 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h3><p>interger 默认i32<br>float 默认 f64<br>char ‘’ 4字节<em>Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid char values in Rust. </em><br>string “”</p><p>tuple 元组 固定 类型可以不同<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fn <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    let tup: (i32, f64, u8) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">fn <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    let x: (i32, f64, u8) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    let five_hundred = x<span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">    let six_point_four = x<span class="number">.1</span>;</span><br><span class="line"></span><br><span class="line">    let one = x<span class="number">.2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>array 数组 类型相同 固定 存在栈中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fn <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    let a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line"><span class="keyword">let</span> months = [<span class="string">"January"</span>, <span class="string">"February"</span>, <span class="string">"March"</span>, <span class="string">"April"</span>, <span class="string">"May"</span>, <span class="string">"June"</span>, <span class="string">"July"</span>,</span><br><span class="line">              <span class="string">"August"</span>, <span class="string">"September"</span>, <span class="string">"October"</span>, <span class="string">"November"</span>, <span class="string">"December"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line"><span class="keyword">let</span> a: [i32; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">3</span>; <span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> first = a[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>rust会检查索引跃出</p><p>vector 不固定</p><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    <span class="built_in">println</span>!(<span class="string">"Hello, world!"</span>);</span><br><span class="line"></span><br><span class="line">    another_function();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn another_function() &#123;</span><br><span class="line">    <span class="built_in">println</span>!(<span class="string">"Another function."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rust<code>doesn’t care</code>where you define your functions, only that they’re defined somewhere.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    another_function(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn another_function(x: i32, y: i32) &#123;</span><br><span class="line">    <span class="built_in">println</span>!(<span class="string">"The value of x is: &#123;&#125;"</span>, x);</span><br><span class="line">    <span class="built_in">println</span>!(<span class="string">"The value of y is: &#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>必须声明参数类型</p><hr><p><code>Statements</code>are instructions that perform some action and do not return a value.<br>let y = 6; 无返回值不能赋给其他变量<br><code>Expressions</code> evaluate to a resulting value.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> y = &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println</span>!(<span class="string">"The value of y is: &#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Note the x + 1 line without a semicolon at the end, which is unlike most of the lines you’ve seen so far. <strong>Expressions do not include ending semicolons.</strong> If you add a semicolon to the end of an expression, you turn it into a statement, which will then not return a value.</p><p>返回值<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn five() -&gt; i32 &#123;</span><br><span class="line">    <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = five();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println</span>!(<span class="string">"The value of x is: &#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = plus_one(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println</span>!(<span class="string">"The value of x is: &#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn plus_one(x: i32) -&gt; i32 &#123;</span><br><span class="line">    x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h5><p>//</p><h3 id="control"><a href="#control" class="headerlink" title="control"></a>control</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>!(<span class="string">"condition was true"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>!(<span class="string">"condition was false"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Rust will <strong>not</strong> automatically try to <strong>convert non-Boolean types to a Boolean</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>!(<span class="string">"number is divisible by 4"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>!(<span class="string">"number is divisible by 3"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>!(<span class="string">"number is divisible by 2"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>!(<span class="string">"number is not divisible by 4, 3, or 2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    <span class="keyword">let</span> condition = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123; <span class="number">5</span> &#125; <span class="keyword">else</span> &#123; <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println</span>!(<span class="string">"The value of number is: &#123;&#125;"</span>, number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    loop &#123;</span><br><span class="line">        <span class="built_in">println</span>!(<span class="string">"again!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    <span class="keyword">let</span> mut counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = loop &#123;</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println</span>!(<span class="string">"The result is &#123;&#125;"</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="while"><a href="#while" class="headerlink" title="while"></a>while</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    <span class="keyword">let</span> mut number = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> number != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>!(<span class="string">"&#123;&#125;!"</span>, number);</span><br><span class="line"></span><br><span class="line">        number -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println</span>!(<span class="string">"LIFTOFF!!!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="for"><a href="#for" class="headerlink" title="for"></a>for</h6><p> use a for loop and execute some code for each item in a collection<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> a.iter() &#123;</span><br><span class="line">        <span class="built_in">println</span>!(<span class="string">"the value is: &#123;&#125;"</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>).rev() &#123;</span><br><span class="line">        <span class="built_in">println</span>!(<span class="string">"&#123;&#125;!"</span>, number);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println</span>!(<span class="string">"LIFTOFF!!!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>rev, to reverse the range</code></p><h3 id="guess-game-example"><a href="#guess-game-example" class="headerlink" title="guess game . example"></a>guess game . example</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println</span>!(<span class="string">"x = &#123;&#125; and y = &#123;&#125;"</span>, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cargo doc --open</code></p><p>The<strong> trim </strong>method on a String instance will eliminate any whitespace at the beginning and end<br>5\n 变成 5<br>The <strong>parse </strong>method on strings parses a string into some kind of number. </p><p>cargo fmt 自动调整格式<br><a href="https://github.com/rust-lang/rustfmt" target="_blank" rel="noopener">https://github.com/rust-lang/rustfmt</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;运行命令&quot;&gt;&lt;a href=&quot;#运行命令&quot; class=&quot;headerlink&quot; title=&quot;运行命令&quot;&gt;&lt;/a&gt;运行命令&lt;/h3&gt;&lt;p&gt;&lt;code&gt;cargo doc --open&lt;/code&gt;&lt;br&gt;&lt;code&gt;rustup doc&lt;/code&gt;&lt;br&gt;&lt;code&gt;cargo new --vcs=git&lt;/code&gt;&lt;br&gt;&lt;code&gt;cargo build&lt;/code&gt;&lt;br&gt;&lt;code&gt;cargo run&lt;/code&gt;&lt;br&gt;&lt;code&gt;cargo check&lt;/code&gt;更快编译，但不生成可执行文件&lt;br&gt;&lt;code&gt;cargo build --release&lt;/code&gt; 生成的执行文件运行更快&lt;br&gt;benchmark基准测试&lt;br&gt;
    
    </summary>
    
    
      <category term="RUST" scheme="http://finsenty54.github.io/tags/RUST/"/>
    
  </entry>
  
  <entry>
    <title>CTF入门 WECALL4+hackthebox-REVERSE</title>
    <link href="http://finsenty54.github.io/2020/07/11/CTF%E5%85%A5%E9%97%A8%20WECALL4+hackthebox-REVERSE/"/>
    <id>http://finsenty54.github.io/2020/07/11/CTF入门 WECALL4+hackthebox-REVERSE/</id>
    <published>2020-07-11T02:37:31.000Z</published>
    <updated>2020-07-11T02:40:05.281Z</updated>
    
    <content type="html"><![CDATA[<h4 id="wechall-register-globals"><a href="#wechall-register-globals" class="headerlink" title="wechall register_globals"></a>wechall register_globals</h4><p>register_globals 在php 5.4.0 后被移除 其会自动生成各种变量 如html请求变量<br><a href="http://1.1.1.1/report.asp?id=123&amp;kehu=222" target="_blank" rel="noopener">http://1.1.1.1/report.asp?id=123&amp;kehu=222</a><br>login[0]=admin 直接login=admin 只取第一第二个字符</p><hr><h4 id="hackthebox"><a href="#hackthebox" class="headerlink" title="hackthebox"></a>hackthebox</h4><p>invite challenge 浏览器console 下运行函数 加（）<br>curl -X POST https://…</p><a id="more"></a><hr><h4 id="hackthebox-–-Enumeration"><a href="#hackthebox-–-Enumeration" class="headerlink" title="hackthebox – Enumeration"></a>hackthebox – Enumeration</h4><p>ports=$(nmap -p- –min-rate=1000 -T4 10.10.10.27 | grep ^[0-9] | cut -d ‘/‘ -f 1 | tr ‘\n’ ‘,’ | sed s/,$//)<br>nmap -sC -sV -p$ports 10.10.10.27</p><p>command 1 | command 2 把第一个命令command 1执行的结果作为command 2的输入传给command 2<br>-T4 可以加快执行速度<br>-p- 扫描所有端口<br>-min-rate 1000 to request that Nmap send at least 1,000 packets per secondcut<br>cut Print selected parts of lines from each FILE to standard output.<br>-f 指定第一列 -d 指定列分隔符<br> tr 命令用于转换或删除文件中的字符 ‘\n’ 转换为‘，’<br>sed ‘s/regexp/replacement/flags’.<br>Its basic concept is simple: the s command attempts to match the pattern space against the supplied regular expression regexp; if the match is successful, then that portion of the pattern space which was matched is replaced with replacement.<br>regexp匹配成功后用replace替代</p><p>select IS_SRVROLEMEMBER (‘sysadmin’)</p><hr><p>remote code execution (RCE)</p><h4 id="A-reverse-shell"><a href="#A-reverse-shell" class="headerlink" title="A reverse shell"></a>A reverse shell</h4><p>is a type of shell in which the target machine communicates back to the attacking machine. The attacking machine has a listener port on which it receives the connection, which by using, code or command execution is achieved.</p><h4 id="Bind-shell"><a href="#Bind-shell" class="headerlink" title="Bind shell"></a>Bind shell</h4><p>Bind shell is a type of shell in which the target machine opens up a communication port or a listener on the victim machine and waits for an incoming connection. The attacker then connects to the victim machine’s listener which then leads to code or command execution on the server.</p><hr><p>netcat<br>nc -lvnp 443 监听模式 443 外来请求</p><hr><h4 id="ollydbg"><a href="#ollydbg" class="headerlink" title="ollydbg"></a>ollydbg</h4><p>显示当前EIP *<br>执行到光标位置 F4<br>F2 断点<br>CALL 把接下来的地址先压入栈<br>win 压入参数逆序 f(a,b) 先压b 后 a<br>test = and 不改变操作数值</p><h4 id="x64dbg"><a href="#x64dbg" class="headerlink" title="x64dbg"></a>x64dbg</h4><p>file test.py</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;wechall-register-globals&quot;&gt;&lt;a href=&quot;#wechall-register-globals&quot; class=&quot;headerlink&quot; title=&quot;wechall register_globals&quot;&gt;&lt;/a&gt;wechall register_globals&lt;/h4&gt;&lt;p&gt;register_globals 在php 5.4.0 后被移除 其会自动生成各种变量 如html请求变量&lt;br&gt;&lt;a href=&quot;http://1.1.1.1/report.asp?id=123&amp;amp;kehu=222&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://1.1.1.1/report.asp?id=123&amp;amp;kehu=222&lt;/a&gt;&lt;br&gt;login[0]=admin 直接login=admin 只取第一第二个字符&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;hackthebox&quot;&gt;&lt;a href=&quot;#hackthebox&quot; class=&quot;headerlink&quot; title=&quot;hackthebox&quot;&gt;&lt;/a&gt;hackthebox&lt;/h4&gt;&lt;p&gt;invite challenge 浏览器console 下运行函数 加（）&lt;br&gt;curl -X POST https://…&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://finsenty54.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF入门 WECALL2-正则</title>
    <link href="http://finsenty54.github.io/2020/07/06/CTF%E5%85%A5%E9%97%A8%20WECALL2/"/>
    <id>http://finsenty54.github.io/2020/07/06/CTF入门 WECALL2/</id>
    <published>2020-07-06T05:54:43.000Z</published>
    <updated>2020-07-06T06:01:18.207Z</updated>
    
    <content type="html"><![CDATA[<p>python3<br>list()   一个字符字符分</p><hr><p>child[a],child[b] = child[b],child[a]</p><h5 id="交换位置"><a href="#交换位置" class="headerlink" title="交换位置"></a>交换位置</h5><a id="more"></a><hr><p>spilt() 按空格分<br>int()</p><hr><h3 id="Training-Crypto-Substitution-I"><a href="#Training-Crypto-Substitution-I" class="headerlink" title="Training: Crypto - Substitution I"></a>Training: Crypto - Substitution I</h3><p><a href="http://practicalcryptography.com/cryptanalysis/text-characterisation/quadgrams/" target="_blank" rel="noopener">http://practicalcryptography.com/cryptanalysis/text-characterisation/quadgrams/</a></p><h3 id="Training-Crypto-Caesar-II"><a href="#Training-Crypto-Caesar-II" class="headerlink" title="Training: Crypto - Caesar II"></a>Training: Crypto - Caesar II</h3><p>import sys<br>sys.stdout = open(‘/root/Documents/CTF_WECALL/results.py’, mode = ‘w’,encoding=’utf-8’)</p><p>打印到文件中</p><p>line breaks. 换行符</p><p>vscode python 整段右移 选中tab</p><hr><h3 id="python-2-转到-3"><a href="#python-2-转到-3" class="headerlink" title="python 2 转到 3"></a>python 2 转到 3</h3><p>2to3.py</p><hr><h3 id="正则30分钟学习"><a href="#正则30分钟学习" class="headerlink" title="正则30分钟学习"></a>正则30分钟学习</h3><p><a href="https://deerchao.cn/tutorials/regex/regex.htm" target="_blank" rel="noopener">https://deerchao.cn/tutorials/regex/regex.htm</a></p><h3 id="wechall-mysql-2"><a href="#wechall-mysql-2" class="headerlink" title="wechall mysql 2"></a>wechall mysql 2</h3><p>‘ union select 1,’admin’ ,md5(‘1’)  from users where username =’admin’#</p><p><code>？？可以随便选择</code></p><h3 id="wechall-WWW-Basics"><a href="#wechall-WWW-Basics" class="headerlink" title="wechall WWW-Basics"></a>wechall WWW-Basics</h3><p>lsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000</p><p>nginx -s quit<br>ps -ax | grep nginx<br>lsof -i:80<br>ip add</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python3&lt;br&gt;list()   一个字符字符分&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;child[a],child[b] = child[b],child[a]&lt;/p&gt;
&lt;h5 id=&quot;交换位置&quot;&gt;&lt;a href=&quot;#交换位置&quot; class=&quot;headerlink&quot; title=&quot;交换位置&quot;&gt;&lt;/a&gt;交换位置&lt;/h5&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://finsenty54.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF入门 WECALL 2</title>
    <link href="http://finsenty54.github.io/2020/05/19/CTF%E5%85%A5%E9%97%A8%20WECALL1/"/>
    <id>http://finsenty54.github.io/2020/05/19/CTF入门 WECALL1/</id>
    <published>2020-05-19T12:03:39.000Z</published>
    <updated>2020-05-19T12:07:49.772Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是PHP文件？"><a href="#什么是PHP文件？" class="headerlink" title="什么是PHP文件？"></a>什么是PHP文件？</h3><p>PHP文件可以包含文本，HTML，CSS，JavaScript和PHP代码<br>PHP代码在服务器上执行，结果以纯HTML格式返回到浏览器<br>PHP文件的扩展名为“ .php”</p><a id="more"></a><h3 id="PHP可以做什么？"><a href="#PHP可以做什么？" class="headerlink" title="PHP可以做什么？"></a>PHP可以做什么？</h3><p>PHP可以生成动态页面内容<br>PHP可以在服务器上创建，打开，读取，写入，删除和关闭文件<br>PHP可以收集表单数据<br>PHP可以发送和接收Cookie<br>PHP可以添加，删除，修改数据库中的数据<br>PHP可用于控制用户访问<br>PHP可以加密数据<br>使用PHP，您不仅可以输出HTML。您可以输出图像，PDF文件甚至Flash电影。您还可以输出任何文本，例如XHTML和XML。</p><p>PHP脚本可以放在文档中的任何位置。<br>PHP脚本的开头<code>&lt;?php</code>和结尾是<code>?&gt;</code>：<br>&lt;?php<br>// PHP code goes here<br>?&gt;<br>PHP文件的默认文件扩展名是“ .php”。<br>一个PHP文件通常包含HTML标记和一些PHP脚本代码。</p><p> PHP语句以分号（<code>;</code>）结尾。</p><p>在PHP中，关键字（例如if， else，while， echo等），类，函数，和用户定义的函数<code>是不区分大小写。</code></p><p>所有<code>变量名称均区分大小写</code>！</p><p>comment<br>//<br>#<br>/<em>        </em>/</p><p>在PHP中，变量以$符号开头，后跟变量名称</p><p>与其他编程语言不同，PHP没有用于声明变量的命令。它是在您首次为其分配值时创建的。</p><p>&lt;?php<br>$txt = “W3Schools.com”;<br>echo “I love $txt!”;<br>?&gt;</p><p>&lt;?php<br>$txt = “W3Schools.com”;<br>echo “I love “ . $txt . “!”;<br>?&gt;</p><p>&lt;?php<br>$x = 5;<br>$y = 4;<br>echo $x + $y;<br>?&gt;</p><h5 id="在函数外部声明的变量具有全局范围，并且只能在函数外部访问"><a href="#在函数外部声明的变量具有全局范围，并且只能在函数外部访问" class="headerlink" title="在函数外部声明的变量具有全局范围，并且只能在函数外部访问"></a>在函数外部声明的变量具有全局范围，并且只能在函数外部访问</h5><h5 id="在函数内声明的变量具有局部范围，只能在该函数内访问"><a href="#在函数内声明的变量具有局部范围，只能在该函数内访问" class="headerlink" title="在函数内声明的变量具有局部范围，只能在该函数内访问"></a>在函数内声明的变量具有局部范围，只能在该函数内访问</h5><h5 id="global关键字用于在函数内部访问一个全局变量。"><a href="#global关键字用于在函数内部访问一个全局变量。" class="headerlink" title="global关键字用于在函数内部访问一个全局变量。"></a>global关键字用于在函数内部访问一个全局变量。</h5><p>为此，请global在变量之前（在函数内部）使用关键字<br>&lt;?php<br>$x = 5;<br>$y = 10;<br>function myTest() {<br>  global $x, $y;<br>  $y = $x + $y;<br>}<br>myTest();<br>echo $y; // outputs 15<br>?&gt;</p><p>PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly.</p><p>&lt;?php<br>$x = 5;<br>$y = 10;<br>function myTest() {<br>  $GLOBALS[‘y’] = $GLOBALS[‘x’] + $GLOBALS[‘y’];<br>}<br>myTest();<br>echo $y; // outputs 15<br>?&gt;</p><p>通常，当一个函数完成/执行时，它的所有变量都会被删除。但是，有时我们希望不删除局部变量。我们需要它来做进一步的工作。<br>为此，请static在首次声明变量时使用关键字<br>然后，每次调用该函数时，该变量仍将具有自上次调用该函数以来所包含的信息。<br>注意：该变量仍然是函数的局部变量。</p><p>差异很小：echo没有返回值，而print返回值为1，因此可以在表达式中使用。echo可以采用多个参数（尽管这种用法很少见），而print可以采用一个参数。echo比快一点print。</p><p>&lt;?php<br>echo “</p><h2>PHP is Fun!</h2>“;<br>echo “Hello world!<br>“;<br>echo “I’m about to learn PHP!<br>“;<br>echo “This “, “string “, “was “, “made “, “with multiple parameters.”;<br>?&gt;<p></p><h5 id="字符串可以是引号内的任何文本。可以使用单引号或双引号"><a href="#字符串可以是引号内的任何文本。可以使用单引号或双引号" class="headerlink" title="字符串可以是引号内的任何文本。可以使用单引号或双引号"></a>字符串可以是引号内的任何文本。可以使用单引号或双引号</h5><p>整数数据类型是-2,147,483,648和2,147,483,647之间的非十进制数。<br>PHP var_dump（）函数返回数据类型和值</p><p>&lt;?php<br>$cars = array(“Volvo”,”BMW”,”Toyota”);<br>var_dump($cars);<br>?&gt;</p><p>首先，我们必须声明一个对象类。为此，我们使用class关键字。类是可以包含属性和方法的结构：<br>&lt;?php<br>class Car {<br>  function Car() {<br>    $this-&gt;model = “VW”;<br>  }<br>}<br>// create an object<br>$herbie = new Car();<br>// show object properties<br>echo $herbie-&gt;model;<br>?&gt;</p><p>如果创建的变量没有值，则会自动为其分配值NULL。<br>也可以通过将值设置为NULL来清空变量：</p><p>关于PHP的注意事项之一是它提供了自动数据类型转换。<br>因此，如果将整数值分配给变量，则该变量的类型将自动为整数。然后，如果将字符串分配给相同的变量，则类型将更改为字符串。</p><p>整数可以以三种格式指定：十进制（基于10的），十六进制（基于16的-带有0x前缀）或八进制（基于8的-带有0前缀）</p><p>（int），（integer）或intval（）函数通常用于将值转换为整数。</p><p>有效的常量名称以字母或下划线开头（常量名称前没有$符号）。</p><p>注意：与变量不同，常量在整个脚本中自动为全局变量。<br>define(name, value, case-insensitive)<br>在PHP7中，您可以使用define()函数创建一个Array常量。</p><p>.    Concatenation    $txt1 . $txt2    Concatenation of $txt1 and $txt2<br>.=    Concatenation assignment    $txt1 .= $txt2    Appends $txt2 to $txt1</p><p>&lt;?php<br>$t = date(“H”);</p><p>if ($t &lt; “20”) {<br>  echo “Have a good day!”;<br>}<br>?&gt;</p><h4 id="该foreach循环仅适用于数组，用于循环遍历数组中的每个键-值对。"><a href="#该foreach循环仅适用于数组，用于循环遍历数组中的每个键-值对。" class="headerlink" title="该foreach循环仅适用于数组，用于循环遍历数组中的每个键/值对。"></a>该foreach循环仅适用于数组，用于循环遍历数组中的每个键/值对。</h4><p>句法<br>foreach ($array as $value) {<br>  code to be executed;<br>}<br>对于每次循环迭代，当前数组元素的值都分配给$ value，并且数组指针移动一个，直到到达最后一个数组元素。</p><p>要指定，strict我们需要设置declare(strict_types=1);。这必须在PHP文件的第一行。<br>这为我们提供了一个在声明函数时指定所需数据类型的选项，并且通过添加strict 声明，如果数据类型不匹配，它将抛出“致命错误”。</p><p>&lt;?php declare(strict_types=1); // strict requirement<br>function addNumbers(float $a, float $b) : float {<br>  return $a + $b;<br>}<br>echo addNumbers(1.2, 5.2);<br>?&gt;</p><p>&lt;?php declare(strict_types=1); // strict requirement<br>function addNumbers(float $a, float $b) : int {<br>  return (int)($a + $b);<br>}<br>echo addNumbers(1.2, 5.2);<br>?&gt;</p><p>&lt;?php<br>$cars = array(“Volvo”, “BMW”, “Toyota”);<br>echo “I like “ . $cars[0] . “, “ . $cars[1] . “ and “ . $cars[2] . “.”;<br>?&gt;</p><p>关联数组是使用分配给它们的命名键的数组。<br>有两种创建关联数组的方法：<br>$age = array(“Peter”=&gt;”35”, “Ben”=&gt;”37”, “Joe”=&gt;”43”);<br>要么：<br>$age[‘Peter’] = “35”;<br>$age[‘Ben’] = “37”;<br>$age[‘Joe’] = “43”;<br>然后可以在脚本中使用命名的键：</p><p>$cars = array (<br>  array(“Volvo”,22,18),<br>  array(“BMW”,15,13),<br>  array(“Saab”,5,2),<br>  array(“Land Rover”,17,15)<br>);<br>&lt;?php<br>echo $cars[0][0].”: In stock: “.$cars[0][1].”, sold: “.$cars[0][2].”.<br>“;<br>echo $cars[1][0].”: In stock: “.$cars[1][1].”, sold: “.$cars[1][2].”.<br>“;<br>echo $cars[2][0].”: In stock: “.$cars[2][1].”, sold: “.$cars[2][2].”.<br>“;<br>echo $cars[3][0].”: In stock: “.$cars[3][1].”, sold: “.$cars[3][2].”.<br>“;<br>?&gt;</p><p>sort() -以升序排列数组<br>rsort() -以降序排列数组<br>asort() -根据值以升序对关联数组进行排序<br>ksort() -根据键以升序对关联数组进行排序<br>arsort() -根据值以降序对关联数组进行排序<br>krsort() -根据键以降序对关联数组进行排序</p><h4 id="用于在使用method-“-post”提交HTML表单后收集表单数据。-POST也广泛用于传递变量。"><a href="#用于在使用method-“-post”提交HTML表单后收集表单数据。-POST也广泛用于传递变量。" class="headerlink" title="用于在使用method =“ post”提交HTML表单后收集表单数据。$ _POST也广泛用于传递变量。"></a>用于在使用method =“ post”提交HTML表单后收集表单数据。$ _POST也广泛用于传递变量。</h4><h5 id="SERVER-‘PHP-SELF’-Returns-the-filename-of-the-currently-executing-script"><a href="#SERVER-‘PHP-SELF’-Returns-the-filename-of-the-currently-executing-script" class="headerlink" title="$_SERVER[‘PHP_SELF’]    Returns the filename of the currently executing script"></a>$_SERVER[‘PHP_SELF’]    Returns the filename of the currently executing script</h5><h5 id="SERVER-‘REQUEST-METHOD’-Returns-the-request-method-used-to-access-the-page-such-as-POST"><a href="#SERVER-‘REQUEST-METHOD’-Returns-the-request-method-used-to-access-the-page-such-as-POST" class="headerlink" title="$_SERVER[‘REQUEST_METHOD’]    Returns the request method used to access the page (such as POST)"></a>$_SERVER[‘REQUEST_METHOD’]    Returns the request method used to access the page (such as POST)</h5><h4 id="PHP-GET是一个PHP超级全局变量，用于在使用method-“-get”提交HTML表单后收集表单数据。"><a href="#PHP-GET是一个PHP超级全局变量，用于在使用method-“-get”提交HTML表单后收集表单数据。" class="headerlink" title="PHP $ _GET是一个PHP超级全局变量，用于在使用method =“ get”提交HTML表单后收集表单数据。"></a>PHP $ _GET是一个PHP超级全局变量，用于在使用method =“ get”提交HTML表单后收集表单数据。</h4><h5 id="GET还可以收集在URL中发送的数据。"><a href="#GET还可以收集在URL中发送的数据。" class="headerlink" title="$ _GET还可以收集在URL中发送的数据。"></a>$ _GET还可以收集在URL中发送的数据。</h5><h4 id="使用GET方法从表单发送的信息对所有人都是可见的（所有变量名和值都显示在URL中）。GET对发送的信息量也有限制。限制约为2000个字符。但是，由于变量显示在URL中，因此可以为页面添加书签。在某些情况下这可能很有用。"><a href="#使用GET方法从表单发送的信息对所有人都是可见的（所有变量名和值都显示在URL中）。GET对发送的信息量也有限制。限制约为2000个字符。但是，由于变量显示在URL中，因此可以为页面添加书签。在某些情况下这可能很有用。" class="headerlink" title="使用GET方法从表单发送的信息对所有人都是可见的（所有变量名和值都显示在URL中）。GET对发送的信息量也有限制。限制约为2000个字符。但是，由于变量显示在URL中，因此可以为页面添加书签。在某些情况下这可能很有用。"></a>使用GET方法从表单发送的信息对所有人都是可见的（所有变量名和值都显示在URL中）。GET对发送的信息量也有限制。限制约为2000个字符。但是，由于变量显示在URL中，因此可以为页面添加书签。在某些情况下这可能很有用。</h4><p>GET可以用于发送非敏感数据。<br>注意：绝对不要将GET用于发送密码或其他敏感信息！</p><h5 id="使用POST方法从表单发送的信息对于其他人是不可见的-（所有名称-值都嵌入在HTTP请求的正文中），并且对要发送的信息量没有限制。"><a href="#使用POST方法从表单发送的信息对于其他人是不可见的-（所有名称-值都嵌入在HTTP请求的正文中），并且对要发送的信息量没有限制。" class="headerlink" title="使用POST方法从表单发送的信息对于其他人是不可见的 （所有名称/值都嵌入在HTTP请求的正文中），并且对要发送的信息量没有限制。"></a>使用POST方法从表单发送的信息对于其他人是不可见的 （所有名称/值都嵌入在HTTP请求的正文中），并且对要发送的信息量没有限制。</h5><p>此外，POST支持高级功能，例如在将文件上传到服务器时支持多部分二进制输入。<br>但是，由于变量未显示在URL中，因此无法为页面添加书签。</p><h5 id="SERVER-“-PHP-SELF”-将提交的表单数据发送到页面本身，而不是跳转到另一个页面。这样，用户将在与表单相同的页面上收到错误消息。"><a href="#SERVER-“-PHP-SELF”-将提交的表单数据发送到页面本身，而不是跳转到另一个页面。这样，用户将在与表单相同的页面上收到错误消息。" class="headerlink" title="$ _ SERVER [“ PHP_SELF”]将提交的表单数据发送到页面本身，而不是跳转到另一个页面。这样，用户将在与表单相同的页面上收到错误消息。"></a>$ _ SERVER [“ PHP_SELF”]将提交的表单数据发送到页面本身，而不是跳转到另一个页面。这样，用户将在与表单相同的页面上收到错误消息。</h5><p>htmlspecialchars（）函数将特殊字符转换为HTML实体。这意味着它将用＆lt;替换&lt;和&gt;之类的HTML字符。和＆gt;。这样可以防止攻击者通过以表格形式注入HTML或Javascript代码（跨站点脚本攻击）来利用代码。</p><h5 id="从用户输入数据中删除不必要的字符（多余的空格，制表符，换行符）（使用PHP-trim（）函数）"><a href="#从用户输入数据中删除不必要的字符（多余的空格，制表符，换行符）（使用PHP-trim（）函数）" class="headerlink" title="从用户输入数据中删除不必要的字符（多余的空格，制表符，换行符）（使用PHP trim（）函数）"></a>从用户输入数据中删除不必要的字符（多余的空格，制表符，换行符）（使用PHP trim（）函数）</h5><h5 id="从用户输入数据中删除反斜杠（-）（使用PHP-stripslashes（）函数）"><a href="#从用户输入数据中删除反斜杠（-）（使用PHP-stripslashes（）函数）" class="headerlink" title="从用户输入数据中删除反斜杠（\）（使用PHP stripslashes（）函数）"></a>从用户输入数据中删除反斜杠（\）（使用PHP stripslashes（）函数）</h5><p>使用PHP empty() 函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"&lt;?php echo htmlspecialchars($_SERVER["</span>PHP_SELF<span class="string">"]);?&gt;"</span>&gt;</span><br><span class="line">Name: &lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;</span><br><span class="line">&lt;span class="error"&gt;* &lt;?php echo $nameErr;?&gt;&lt;/span&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">E-mail:</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"email"</span>&gt;</span><br><span class="line">&lt;span class="error"&gt;* &lt;?php echo $emailErr;?&gt;&lt;/span&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">Website:</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"website"</span>&gt;</span><br><span class="line">&lt;span class="error"&gt;&lt;?php echo $websiteErr;?&gt;&lt;/span&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">Comment: &lt;textarea name=<span class="string">"comment"</span> rows=<span class="string">"5"</span> cols=<span class="string">"40"</span>&gt;</span><br></pre></td></tr></table></figure><p>preg_match（）函数在字符串中搜索模式，如果存在模式，则返回true，否则返回false。<br>正则表达式</p><p>include和require语句相同，但失败时除外：<br>require 将产生致命错误（E_COMPILE_ERROR）并停止脚本</p><h5 id="include-只会产生警告（E-WARNING）并且脚本将继续"><a href="#include-只会产生警告（E-WARNING）并且脚本将继续" class="headerlink" title="include 只会产生警告（E_WARNING）并且脚本将继续"></a>include 只会产生警告（E_WARNING）并且脚本将继续</h5><p>该readfile()函数读取文件并将其写入输出缓冲区。</p><p>&lt;?php<br>$myfile = fopen(“webdictionary.txt”, “r”) or die(“Unable to open file!”);<br>echo fread($myfile,filesize(“webdictionary.txt”));<br>fclose($myfile);<br>?&gt;</p><p>该fclose()功能用于关闭打开的文件。<br>结束所有文件后，关闭所有文件是一种良好的编程习惯。您不希望在服务器上到处运行打开的文件占用资源！</p><p>该feof()功能检查是否已达到“文件结尾”（EOF）。</p><p>该fopen()函数还用于创建文件。可能有些混乱，但是在PHP中，使用与打开文件相同的功能创建文件。</p><p>$filename = ‘pages/‘.(isset($_GET[“file”])$_GET[“file”]:”welcome”).’.html’;</p><p>？ ：</p><h5 id="isset（）函数检查是否设置了变量，这意味着必须声明该变量并且该变量不能为NULL。"><a href="#isset（）函数检查是否设置了变量，这意味着必须声明该变量并且该变量不能为NULL。" class="headerlink" title="isset（）函数检查是否设置了变量，这意味着必须声明该变量并且该变量不能为NULL。"></a>isset（）函数检查是否设置了变量，这意味着必须声明该变量并且该变量不能为NULL。</h5><p>die（）函数是exit（）函数的别名。</p><h5 id="eval（）函数将字符串评估为PHP代码。"><a href="#eval（）函数将字符串评估为PHP代码。" class="headerlink" title="eval（）函数将字符串评估为PHP代码。"></a>eval（）函数将字符串评估为PHP代码。</h5><h5 id="dirname（）函数返回父目录的路径。"><a href="#dirname（）函数返回父目录的路径。" class="headerlink" title="dirname（）函数返回父目录的路径。"></a>dirname（）函数返回父目录的路径。</h5><h5 id="in-array（）函数在数组中搜索特定值。"><a href="#in-array（）函数在数组中搜索特定值。" class="headerlink" title="in_array（）函数在数组中搜索特定值。"></a>in_array（）函数在数组中搜索特定值。</h5><p>注意：如果搜索参数是字符串，并且类型参数设置为TRUE，则搜索区分大小写。</p><h3 id="WECHALL-LFI"><a href="#WECHALL-LFI" class="headerlink" title="WECHALL LFI"></a>WECHALL LFI</h3><p>?file=page/jhkd.html<br>?file=../../solution.php%00<br>%00 后的字符不算，已经更改<br>../ 遍历目录</p><p>switch ($which)<br>        {<br>        case 0:<br>        case 1:<br>        case 2:<br>                require_once $which.’.php’;<br>                break;<br>        default:<br>                echo GWF_HTML::error(‘PHP-0817’, ‘Hacker NoNoNo!’, false);<br>                break;<br>        }<br>which=0,1,2 都执行require_once</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是PHP文件？&quot;&gt;&lt;a href=&quot;#什么是PHP文件？&quot; class=&quot;headerlink&quot; title=&quot;什么是PHP文件？&quot;&gt;&lt;/a&gt;什么是PHP文件？&lt;/h3&gt;&lt;p&gt;PHP文件可以包含文本，HTML，CSS，JavaScript和PHP代码&lt;br&gt;PHP代码在服务器上执行，结果以纯HTML格式返回到浏览器&lt;br&gt;PHP文件的扩展名为“ .php”&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://finsenty54.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF入门 WECALL</title>
    <link href="http://finsenty54.github.io/2020/05/15/CTF%E5%85%A5%E9%97%A8%20WECALL/"/>
    <id>http://finsenty54.github.io/2020/05/15/CTF入门 WECALL/</id>
    <published>2020-05-15T11:24:57.000Z</published>
    <updated>2020-05-15T11:26:23.799Z</updated>
    
    <content type="html"><![CDATA[<p>初学CTF 入门太难</p><h2 id="wecall-challenges-解决方法"><a href="#wecall-challenges-解决方法" class="headerlink" title="wecall challenges 解决方法"></a>wecall challenges 解决方法</h2><h4 id="training-steganoI"><a href="#training-steganoI" class="headerlink" title="training steganoI"></a>training steganoI</h4><p>$cat  xxx.bmp<br><a href="https://www.tecmint.com/13-basic-cat-command-examples-in-linux/" target="_blank" rel="noopener">https://www.tecmint.com/13-basic-cat-command-examples-in-linux/</a></p><h4 id="Crypto-Caesar-I"><a href="#Crypto-Caesar-I" class="headerlink" title="Crypto - Caesar I"></a>Crypto - Caesar I</h4><p>python函数 list() ord() chr()</p><a id="more"></a><h4 id="WWW-Robots"><a href="#WWW-Robots" class="headerlink" title="WWW-Robots"></a>WWW-Robots</h4><p>robots.txt<br>The robots.txt file is used by web crawlers to check if they are allowed to crawl and index your website or only parts of it.<br>Sometimes these files reveal the directory structure instead protecting the content from being crawled.</p><h4 id="URL-ENCODE"><a href="#URL-ENCODE" class="headerlink" title="URL ENCODE"></a>URL ENCODE</h4><p>URL encoding replaces unsafe ASCII characters with a “%” followed by two hexadecimal digits. 十六进制<br>URLs cannot contain spaces. URL encoding normally replaces a space with a plus (+) sign or with %20.<br>URLs can only be sent over the Internet using the ASCII character-set.</p><h4 id="python-3-7"><a href="#python-3-7" class="headerlink" title="python 3.7"></a>python 3.7</h4><p>from urllib.parse import unquote<br>tar -xf 解压缩 ？自动识别<br>java -jar </p><h4 id="Training-Programming-1"><a href="#Training-Programming-1" class="headerlink" title="Training: Programming 1"></a>Training: Programming 1</h4><p>urllib.request</p><p>urlopen返回的是二进制数据，decode(‘utf-8’)解码</p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p><a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F</a></p><p>‘weshall’</p><p>wechall4?.(jpg|gif|tiff|bmp|png)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初学CTF 入门太难&lt;/p&gt;
&lt;h2 id=&quot;wecall-challenges-解决方法&quot;&gt;&lt;a href=&quot;#wecall-challenges-解决方法&quot; class=&quot;headerlink&quot; title=&quot;wecall challenges 解决方法&quot;&gt;&lt;/a&gt;wecall challenges 解决方法&lt;/h2&gt;&lt;h4 id=&quot;training-steganoI&quot;&gt;&lt;a href=&quot;#training-steganoI&quot; class=&quot;headerlink&quot; title=&quot;training steganoI&quot;&gt;&lt;/a&gt;training steganoI&lt;/h4&gt;&lt;p&gt;$cat  xxx.bmp&lt;br&gt;&lt;a href=&quot;https://www.tecmint.com/13-basic-cat-command-examples-in-linux/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.tecmint.com/13-basic-cat-command-examples-in-linux/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Crypto-Caesar-I&quot;&gt;&lt;a href=&quot;#Crypto-Caesar-I&quot; class=&quot;headerlink&quot; title=&quot;Crypto - Caesar I&quot;&gt;&lt;/a&gt;Crypto - Caesar I&lt;/h4&gt;&lt;p&gt;python函数 list() ord() chr()&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://finsenty54.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>SVM学习笔记2</title>
    <link href="http://finsenty54.github.io/2020/04/01/SVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <id>http://finsenty54.github.io/2020/04/01/SVM学习笔记2/</id>
    <published>2020-04-01T12:17:15.000Z</published>
    <updated>2020-04-01T12:18:45.372Z</updated>
    
    <content type="html"><![CDATA[<p>凸二次规划 ==  开口向下</p><hr><p>分类靠支撑向量计算  其 a~=0</p><a id="more"></a><hr><p>hard-margin</p><p>soft-margin 容忍一些误差<br>每个容忍值和希望最小</p><hr><p>KKT帮助确定a ， L函数系数 拉格朗日</p><hr><p>K-fold 数据分成k份进行train test<br>获取最佳参数</p><p>调用crossval就是要找到参数C(惩罚系数)和sigma，使误分率mcr最小</p><hr><p>one vs one<br>多类判定投票</p><p>one vs all<br>有符号距离取最大</p><hr><p>才发现 matlab %%<br>%%<br>运行节</p><hr><p>代码<br>参考 <a href="http://www.matlabsky.com/thread-11026-1-1.html" target="_blank" rel="noopener">http://www.matlabsky.com/thread-11026-1-1.html</a></p><p><code>fitcsvm()</code><br>使用<code>&#39;OptimizeHyperparameters&#39;</code>- 要优化的参数 和<br><code>&#39;HyperparameterOptimizationOptions&#39;</code> - 优化的选项<br><code>来找到最佳sigma 和 C 罚因子</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;凸二次规划 ==  开口向下&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;分类靠支撑向量计算  其 a~=0&lt;/p&gt;
    
    </summary>
    
    
      <category term="SVM" scheme="http://finsenty54.github.io/tags/SVM/"/>
    
  </entry>
  
  <entry>
    <title>SVM学习笔记1</title>
    <link href="http://finsenty54.github.io/2020/03/31/SVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://finsenty54.github.io/2020/03/31/SVM学习笔记1/</id>
    <published>2020-03-31T09:06:21.000Z</published>
    <updated>2020-03-31T11:35:13.640Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://m.youtube.com/watch?v=Hu71tIm1iX0&amp;list=PLt0SBi1p7xrRKE2us8doqryRou6eDYEOy&amp;index=9&amp;t=0s" target="_blank" rel="noopener">https://m.youtube.com/watch?v=Hu71tIm1iX0&amp;list=PLt0SBi1p7xrRKE2us8doqryRou6eDYEOy&amp;index=9&amp;t=0s</a><br>参考视频课程</p><p>mvnrnd（）产生特定均值和协方差的矩阵</p><hr><a id="more"></a><p>kenel 矩阵要有限正半定，kenel函数：R^d-&gt;R<br><a href="https://imgchr.com/i/GQilQJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/31/GQilQJ.th.png" alt="GQilQJ.th.png"></a></p><hr><p>常见kenel 可以自己构造<br><a href="https://imgchr.com/i/GQF9Tx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/31/GQF9Tx.th.png" alt="GQF9Tx.th.png"></a></p><hr><p>REPRODUCING KENEL MAP<br>由kenel 推出 feature mapping 以及其逆<br><img src="https://s1.ax1x.com/2020/03/31/GQdhI1.png" alt="GQdhI1.png"></p><hr><p>Principal Component Analysis 主成分分析<br>KPCA</p><hr><p>Linear Discriminant Analysis 線性區別分析<br>投影坐标：内积*v<br>廣義區別分析(Generalized Discriminant Analysis)。</p><p><img src="https://s1.ax1x.com/2020/03/31/GQUvmd.png" alt="GQUvmd.png"></p><hr><p>KKT svm证明中会用到<br><img src="https://s1.ax1x.com/2020/03/31/GQdzJP.png" alt="GQdzJP.png"></p><p><img src="https://s1.ax1x.com/2020/03/31/GQwZiq.png" alt="GQwZiq.png"></p><hr><p>其他</p><p><a href="https://ww2.mathworks.cn/help/matlab/data-type-conversion.html" target="_blank" rel="noopener">https://ww2.mathworks.cn/help/matlab/data-type-conversion.html</a><br>matlab 数据类型转换</p><pre><code>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Ap0huJwyT7g&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://m.youtube.com/watch?v=Hu71tIm1iX0&amp;amp;list=PLt0SBi1p7xrRKE2us8doqryRou6eDYEOy&amp;amp;index=9&amp;amp;t=0s&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://m.youtube.com/watch?v=Hu71tIm1iX0&amp;amp;list=PLt0SBi1p7xrRKE2us8doqryRou6eDYEOy&amp;amp;index=9&amp;amp;t=0s&lt;/a&gt;&lt;br&gt;参考视频课程&lt;/p&gt;
&lt;p&gt;mvnrnd（）产生特定均值和协方差的矩阵&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="SVM" scheme="http://finsenty54.github.io/tags/SVM/"/>
    
  </entry>
  
  <entry>
    <title>essay1</title>
    <link href="http://finsenty54.github.io/2020/02/19/essay1/"/>
    <id>http://finsenty54.github.io/2020/02/19/essay1/</id>
    <published>2020-02-19T05:42:06.000Z</published>
    <updated>2020-02-19T05:42:58.270Z</updated>
    
    <content type="html"><![CDATA[<p>matlab可以</p><p>psnr()  RGB图像直接来<br><img src="https://s2.ax1x.com/2020/02/19/3EM7nK.png" alt="3EM7nK.png"><br><img src="https://s2.ax1x.com/2020/02/19/3EMLAe.png" alt="3EMLAe.png"></p><p>Normalized  Cross  Correlation<br>normxcorr2 matlab计算方法不同<br><img src="https://s2.ax1x.com/2020/02/19/3EMXhd.png" alt="3EMXhd.png"><br>The  value  is  generally 0–1. However, ideally it should be 1 but the value 0.7 is acceptable.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;matlab可以&lt;/p&gt;
&lt;p&gt;psnr()  RGB图像直接来&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/19/3EM7nK.png&quot; alt=&quot;3EM7nK.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.c
      
    
    </summary>
    
    
      <category term="matlab" scheme="http://finsenty54.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab_haar3</title>
    <link href="http://finsenty54.github.io/2020/02/18/matlab_haar3/"/>
    <id>http://finsenty54.github.io/2020/02/18/matlab_haar3/</id>
    <published>2020-02-18T06:39:08.000Z</published>
    <updated>2020-02-18T06:39:50.920Z</updated>
    
    <content type="html"><![CDATA[<p>RGB  三个二维数组分别表示R,G,B<br>即，如果imshow的参数类型为double ，那么参数的取值范围只有在[0 1]才会正常显示。当值大于1时，都显示白色。这与matlab的传统是一致的， 对于灰度图像，uint8表示范围是[0 255] ,double表示范围是[0 1]<br><a id="more"></a><br>isequal()</p><p>塞尔达荒野之息Onedrive</p><pre><code>https://imhuanggh-my.sharepoint.com/:f:/g/personal/bin_imhuanggh_onmicrosoft_com/EhOlmQivpRBLh3BLkqxyDLYBW0JDW1V7i8lixd1T1Df-4g</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RGB  三个二维数组分别表示R,G,B&lt;br&gt;即，如果imshow的参数类型为double ，那么参数的取值范围只有在[0 1]才会正常显示。当值大于1时，都显示白色。这与matlab的传统是一致的， 对于灰度图像，uint8表示范围是[0 255] ,double表示范围是[0 1]&lt;br&gt;
    
    </summary>
    
    
      <category term="matlab" scheme="http://finsenty54.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab_haar2</title>
    <link href="http://finsenty54.github.io/2020/02/12/matlab_haar2/"/>
    <id>http://finsenty54.github.io/2020/02/12/matlab_haar2/</id>
    <published>2020-02-12T06:09:07.000Z</published>
    <updated>2020-02-12T06:09:39.007Z</updated>
    
    <content type="html"><![CDATA[<p><code>imbinarize</code><br>Binarize 2-D grayscale image or 3-D volume by thresholding</p><hr><a id="more"></a><p>64:1<br>ans =<br>  空的 1×0 double 行向量<br><del>我人傻了</del><br><code>注意文件所在文件夹</code><br><del>这两个问题弄了我一下午</del></p><hr><p>图形的函数 fliplr 可以从左往右地翻转矩阵</p><hr><p>我觉得我懂炒股了<br><a href="http://player.bilibili.com/player.html?aid=68967083&amp;cid=119544791&amp;page=1" target="_blank" rel="noopener">https://player.bilibili.com/player.html?aid=68967083&amp;cid=119544791&amp;page=1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;imbinarize&lt;/code&gt;&lt;br&gt;Binarize 2-D grayscale image or 3-D volume by thresholding&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="matlab" scheme="http://finsenty54.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab_haar1</title>
    <link href="http://finsenty54.github.io/2020/02/11/matlab_haar1/"/>
    <id>http://finsenty54.github.io/2020/02/11/matlab_haar1/</id>
    <published>2020-02-11T05:53:24.000Z</published>
    <updated>2020-02-11T05:54:14.257Z</updated>
    
    <content type="html"><![CDATA[<pre><code>waveletfamilies(&apos;a&apos;)waveletfamilies(&apos;f&apos;)waveinfo(&apos;db&apos;)</code></pre><p> use wfilters, wavefun, and wpfun to obtain the filters, wavelet, or wavelet packets </p><a id="more"></a><hr><p>linspace<br><code>Generate linearly spaced vectorcollapse all in page</code><br>Syntax<br>y = linspace(x1,x2)<br>y = linspace(x1,x2,n)</p><hr><p>小波的含义，即为时间上衰减快，和傅里叶的正弦波相比要短。<br>在频率域上，通过拉伸或压缩小波的长度，来改变小波的长短和频率，实现不同频率下的小波系数。<br>小波中，一般用尺度scale来衡量小波的频率f，两者之间的转换关系为：<br>scale∗f=Fs∗wcfscale <em> f=Fs </em> wcf<br>scale∗f=Fs∗wcf<br>公式中，Fs代表信号的采样频率，wcf为小波的中心频率（wave central freq），在matlab里可以用 centfrq(wavename) 来查询。<br> 噪点 高频信号</p><hr><p>imagesc<br>Display image with scaled colors</p><hr><p>尺度函数又称为小波父函数<br>phi 希腊文</p><hr><p><code>haart2（x，level)</code><br>If level is greater than 1, then h, v, and d are cell arrays. If level is equal to 1, then h, v, and d are matrices.<br>2-D Haar wavelet transform</p><hr><p><code>ihaart2</code><br>Inverse 2-D Haar wavelet transform</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;waveletfamilies(&amp;apos;a&amp;apos;)
waveletfamilies(&amp;apos;f&amp;apos;)
waveinfo(&amp;apos;db&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; use wfilters, wavefun, and wpfun to obtain the filters, wavelet, or wavelet packets &lt;/p&gt;
    
    </summary>
    
    
      <category term="matlab" scheme="http://finsenty54.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab图像示例笔记3</title>
    <link href="http://finsenty54.github.io/2020/02/10/matlab%E5%9B%BE%E5%83%8F%E7%A4%BA%E4%BE%8B%E7%AC%94%E8%AE%B03/"/>
    <id>http://finsenty54.github.io/2020/02/10/matlab图像示例笔记3/</id>
    <published>2020-02-10T06:47:00.000Z</published>
    <updated>2020-02-10T06:56:40.270Z</updated>
    
    <content type="html"><![CDATA[<p><code>mat2gray</code> 将dicom变为grey<br><code>im2uint8</code></p><hr><a id="more"></a><p> The image on the right has higher contrast, <code>with intensity values that fill the entire intensity range [0, 255].</code></p><hr><p><del>如果指定空矩阵 ([])，则 imshow 使用 [min(I(:)) max(I(:))]。换言之，使用 I 中的最小值作为黑色，使用最大值作为白色。</del></p><hr><p>imadjust<br>You must specify the intensities as values between 0 and 1 regardless of the class of I. If I is uint8, the values you supply are multiplied by 255 to determine the actual values to use; if I is uint16, the values are multiplied by 65535. </p><hr><p>figure<code>,</code>imshow(pout_histeq)<code>;</code><br>title(‘Histeq’);</p><hr><p>ROI<br>Create a Binary Mask<br>You can use the createMask function of the imroi base class to create a binary mask for any type of ROI object — impoint, imline, imrect, imellipse, impoly, or imfreehand. </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;mat2gray&lt;/code&gt; 将dicom变为grey&lt;br&gt;&lt;code&gt;im2uint8&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="matlab" scheme="http://finsenty54.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab图像示例笔记2</title>
    <link href="http://finsenty54.github.io/2020/02/07/matlab%E5%9B%BE%E5%83%8F%E7%A4%BA%E4%BE%8B%E7%AC%94%E8%AE%B02/"/>
    <id>http://finsenty54.github.io/2020/02/07/matlab图像示例笔记2/</id>
    <published>2020-02-07T08:23:56.000Z</published>
    <updated>2020-02-10T06:56:33.170Z</updated>
    
    <content type="html"><![CDATA[<h4 id="dicom-（a-image-type-using-in-medical"><a href="#dicom-（a-image-type-using-in-medical" class="headerlink" title="dicom （a image type using in medical)"></a>dicom （a image type using in medical)</h4><p>To read <code>metadata</code>from a DICOM file, use the <code>dicominfo function</code></p><hr><p>To read<code>image data</code>from a DICOM file, use the <code>dicomread function.</code></p><a id="more"></a><hr><p>If you just want to view the <code>metadata in a DICOM file</code>, for debugging purposes, you can use the<code>dicomdisp function.</code></p><hr><p>use one of the toolbox image display functions <code>imshow or imtool.</code></p><hr><p>the image data in this DICOM file is signed <code>16-bit data</code>, you must use the autoscaling syntax with either display function to make the image viewable.<br><code>imshow(I,&#39;DisplayRange&#39;,[])</code></p><hr><p>use the <code>dicomanon function</code>. Remove Confidential Information</p><hr><p>To write image data or metadata to a file in DICOM format, use the <code>dicomwrite function</code>.</p><hr><h4 id="Create-New-DICOM-Series"><a href="#Create-New-DICOM-Series" class="headerlink" title="Create New DICOM Series"></a>Create New DICOM Series</h4><pre><code>info.SeriesInstanceUID</code></pre><p>Generate a new DICOM unique identifier (UID) using the <code>dicomuid function.</code></p><pre><code>uid = dicomuidinfo.SeriesInstanceUID = uid;dicomwrite(Imodified,&apos;ankle_newseries.dcm&apos;,info);</code></pre><hr><p>The example finds the maximum and minimum values of all pixels in the image. The pixels that form the white <code>text characters</code>are<code>set to the maximum pixel value</code>. </p><hr><p>MATLAB command prompt: Enter dicomBrowser.</p><hr><p><a href="https://ww2.mathworks.cn/help/releases/R2018a/images/image-type-conversions.html" title="Image Type Conversion" target="_blank" rel="noopener">Image Type Conversion</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;dicom-（a-image-type-using-in-medical&quot;&gt;&lt;a href=&quot;#dicom-（a-image-type-using-in-medical&quot; class=&quot;headerlink&quot; title=&quot;dicom （a image type using in medical)&quot;&gt;&lt;/a&gt;dicom （a image type using in medical)&lt;/h4&gt;&lt;p&gt;To read &lt;code&gt;metadata&lt;/code&gt;from a DICOM file, use the &lt;code&gt;dicominfo function&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;To read&lt;code&gt;image data&lt;/code&gt;from a DICOM file, use the &lt;code&gt;dicomread function.&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="matlab" scheme="http://finsenty54.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab图像示例笔记1</title>
    <link href="http://finsenty54.github.io/2020/02/06/matlab%E5%9B%BE%E5%83%8F%E7%A4%BA%E4%BE%8B%E7%AC%94%E8%AE%B01/"/>
    <id>http://finsenty54.github.io/2020/02/06/matlab图像示例笔记1/</id>
    <published>2020-02-06T06:30:11.000Z</published>
    <updated>2020-02-06T06:30:57.460Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对比度"><a href="#对比度" class="headerlink" title="对比度"></a>对比度</h3><p>histogram  直方图<br>Precede the call to <code>imhist</code>with the <code>figure</code>command so that the histogram does not overwrite the display of the image I in the current figure window.</p><p>To see the distribution of intensities in the image, <code>create a histogram by calling the imhist</code> function.<br>输入图片，图片要求为灰度图或者二值图 imhist<br><a id="more"></a><br>    F=imread(‘test.jpg’);<br>    I=rgb2gray(F);<br>    [count,x]=imhist(I，30)</p><p><del>% 获取直方图的横坐标和纵坐标，即各个像素级，以及每个像素级上的像素出现的次数<br>figure;</del></p><pre><code>subplot(221);imhist(I,2);subplot(222);imhist(I,5);subplot(223);imhist(I,10);subplot(224);imhist(I);figure;subplot(121); imhist(I,10)[count,x] = imhist(I,10)subplot(122);stem(x,count);</code></pre><blockquote><p>stem<br>绘制离散序列数据</p></blockquote><p><code>Improve the contrast</code>in an image, using the <code>histeq function</code>. The toolbox includes several other functions that perform contrast adjustment, including <code>imadjust</code> and <code>adapthisteq</code>, and interactive tools such as the Adjust Contrast tool, available in the Image Viewer<br>adjust the contrast </p><blockquote><p>灰度直方图均衡化histeq</p></blockquote><hr><h3 id="Correct-Nonuniform-Background-Illumination-and-Analyze-Foreground-Objects"><a href="#Correct-Nonuniform-Background-Illumination-and-Analyze-Foreground-Objects" class="headerlink" title="Correct Nonuniform Background Illumination and Analyze Foreground Objects"></a>Correct Nonuniform Background Illumination and Analyze Foreground Objects</h3><p>nonuniform</p><blockquote><p>strel（）<br>Morphological structuring element</p></blockquote><p><code>J = imopen(I,SE)</code>performs morphological opening on the grayscale or binary image I, returning the opened image, J. SE is a single structuring element object returned by the <code>strel or offsetstrel functions</code>. The morphological open operation is an erosion followed by a dilation, using the same structuring element for both operations.</p><p>surf<br>曲面图全页折叠<br>语法<br>surf(X,Y,Z)<br>surf(X,Y,Z,C)</p><p><code>f1=imadjust（f，[low_in  high_in],[low_out  high_out],gamma）</code><br>该函数的意义如图1所示，把图像f 灰度变换到新图像f1的过程中，f 中灰度值<code>低于low_in</code>的像素点在f1中灰度值被赋值为<code>low_out</code>,同理，f中灰度值<code>高于high_in</code>的像素点变换到f1时其灰度值也被赋值为<code>high_out</code>;</p><blockquote><p>J=imadjust(I,[0.2 0.5],[0 1])<br>原图像灰度范围为0-255，程序将小于255×0.2的灰度值设置为0，将大于255×0.5的灰度值设置为255</p></blockquote><p>饱和度取决于该色中含色成分和消色成分（灰色）的比例<br>比度指的是一幅图像中明暗区域最亮的白和最暗的黑之间不同亮度层级的测量，差异范围越大代表对比越大</p><p>Use the<code>imbinarize function</code> to convert the grayscale image into a<code>binary image</code></p><p><code>Remove background noise</code> from the image with the<code>bwareaopen function</code>.</p><p>F = false(sz1,…,szN) 是由逻辑值“0”组成的 sz1×…×szN 数组，其中 sz1,…,szN 表示每个维度的大小。例如，false(2,3) 返回由逻辑值“0”组成的 2×3 数组。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;对比度&quot;&gt;&lt;a href=&quot;#对比度&quot; class=&quot;headerlink&quot; title=&quot;对比度&quot;&gt;&lt;/a&gt;对比度&lt;/h3&gt;&lt;p&gt;histogram  直方图&lt;br&gt;Precede the call to &lt;code&gt;imhist&lt;/code&gt;with the &lt;code&gt;figure&lt;/code&gt;command so that the histogram does not overwrite the display of the image I in the current figure window.&lt;/p&gt;
&lt;p&gt;To see the distribution of intensities in the image, &lt;code&gt;create a histogram by calling the imhist&lt;/code&gt; function.&lt;br&gt;输入图片，图片要求为灰度图或者二值图 imhist&lt;br&gt;
    
    </summary>
    
    
      <category term="matlab" scheme="http://finsenty54.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab笔记5 image</title>
    <link href="http://finsenty54.github.io/2020/02/05/matlab%E7%AC%94%E8%AE%B05/"/>
    <id>http://finsenty54.github.io/2020/02/05/matlab笔记5/</id>
    <published>2020-02-05T05:41:19.000Z</published>
    <updated>2020-02-05T05:42:28.598Z</updated>
    
    <content type="html"><![CDATA[<p>使用基于帕斯卡三角形的项创建一个对称矩阵：<br><code>A = pascal(3)</code></p><p>randi 的第一个输入描述整数可能值的范围，后面两个输入描述行和列的数量。<br><code>C = randi(10,3,2)</code></p><p>有一个专门的点积函数，称为 <code>dot</code>。<br><a id="more"></a><br>非共轭复数转置（其中每个元素的复数部分保留其符号）表示为<code>z.&#39;</code></p><p><code>eye(m,n)</code><br>返回 m×n 矩形单位矩阵，eye(n) 返回 n×n 单位方阵。</p><p>向量 x 的 p-范数，<br><code>norm(x,p)</code> 进行计算，此运算是为 p &gt; 1 的任意值定义的，但最常见的 p 值为 1、2 和 ∞。默认值为 p = 2，</p><p><code>x = b/A</code><br>表示使用 mrdivide 获得的矩阵方程 xA = b 的解。<br><code>x = A\b</code><br>表示使用 mldivide 获得的矩阵方程 Ax = b 的解。</p><p><code>(b/A)&#39; = (A&#39;\b&#39;)</code>.<br>m = n<br>方阵方程组。求精确解。<br>m &gt; n<br>超定方程组，即方程个数多于未知数个数。求最小二乘解。<br>m &lt; n<br>欠定方程组，即方程个数少于未知数个数。使用最多 m 个非零分量求基本解。</p><p><em>非奇异矩阵==可逆矩阵</em></p><p><code>eig</code><br>特征值和特征向量</p><p>提供的数据分析函数的列表，请键入<br><code>help datafun</code></p><hr><h1 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h1><p>要显示图像，请使用 imshow 函数：<br><code>imshow(X,map)</code><br>使用<code>imread</code> 函数可以读取标准图像文件（TIFF、JPEG、PNG 等）。imread 返回的数据类型取决于读取的图像类型。<br>使用<code>imwrite</code> 函数可以将 MATLAB 数据写入到各种标准图像格式。<br>大多数图像表示为二维数组（矩阵），其中矩阵的每个元素对应所显示图像的一个像素。例如，由 200 行和 300 列不同颜色的点组成的图像保存为一个 200×300 的矩阵。有些图像，如 RGB，需要三维数组，其中三个维度的第一个平面表示红色像素强度，第二个平面表示绿色像素强度，第三个平面表示蓝色像素强度。<br>MATLAB 数学支持三种不同的数值类用于图像显示：<br>双精度浮点数（double）<br>16 位无符号整数（uint16）<br>8 位无符号整数（uint8）</p><pre><code>imshow    显示图像image    从数组显示图像imagesc    显示使用经过标度映射的颜色的图像imread    从图形文件读取图像imresize    调整图像大小imwrite    将图像写入图形文件imfinfo    有关图形文件的信息imformats    管理图像文件格式注册表frame2im    返回与影片帧关联的图像数据im2frame    将图像转换为影片帧im2java    将图像转换 Java 图像im2double    将图像转换为双精度值ind2rgb    将索引图像转换为 RGB 图像rgb2gray    将 RGB 图像或颜色图转换为灰度图rgb2ind    将 RGB 图像转换为索引图像imapprox    通过减少颜色数量来近似处理索引图像dither    转换图像，通过抖动提高表观颜色分辨率cmpermute    重新排列颜色图中的颜色cmunique    消除颜色图中的重复颜色；将灰度或真彩色图像转换为索引图像</code></pre><p><code>A = imread(&#39;ngc6543a.jpg&#39;);</code></p><hr><p>索引图像由数据矩阵 X 和颜色图矩阵 map 组成。map 是一个 double 类的 m×3 数组，由 [0, 1] 范围内的浮点值组成。map 的每一行指定单一颜色的红、绿和蓝分量。索引图像使用像素值到颜色图值的“直接映射”。每个图像像素的颜色是以 X 中的对应值为索引求得的 map 中的值。<strong>因此 X 值必须是整数。值 1 指向 map 中第一行，值 2 指向第二行，以此类推。使用以下语句显示索引图像。</strong><br><code>image(X); colormap(map)</code><br>图像矩阵和颜色图中值的关系取决于图像矩阵的类。如果图像矩阵是 double 类，那么值 1 指向颜色图中的第一行，值 2 指向第二行，以此类推。如果图像矩阵是 uint8 或 uint16 类，那么有个偏移 - 值 0 指向颜色图中的第一行，值 1 指向第二行，以此类推。在图形文件格式中使用偏移是为了使可支持的颜色数目达到最大。在上面的图像中，图像矩阵是 double 类。</p><hr><p>强度图像是一个数据矩阵 I，其中的值表示某一范围内的强度。强度图像表示为单个矩阵，矩阵的每个元素对应一个图像像素。<br>imagesc(A); colormap(gray)<br>imagesc(A,[min(A(:)) max(A(:))]); colormap(gray)</p><hr><p>bit-depth：使用多少位来定义一个像素点。bit-depth越大，可以表示的色彩就越多。通常情况下，图像的像素值范围为0-255， 则其bit-depth就是8。RGB图像的bit-depth为24：8bit表示R，8bit表示G，8bit表示B。</p><p>RGB 图像，有时称为真彩色图像，以 m×n×3 数据数组形式存储，该数组定义了对应图像每个像素的红色、绿色和蓝色分量。<br><strong>例如像素 (10,5) 的红色、绿色和蓝色分量分别存储在 RGB(10,5,1)、RGB(10,5,2) 和 RGB(10,5,3) 中。</strong></p><hr><p>您可以对 uint8 和 uint16 数组执行其他几种操作，包括：<br>使用 reshape、cat、permute 函数以及 [] 和 ‘ 运算符重构、重新排序和串联数组<br>使用 save 和 load 将 uint8 和 uint16 数组保存及加载到 MAT 文件。（请记住，如果要加载或保存图形格式文件图像，则必须使用 imread 和imwrite 命令代替。）<br>使用 find 定位 uint8 和 uint16 数组中非零元素的索引。但返回的数组始终为 double 类。<br>关系运算符</p><p>基于 NTSC 标准合并 RGB 值，以此方式来计算单色亮度，这会将与眼睛敏感度相关的系数应用到 RGB 颜色：</p><pre><code>I = .2989*rgb_img(:,:,1)...    +.5870*rgb_img(:,:,2)...    +.1140*rgb_img(:,:,3);</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用基于帕斯卡三角形的项创建一个对称矩阵：&lt;br&gt;&lt;code&gt;A = pascal(3)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;randi 的第一个输入描述整数可能值的范围，后面两个输入描述行和列的数量。&lt;br&gt;&lt;code&gt;C = randi(10,3,2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有一个专门的点积函数，称为 &lt;code&gt;dot&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="matlab" scheme="http://finsenty54.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab笔记4</title>
    <link href="http://finsenty54.github.io/2020/02/03/matlab%E7%AC%94%E8%AE%B04/"/>
    <id>http://finsenty54.github.io/2020/02/03/matlab笔记4/</id>
    <published>2020-02-03T05:12:21.000Z</published>
    <updated>2020-02-03T05:13:01.660Z</updated>
    
    <content type="html"><![CDATA[<pre><code>B = A - 8.5B(1:2,2:3) = 0x = [2.1 1.7 1.6 1.5 NaN 1.9 1.8 1.5 5.1 1.8 1.4 2.2 1.6 1.8];x = x(isfinite(x))x =  2.1 1.7 1.6 1.5 1.9 1.8 1.5 5.1 1.8 1.4 2.2 1.6 1.8x = x(abs(x-mean(x)) &lt;= 3*std(x))x =  2.1 1.7 1.6 1.5 1.9 1.8 1.5 1.8 1.4 2.2 1.6 1.8</code></pre><a id="more"></a><hr><p>find 函数可用于确定与指定逻辑条件相符的数组元素的索引。find 以最简单的形式返回索引的列向量。转置该向量以便获取索引的行向量。</p><pre><code>k = find(isprime(A))&apos;k =     2     5     9    10    11    13</code></pre><p><code>R = randn(3,4,5);</code></p><hr><p>MATLAB 中的元胞数组是以其他数组的副本为元素的多维数组<br><code>C = {A sum(A) prod(prod(A))}</code><br>。第一，要检索某个元胞的内容，请在花括号中使用下标。例如，C{1} 检索幻方矩阵，C{3} 为 16!。第二，<strong>元胞数组包含其他数组的副本，而不包含指向这些数组的指针</strong>。</p><pre><code>M = cell(8,1); 元胞数组for n = 1:8   M{n} = magic(n);endM</code></pre><hr><p><code>v = [s; &#39;world&#39;]</code><br>垂直联接字符并生成</p><pre><code>v =   Hello   world</code></pre><p>char 函数可执行这种填充操作。例如，<br><code>S = char(&#39;A&#39;,&#39;rolling&#39;,&#39;stone&#39;,&#39;gathers&#39;,&#39;momentum.&#39;)</code></p><p>也可以将文本存储在元胞数组中。例如，</p><p><code>C = {&#39;A&#39;;&#39;rolling&#39;;&#39;stone&#39;;&#39;gathers&#39;;&#39;momentum.&#39;}</code></p><p>可以将填充后的字符数组转换为字符向量元胞数组：<br><code>C = cellstr(S)</code><br>使用以下语句可以逆转此过程<br><code>S = char(C)</code></p><hr><p>结构体是多维 MATLAB 数组，包含可按文本字段标志符访问的元素。例如，</p><pre><code>S.name = &apos;Ed Plum&apos;;S.score = 83;S.grade = &apos;B+&apos;S =      name: &apos;Ed Plum&apos;    score: 83    grade: &apos;B+&apos;</code></pre><p>可以一次添加一个字段，</p><pre><code>S(2).name = &apos;Toni Miller&apos;;S(2).score = 91;S(2).grade = &apos;A-&apos;;</code></pre><p>可以使用一个语句添加整个元素：</p><pre><code>S(3) = struct(&apos;name&apos;,&apos;Jerry Garcia&apos;,...                &apos;score&apos;,70,&apos;grade&apos;,&apos;C&apos;)</code></pre><p>键入<br><code>S.score</code><br>与键入<br><code>S(1).score, S(2).score, S(3).score</code><br>相同，这是一个逗号分隔列表。</p><pre><code>scores = [S.score]names = char(S.name)names = {S.name}[N1 N2 N3] = S.name</code></pre><p>访问结构体数据的另一种方法是使用动态字段名称。这些名称将字段表示为变量表达式，MATLAB 会在运行时计算这些表达式。此处显示的点-括号语法将 expression 作为动态字段名称：<br><code>structName.(expression)</code><br>例如，要在字段名称中计算 expression，并在行 7 中的 1 至 25 列内获取该字段的值，请使用<br><code>structName.(expression)(7,1:25)</code></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;B = A - 8.5
B(1:2,2:3) = 0
x = [2.1 1.7 1.6 1.5 NaN 1.9 1.8 1.5 5.1 1.8 1.4 2.2 1.6 1.8];
x = x(isfinite(x))
x =
  2.1 1.7 1.6 1.5 1.9 1.8 1.5 5.1 1.8 1.4 2.2 1.6 1.8
x = x(abs(x-mean(x)) &amp;lt;= 3*std(x))
x =
  2.1 1.7 1.6 1.5 1.9 1.8 1.5 1.8 1.4 2.2 1.6 1.8
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="matlab" scheme="http://finsenty54.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab笔记3</title>
    <link href="http://finsenty54.github.io/2020/02/02/matlab%E7%AC%94%E8%AE%B03/"/>
    <id>http://finsenty54.github.io/2020/02/02/matlab笔记3/</id>
    <published>2020-02-02T06:12:38.000Z</published>
    <updated>2020-02-02T06:13:25.447Z</updated>
    
    <content type="html"><![CDATA[<p>科学记数法使用字母 e 来指定 10 次方的缩放因子<br>浮点数的有限精度约为 16 位有效小数位数，有限范围约为 10-308 至 10+308。双精度格式表示的数字的最大精度为 52 位。整数的可用精度为 8 位、16 位、32 位和 64 位</p><pre><code>x = uint64(36028797018963968);y = uint64(36028797018963972);</code></pre><a id="more"></a><hr><p>例如，sort 函数根据量值进行排序，如果量值相等，则根据相位角度排序。</p><pre><code>sort([3+4i, 4+3i])  量值都为5ans =   4.0000 + 3.0000i   3.0000 + 4.0000iangle(3+4i)ans =    0.9273</code></pre><p>“等于”关系运算符 == 要求实部和虚部相等。其他二进制关系运算符 &gt;、&lt;、&gt;= 和 &lt;= 忽略数字的虚部，而仅考虑实部。</p><hr><p>数组运算对构建表非常有用。假定 n 为列向量<br><code>n = (0:9)&#39;;</code><br>然后，<br><code>pows = [n  n.^2  2.^n]</code><br>构建一个平方和 2 次幂的表：</p><pre><code>pows =     0     0     1     1     1     2     2     4     4     3     9     8     4    16    16     5    25    32     6    36    64     7    49   128     8    64   256     9    81   512</code></pre><hr><pre><code>format short gx = (1:0.1:2)&apos;;logs = [x log10(x)]</code></pre><p>构建一个对数表。</p><pre><code>logs =     1.0            0      1.1      0.04139     1.2      0.07918     1.3      0.11394     1.4      0.14613     1.5      0.17609     1.6      0.20412     1.7      0.23045     1.8      0.25527     1.9      0.27875     2.0      0.30103</code></pre><hr><p>有关初等数学函数的列表，请键入<br>help elfun<br>有关更多高等数学函数和矩阵函数的列表，请键入<br>help specfun<br>help elmat</p><hr><p>format 函数控制所显示的值的数值格式。</p><pre><code>x = [4/3 1.2345e-6]format short   1.3333    0.0000format short e   1.3333e+000  1.2345e-006format short g   1.3333  1.2345e-006format long   1.33333333333333   0.00000123450000format long e   1.333333333333333e+000    1.234500000000000e-006format long g   1.33333333333333               1.2345e-006format bank   1.33          0.00format rat   4/3          1/810045format hex   3ff5555555555555   3eb4b6231abfd271</code></pre><p>语句无法容纳在一行中，请使用省略号（三个句点）<strong>…</strong></p><p>要进一步控制输出格式，请使用 sprintf 和 fprintf 函数。</p><hr><pre><code>100:-7:50sum(A(1:4,4))sum(A(:,end)) end 引用最后一个行或列</code></pre><p>为什么 4×4 幻方矩阵的幻数和等于 34？如果将介于 1 到 16 之间的整数分为四个总和相等的组，该总和必须为<br>sum(1:16)/4<br>当然，也即<br>ans =<br>     34</p><p><code>B = [A  A+32; A+48  A+16]</code></p><hr><p>要删除 X 的第二列，请使用<br><code>X(:,2) = []</code></p><p><code>X( 2 : 2 : 10) = []</code> 按列数第几个<br>生成<br><code>X =    16     9     2     7    13    12     1</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;科学记数法使用字母 e 来指定 10 次方的缩放因子&lt;br&gt;浮点数的有限精度约为 16 位有效小数位数，有限范围约为 10-308 至 10+308。双精度格式表示的数字的最大精度为 52 位。整数的可用精度为 8 位、16 位、32 位和 64 位&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = uint64(36028797018963968);
y = uint64(36028797018963972);
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="matlab" scheme="http://finsenty54.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab笔记2</title>
    <link href="http://finsenty54.github.io/2020/02/01/matlab%E7%AC%94%E8%AE%B02/"/>
    <id>http://finsenty54.github.io/2020/02/01/matlab笔记2/</id>
    <published>2020-02-01T11:17:59.000Z</published>
    <updated>2020-02-02T06:12:27.923Z</updated>
    
    <content type="html"><![CDATA[<p>处理文本时，将字符序列括在单引号中。可以将文本赋给变量。<br><code>myText = &#39;Hello, world&#39;;</code><br>如果文本包含单引号，使用两个单引号。</p><pre><code>otherText = &apos;You&apos;&apos;re right&apos;otherText = &apos;You&apos;re right&apos;</code></pre><hr><a id="more"></a><p><code>whos</code>查询已有变量</p><hr><p>可以使用方括号串联字符数组，就像串联数值数组一样。<br><code>longText = [myText,&#39; - &#39;,otherText]</code></p><p>要将数值转换为字符，使用 num2str 或 int2str 等函数。</p><pre><code>f = 71;c = (f-32)/1.8;tempText = [&apos;Temperature is &apos;,num2str(c),&apos;C&apos;]</code></pre><hr><p>调用函数，例如 max，请将其输入参数括在圆括号中，存在多个输入参数，请使用逗号加以分隔，存在多个输出参数，请将其括在方括号中：</p><pre><code>[maxA,location] = max(A)maxA = 5location = 3</code></pre><hr><p>任何字符输入括在单引号中：<br><code>disp(&#39;hello world&#39;)</code></p><hr><p>创建二维线图，请使用 plot（绘制） 函数。</p><pre><code>x = 0:pi/100:2*pi; 创建矩阵的一种方法y = sin(x);plot(x,y）</code></pre><p>标记轴并添加标题。</p><pre><code>xlabel(&apos;x&apos;)ylabel(&apos;sin(x)&apos;)title(&apos;Plot of the Sine Function&apos;)</code></pre><p>向 plot 函数添加第三个输入参数，您可以使用红色虚线绘制相同的变量。<br><code>plot(x,y,&#39;r--&#39;)</code><br>‘r–’ 为线条设定。每个设定可包含表示线条颜色、样式和标记的字符。标记是在绘制的每个数据点上显示的符号，例如，+、o 或 <em>。例如，’g:</em>‘ 请求绘制使用 * 标记的绿色点线。</p><p>将绘图添加到现有图窗中，请使用 hold on。在使用 hold off 或关闭窗口之前，当前图窗窗口中会显示所有绘图</p><pre><code>hold ony2 = cos(x);plot(x,y2,&apos;:&apos;)legend(&apos;sin&apos;,&apos;cos&apos;) legend就是添加图例的标注比如：legend(&apos;First&apos;,&apos;Second&apos;,-1)，表示字符串依次注释plot中的图，后面板的参数（此处是-1）表示注释的位置。hold off</code></pre><hr><p>三维图通常显示一个由带两个变量的函数（即 z = f (x,y)）定义的曲面图。</p><p><code>[X,Y] = meshgrid(-2:.2:2);</code> STEP=0.2  meshgrid函数生成的X，Y是大小相等的矩阵</p><p>surf 函数及其伴随函数 mesh 以三维形式显示曲面图。surf 使用颜色显示曲面图的连接线和面。mesh 生成仅以颜色标记连接定义点的线条的线框曲面图。</p><hr><p>使用 subplot 函数可以在同一窗口的不同子区域显示多个绘图。<br>subplot 的前两个输入表示每行和每列中的绘图数。第三个输入指定绘图是否处于活动状态。</p><hr><blockquote><p>键入脚本名称即可运行该脚本。脚本是最简单的一种 MATLAB® 程序。脚本是一个包含多行连续 MATLAB 命令和函数调用的扩展名为<code>.m</code>的文件。在命令行中<em>键入脚本名称</em>即可运行该脚本。<br>要创建脚本，请使用 edit 命令。<br><code>edit plotrand</code><br>使用百分比 (%) 符号添加注释</p></blockquote><hr><pre><code>nsamples = 5;npoints = 50;for k = 1:nsamples    currentData = rand(npoints,1);    sampleMean(k) = mean(currentData);endoverallMean = mean(sampleMean)if overallMean &lt; .49   disp(&apos;Mean is less than expected&apos;)elseif overallMean &gt; .51   disp(&apos;Mean is greater than expected&apos;)else   disp(&apos;Mean is within the expected range&apos;)end</code></pre><hr><p>使用 doc 命令在单独的窗口中打开函数文档。<br><code>doc mean</code><br>在键入函数输入参数的左括号之后暂停，此时命令行窗口中会显示相应函数的提示<br>使用 help 命令可在命令行窗口中查看相应函数的简明文档。</p><hr><p>使用空格或逗号分隔行的元素。<br>使用分号 ; 表示每行末尾。<br>使用方括号 [ ] 将整个元素列表括起来。</p><p>sum(A) 计算列<br>sum(A’)’<br>避免双重转置的其他方法，请在 sum 函数中使用维度参数：<br><code>sum(A,2)</code></p><p><code>diag(A)</code> 获取对角线值</p><hr><p>图形的函数 fliplr 可以从左往右地翻转矩阵：<br><code>sum(diag(fliplr(A)))</code></p><hr><p>magic 函数创建几乎任意大小的幻方矩阵。行列对角线相加都相同<br>四个用于生成基本矩阵的函数。<br>zeros<br>全部为零<br>ones<br>全部为 1<br>rand<br>均匀分布的随机元素<br>randn<br>正态分布的随机元素</p><hr><p>MATLAB 不需要任何类型声明或维度说明。当 MATLAB 遇到新的变量名称时，它会自动创建变量，并分配适当大小的存储。如果此变量已存在，MATLAB 会更改其内容，并根据需要分配新存储。</p><p>MATLAB 仅使用名称的前 N 个字符（其中 N 是函数 namelengthmax 返回的数字） 为63</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;处理文本时，将字符序列括在单引号中。可以将文本赋给变量。&lt;br&gt;&lt;code&gt;myText = &amp;#39;Hello, world&amp;#39;;&lt;/code&gt;&lt;br&gt;如果文本包含单引号，使用两个单引号。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;otherText = &amp;apos;You&amp;apos;&amp;apos;re right&amp;apos;
otherText = 
&amp;apos;You&amp;apos;re right&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
    
      <category term="matlab" scheme="http://finsenty54.github.io/tags/matlab/"/>
    
  </entry>
  
</feed>
